{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get Started with DDEV \u00b6 DDEV is an open source tool for launching local PHP development environments in minutes. These environments can be extended, version controlled, and shared, so you can take advantage of a Docker workflow without Docker experience or bespoke configuration. Projects can be changed, powered down, or removed just as easily as they\u2019re started. System Requirements \u00b6 macOS Windows WSL2 Traditional Windows Linux Gitpod macOS \u00b6 Runs natively on ARM64 (Apple Silicon) and AMD64 machines. RAM: 8GB Storage: 256GB Colima or Docker Desktop Docker Desktop requires macOS Catalina (10.15) or higher; Colima runs on older systems Windows WSL2 \u00b6 RAM: 8GB Storage: 256GB Docker Desktop on the Windows side or Docker CE inside WSL2 Ubuntu or an Ubuntu-derived distro is recommended, though others may work fine Traditional Windows \u00b6 Any recent edition of Windows Home or Windows Pro. RAM: 8GB Storage: 256GB Docker Desktop using the WSL2 backend Linux \u00b6 Most distros and most versions work fine, on both AMD64 and ARM64 architectures. RAM: 8GB Storage: 256GB Gitpod \u00b6 With Gitpod you don\u2019t install anything; you only need a browser and an internet connection.","title":"Get Started with DDEV"},{"location":"#get-started-with-ddev","text":"DDEV is an open source tool for launching local PHP development environments in minutes. These environments can be extended, version controlled, and shared, so you can take advantage of a Docker workflow without Docker experience or bespoke configuration. Projects can be changed, powered down, or removed just as easily as they\u2019re started.","title":"Get Started with DDEV"},{"location":"#system-requirements","text":"macOS Windows WSL2 Traditional Windows Linux Gitpod","title":"System Requirements"},{"location":"developers/","text":"Developing and Improving DDEV \u00b6 This section is for folks making contributions to DDEV. It covers how to build and release Docker images, and contribute documentation.","title":"Developing and Improving DDEV"},{"location":"developers/#developing-and-improving-ddev","text":"This section is for folks making contributions to DDEV. It covers how to build and release Docker images, and contribute documentation.","title":"Developing and Improving DDEV"},{"location":"developers/brand-guide/","text":"Brand Guide \u00b6 Logos \u00b6 Figurative Mark Word/Figurative Mark You can find a set of DDEV logos here . If possible, use the SVG version of the logo, as a vector graphic is independent of the resolution and gives the best results regardless of the pixel density of the display. If the SVG format is not supported, you can use the exported PNG versions of the logo. Use @2x , @3x , and @4x for high pixel density displays. Many applications support @2x annotations in the image path and automatically choose the correct image for the display in use. Currently there is no prepared version for dark backgrounds of the word/figurative mark. Color Plate \u00b6 DDEV Blue DDEV Black #02a8e2 #1e2127 Use of the Word Mark DDEV \u00b6 The product DDEV is always referenced in capital letters. When referring to the binary ddev , lowercase letters are preferred.","title":"Brand Guide"},{"location":"developers/brand-guide/#brand-guide","text":"","title":"Brand Guide"},{"location":"developers/brand-guide/#logos","text":"Figurative Mark Word/Figurative Mark You can find a set of DDEV logos here . If possible, use the SVG version of the logo, as a vector graphic is independent of the resolution and gives the best results regardless of the pixel density of the display. If the SVG format is not supported, you can use the exported PNG versions of the logo. Use @2x , @3x , and @4x for high pixel density displays. Many applications support @2x annotations in the image path and automatically choose the correct image for the display in use. Currently there is no prepared version for dark backgrounds of the word/figurative mark.","title":"Logos"},{"location":"developers/brand-guide/#color-plate","text":"DDEV Blue DDEV Black #02a8e2 #1e2127","title":"Color Plate"},{"location":"developers/brand-guide/#use-of-the-word-mark-ddev","text":"The product DDEV is always referenced in capital letters. When referring to the binary ddev , lowercase letters are preferred.","title":"Use of the Word Mark DDEV"},{"location":"developers/building-contributing/","text":"Building, Testing, and Contributing \u00b6 Testing Latest Commits \u00b6 You can download the latest artifacts from the master branch from link . On macOS and Linux, you can brew unlink ddev && brew install drud/ddev/ddev --HEAD --fetch-HEAD to get the latest commit of DDEV, even if it\u2019s unreleased. If you\u2019re using Linux/WSL2, you\u2019ll likely need to install build-essential with the following command: sudo apt install -y build-essential . To download the latest version, you can visit the master-build workflow and choose the latest item (or the one that matches a commit you want to test). The artifacts for each OS are at the bottom of the page. Alternately, you can see the latest build in action by visiting DDEV on Gitpod . Testing a PR \u00b6 Each build of a PR has artifacts created in GitHub, so you can click the details of the PR Build test, choose the PR you want to work with, and download the artifacts you need. After you download and unzip the appropriate binary, you can place it in your $PATH . The easiest way to do this if you\u2019re using Homebrew is brew unlink ddev and then unzip ddev.zip && chmod +x ddev && mv ddev /usr/local/bin/ddev . Verify the replacement worked via ddev -v . The output should be something like ddev version v1.19.1-42-g5334d3c1 , instead of the regular ddev version v1.19.1 . (On macOS these downloaded binaries are not signed, so you\u2019ll want to xattr -r -d com.apple.quarantine /path/to/ddev in order to use them. The binaries on the master branch and the final binaries in any release are signed.) You do not typically have to install anything else other than the downloaded binary; when you run it it will access any Docker images that it needs. After you\u2019re done, you can remove the downloaded binary and brew link ddev . Open in Gitpod \u00b6 Gitpod provides a quick, preconfigured DDEV experience in the browser for testing a PR easily without the need to set up an environment. In any PR you can use the URL https://gitpod.io/#https://github.com/drud/ddev/pulls/<YOUR-PR> to open that PR and build it in Gitpod. To open and work on DDEV you can use the button below. If you want to run a web project, you can check it out into /workspace/<yourproject> and use it as usual. The things you\u2019re familiar with work normally, except that ddev-router does not run. A Gitpod dummy project for is provided by default in /workspace/d9simple . If you\u2019re testing your own project, you will need to delete it to free up reserved host ports by running ddev delete -Oy d9simple . Then you can run ddev start to work with your own. Making Changes to DDEV Images \u00b6 If you need to make a change to one of the DDEV images, it will need to be built with a specific tag that\u2019s updated in pkg/versionconstants/versionconstants.go . For example, make a change to containers/ddev-webserver/Dockerfile , then build it: cd containers/ddev-webserver make VERSION = 20210424_fix_dockerfile Then edit pkg/versionconstants/versionconstants.go to set var WebTag = \"20210424_fix_dockerfile\" and cd /workspace/ddev make ddev version should show you that you are using the correct webtag, and ddev start will show it. It\u2019s easiest to do this using Gitpod (see above) because Gitpod already has docker buildx all set up for you and the built DDEV binary is in the $PATH . Pull Requests and PR Preparation \u00b6 When preparing your pull request, please use a branch name like 2022MMDD_<your_username>_short_description (like 20230901_rfay_short_description ) so it\u2019s easy to identify you as the author. Docker Image Changes \u00b6 If you make changes to a Docker image (like ddev-webserver ), it won\u2019t have any effect unless you: Push an image with a specific tag by navigating to the image directory (like containers/ddev-webserver ), and running make push DOCKER_REPO=youruser/yourimage VERSION=<branchname> . Multi-arch images require you to have a Buildx builder, so docker buildx create --name ddev-builder-multi --use . You can\u2019t push until you docker login . Push a container to hub.docker.com. Push with the tag that matches your branch. Pushing to <yourorg>/ddev-webserver repo is easy to accomplish with make push DOCKER_ORG=<yourorg> VERSION=<branchname> in the container directory . You might have to use other techniques to push to another repo. Update pkg/versionconstants/versionconstants.go with the WebImg and WebTag that relate to the Docker image you pushed. Local Builds and Pushes \u00b6 To use buildx successfully you have to have the buildx Docker plugin , which is in many environments by default. To build multi-platform images you must docker buildx create --use as a one-time initialization. If you want to work locally with a quick build for your architecture, you can: make VERSION=<version> for ddev-dbserver : make mariadb_10.3 VERSION=<version> etc. To push manually: cd containers/ddev-webserver make push VERSION=<tag> If you\u2019re pushing to a repo other than the one wired into the Makefile (like drud/ddev-webserver ): cd containers/ddev-webserver make push VERSION=<tag> DOCKER_REPO=your/dockerrepo Pushes Using GitHub Actions \u00b6 To manually push using GitHub Actions, For Most Images \u00b6 Visit Actions \u2192 Push tagged image Click \u201cRun workflow\u201d in the blue band near the top. Choose the branch, usually master and then the image to be pushed, ddev-webserver , ddev-dbserver , etc. Also you can use all to build and push all of them. Include a tag for the pushed image and GitHub will do all the work. For ddev-dbserver \u00b6 Visit Actions \u2192 Push tagged db image Click \u201cRun workflow\u201d in the blue band near the top. Choose the branch, usually master . Include a tag for the pushed image and GitHub will do all the work. Building \u00b6 You'll want both your fork/branch and the upstream as remotes in git, so that tags can be determined. For example, the upstream git remote can be https://github.com/drud/ddev and your fork's remote can be git@github.com:<yourgithubuser>/ddev . Without the upstream, git may not know about tags that it needs for tests to work. To run tests, you'll want ~/tmp to be allowed in docker. This is not normally an issue as the home directory is available by default in most docker providers. Build the project with make and your resulting executable will end up in .gotmp/bin/linux_amd64/ddev or .gotmp/bin/linux_arm64/ddev (for Linux) or .gotmp/bin/windows_amd64/ddev.exe (for Windows) or .gotmp/bin/darwin_amd64/ddev or .gotmp/bin/darwin_arm64/ddev (for macOS). Build/test/check static analysis with: make # Builds on current os/architecture make linux_amd64 make linux_arm64 make darwin_amd64 make darwin_arm64 make windows_amd64 make test make clean make staticrequired Testing \u00b6 Normal test invocation is make test . Run a single test with an invocation like go test -v -run TestDevAddSites ./pkg/... or make testpkg TESTARGS=\"-run TestDevAddSites\" . The easiest way to run tests is from inside the excellent golang IDE GoLand . Click the arrowhead to the left of the test name. To see which DDEV commands the tests are executing, set the environment variable DDEV_DEBUG=true . Use GOTEST_SHORT=true to run just one CMS in each test, or GOTEST_SHORT=<integer> to run exactly one project type from the list of project types in the TestSites array . For example, GOTEST_SHORT=5 make testpkg TESTARGS=\"-run TestDdevFullSiteSetup\" will run only TestDdevFullSiteSetup against TYPO3. To run a test (in the cmd package) against a individually-compiled DDEV binary, set the DDEV_BINARY_FULLPATH environment variable, for example DDEV_BINARY_FULLPATH=$PWD/.gotmp/bin/linux_amd64/ddev make testcmd . The easiest way to run tests is using GoLand (or VS Code) with their built-in test runners and debuggers. You can step through a specific test; you can stop at the point before the failure and experiment with the site that the test has set up. Automated Testing \u00b6 Anybody can view the CircleCI automated tests, and they usually show up any problems that are not OS-specific. Just click through on the testing section of the PR to see them. The Buildkite automated tests require special access, which we typically grant to any PR contributor that asks for it. Docker Image Development \u00b6 The Docker images that DDEV uses are included in the containers/ directory: containers/ddev-php-base the base build for ddev-webserver . containers/ddev-webserver provides the web servers for per-project web containers. containers/ddev-dbserver provides the db container for per-project databases. containers/ddev-router provides the central router image. containers/ddev-ssh-agent provides a single in-Docker-network SSH agent so projects can use your SSH keys. When changes are made to an image, they have to be temporarily pushed to a tag\u2014ideally with the same as the branch name of the PR\u2014and the tag updated in pkg/versionconstants/versionconstants.go . Please ask if you need a container pushed to support a pull request. Pull Request Pro Tips \u00b6 Fork the repository and clone it locally. Connect your local to the original \u2018upstream\u2019 repository by adding it as a remote, and pull upstream changes often so you stay up to date and reduce the likelihood of conflicts when you submit your pull request. See more detailed instructions here . Create a branch for your edits. Be clear about the problem and how someone can recreate it, or why your feature will help. Be equally clear about the steps you took to make your changes. It\u2019s best to test . Run your changes against any existing tests and create new tests when needed. Whether tests exist or not, make sure your changes don\u2019t break the existing project. Open Pull Requests \u00b6 Once you\u2019ve opened a pull request, a discussion will start around your proposed changes. Other contributors and users may chime in, but ultimately the decision is made by the maintainer(s). You may be asked to make some changes to your pull request. If so, add more commits to your branch and push them. They\u2019ll automatically go into the existing pull request. If your pull request is merged, great! If not, no sweat; it may not be what the project maintainer had in mind, or they were already working on it. This happens, so our recommendation is to take any feedback you\u2019ve received and go forth and pull request again. Or create your own open source project. Coding Style \u00b6 Unless explicitly stated, we follow all coding guidelines from the Go community. While some of these standards may seem arbitrary, they somehow seem to result in a solid, consistent codebase. It is possible that the code base does not currently comply with these guidelines. We are not looking for a massive PR that fixes this since that goes against the spirit of the guidelines. All new contributions should make a best effort to clean up and make the code base better than they left it. Obviously, apply your best judgment. Remember, the goal here is to make the code base easier for humans to navigate and understand. Always keep that in mind when nudging others to comply. Use make staticrequired to ensure that your code can pass the required static analysis tests. The rules: All code should be formatted with gofmt -s . All code should pass the default levels of golint . All code should follow the guidelines covered in Effective Go and Go Code Review Comments . Comment the code. Tell us the why, the history and the context. Document all declarations and methods, even private ones. Declare expectations, caveats and anything else that may be important. If a type gets exported, having the comments already there will ensure it\u2019s ready. Variable name length should be proportional to its context and no longer. noCommaALongVariableNameLikeThisIsNotMoreClearWhenASimpleCommentWouldDo . In practice, short methods will have short variable names and globals will have longer names. No underscores in package names. If you need a compound name, step back, and re-examine why you need a compound name. If you still think you need a compound name, lose the underscore. All tests should run with go test and outside tooling should not be required. No, we don\u2019t need another unit testing framework. Assertion packages are acceptable if they provide real incremental value. Even though we call these \u201crules\u201d above, they are actually just guidelines. Since you\u2019ve read all the rules, you now know that. If you are having trouble getting into the mood of idiomatic Go, we recommend reading through Effective Go . The Go Blog is also a great resource. Drinking the kool-aid is a lot easier than going thirsty.","title":"Building, Testing, and Contributing"},{"location":"developers/building-contributing/#building-testing-and-contributing","text":"","title":"Building, Testing, and Contributing"},{"location":"developers/building-contributing/#testing-latest-commits","text":"You can download the latest artifacts from the master branch from link . On macOS and Linux, you can brew unlink ddev && brew install drud/ddev/ddev --HEAD --fetch-HEAD to get the latest commit of DDEV, even if it\u2019s unreleased. If you\u2019re using Linux/WSL2, you\u2019ll likely need to install build-essential with the following command: sudo apt install -y build-essential . To download the latest version, you can visit the master-build workflow and choose the latest item (or the one that matches a commit you want to test). The artifacts for each OS are at the bottom of the page. Alternately, you can see the latest build in action by visiting DDEV on Gitpod .","title":"Testing Latest Commits"},{"location":"developers/building-contributing/#testing-a-pr","text":"Each build of a PR has artifacts created in GitHub, so you can click the details of the PR Build test, choose the PR you want to work with, and download the artifacts you need. After you download and unzip the appropriate binary, you can place it in your $PATH . The easiest way to do this if you\u2019re using Homebrew is brew unlink ddev and then unzip ddev.zip && chmod +x ddev && mv ddev /usr/local/bin/ddev . Verify the replacement worked via ddev -v . The output should be something like ddev version v1.19.1-42-g5334d3c1 , instead of the regular ddev version v1.19.1 . (On macOS these downloaded binaries are not signed, so you\u2019ll want to xattr -r -d com.apple.quarantine /path/to/ddev in order to use them. The binaries on the master branch and the final binaries in any release are signed.) You do not typically have to install anything else other than the downloaded binary; when you run it it will access any Docker images that it needs. After you\u2019re done, you can remove the downloaded binary and brew link ddev .","title":"Testing a PR"},{"location":"developers/building-contributing/#open-in-gitpod","text":"Gitpod provides a quick, preconfigured DDEV experience in the browser for testing a PR easily without the need to set up an environment. In any PR you can use the URL https://gitpod.io/#https://github.com/drud/ddev/pulls/<YOUR-PR> to open that PR and build it in Gitpod. To open and work on DDEV you can use the button below. If you want to run a web project, you can check it out into /workspace/<yourproject> and use it as usual. The things you\u2019re familiar with work normally, except that ddev-router does not run. A Gitpod dummy project for is provided by default in /workspace/d9simple . If you\u2019re testing your own project, you will need to delete it to free up reserved host ports by running ddev delete -Oy d9simple . Then you can run ddev start to work with your own.","title":"Open in Gitpod"},{"location":"developers/building-contributing/#making-changes-to-ddev-images","text":"If you need to make a change to one of the DDEV images, it will need to be built with a specific tag that\u2019s updated in pkg/versionconstants/versionconstants.go . For example, make a change to containers/ddev-webserver/Dockerfile , then build it: cd containers/ddev-webserver make VERSION = 20210424_fix_dockerfile Then edit pkg/versionconstants/versionconstants.go to set var WebTag = \"20210424_fix_dockerfile\" and cd /workspace/ddev make ddev version should show you that you are using the correct webtag, and ddev start will show it. It\u2019s easiest to do this using Gitpod (see above) because Gitpod already has docker buildx all set up for you and the built DDEV binary is in the $PATH .","title":"Making Changes to DDEV Images"},{"location":"developers/building-contributing/#pull-requests-and-pr-preparation","text":"When preparing your pull request, please use a branch name like 2022MMDD_<your_username>_short_description (like 20230901_rfay_short_description ) so it\u2019s easy to identify you as the author.","title":"Pull Requests and PR Preparation"},{"location":"developers/building-contributing/#docker-image-changes","text":"If you make changes to a Docker image (like ddev-webserver ), it won\u2019t have any effect unless you: Push an image with a specific tag by navigating to the image directory (like containers/ddev-webserver ), and running make push DOCKER_REPO=youruser/yourimage VERSION=<branchname> . Multi-arch images require you to have a Buildx builder, so docker buildx create --name ddev-builder-multi --use . You can\u2019t push until you docker login . Push a container to hub.docker.com. Push with the tag that matches your branch. Pushing to <yourorg>/ddev-webserver repo is easy to accomplish with make push DOCKER_ORG=<yourorg> VERSION=<branchname> in the container directory . You might have to use other techniques to push to another repo. Update pkg/versionconstants/versionconstants.go with the WebImg and WebTag that relate to the Docker image you pushed.","title":"Docker Image Changes"},{"location":"developers/building-contributing/#building","text":"You'll want both your fork/branch and the upstream as remotes in git, so that tags can be determined. For example, the upstream git remote can be https://github.com/drud/ddev and your fork's remote can be git@github.com:<yourgithubuser>/ddev . Without the upstream, git may not know about tags that it needs for tests to work. To run tests, you'll want ~/tmp to be allowed in docker. This is not normally an issue as the home directory is available by default in most docker providers. Build the project with make and your resulting executable will end up in .gotmp/bin/linux_amd64/ddev or .gotmp/bin/linux_arm64/ddev (for Linux) or .gotmp/bin/windows_amd64/ddev.exe (for Windows) or .gotmp/bin/darwin_amd64/ddev or .gotmp/bin/darwin_arm64/ddev (for macOS). Build/test/check static analysis with: make # Builds on current os/architecture make linux_amd64 make linux_arm64 make darwin_amd64 make darwin_arm64 make windows_amd64 make test make clean make staticrequired","title":"Building"},{"location":"developers/building-contributing/#testing","text":"Normal test invocation is make test . Run a single test with an invocation like go test -v -run TestDevAddSites ./pkg/... or make testpkg TESTARGS=\"-run TestDevAddSites\" . The easiest way to run tests is from inside the excellent golang IDE GoLand . Click the arrowhead to the left of the test name. To see which DDEV commands the tests are executing, set the environment variable DDEV_DEBUG=true . Use GOTEST_SHORT=true to run just one CMS in each test, or GOTEST_SHORT=<integer> to run exactly one project type from the list of project types in the TestSites array . For example, GOTEST_SHORT=5 make testpkg TESTARGS=\"-run TestDdevFullSiteSetup\" will run only TestDdevFullSiteSetup against TYPO3. To run a test (in the cmd package) against a individually-compiled DDEV binary, set the DDEV_BINARY_FULLPATH environment variable, for example DDEV_BINARY_FULLPATH=$PWD/.gotmp/bin/linux_amd64/ddev make testcmd . The easiest way to run tests is using GoLand (or VS Code) with their built-in test runners and debuggers. You can step through a specific test; you can stop at the point before the failure and experiment with the site that the test has set up.","title":"Testing"},{"location":"developers/building-contributing/#automated-testing","text":"Anybody can view the CircleCI automated tests, and they usually show up any problems that are not OS-specific. Just click through on the testing section of the PR to see them. The Buildkite automated tests require special access, which we typically grant to any PR contributor that asks for it.","title":"Automated Testing"},{"location":"developers/building-contributing/#docker-image-development","text":"The Docker images that DDEV uses are included in the containers/ directory: containers/ddev-php-base the base build for ddev-webserver . containers/ddev-webserver provides the web servers for per-project web containers. containers/ddev-dbserver provides the db container for per-project databases. containers/ddev-router provides the central router image. containers/ddev-ssh-agent provides a single in-Docker-network SSH agent so projects can use your SSH keys. When changes are made to an image, they have to be temporarily pushed to a tag\u2014ideally with the same as the branch name of the PR\u2014and the tag updated in pkg/versionconstants/versionconstants.go . Please ask if you need a container pushed to support a pull request.","title":"Docker Image Development"},{"location":"developers/building-contributing/#pull-request-pro-tips","text":"Fork the repository and clone it locally. Connect your local to the original \u2018upstream\u2019 repository by adding it as a remote, and pull upstream changes often so you stay up to date and reduce the likelihood of conflicts when you submit your pull request. See more detailed instructions here . Create a branch for your edits. Be clear about the problem and how someone can recreate it, or why your feature will help. Be equally clear about the steps you took to make your changes. It\u2019s best to test . Run your changes against any existing tests and create new tests when needed. Whether tests exist or not, make sure your changes don\u2019t break the existing project.","title":"Pull Request Pro Tips"},{"location":"developers/building-contributing/#open-pull-requests","text":"Once you\u2019ve opened a pull request, a discussion will start around your proposed changes. Other contributors and users may chime in, but ultimately the decision is made by the maintainer(s). You may be asked to make some changes to your pull request. If so, add more commits to your branch and push them. They\u2019ll automatically go into the existing pull request. If your pull request is merged, great! If not, no sweat; it may not be what the project maintainer had in mind, or they were already working on it. This happens, so our recommendation is to take any feedback you\u2019ve received and go forth and pull request again. Or create your own open source project.","title":"Open Pull Requests"},{"location":"developers/building-contributing/#coding-style","text":"Unless explicitly stated, we follow all coding guidelines from the Go community. While some of these standards may seem arbitrary, they somehow seem to result in a solid, consistent codebase. It is possible that the code base does not currently comply with these guidelines. We are not looking for a massive PR that fixes this since that goes against the spirit of the guidelines. All new contributions should make a best effort to clean up and make the code base better than they left it. Obviously, apply your best judgment. Remember, the goal here is to make the code base easier for humans to navigate and understand. Always keep that in mind when nudging others to comply. Use make staticrequired to ensure that your code can pass the required static analysis tests. The rules: All code should be formatted with gofmt -s . All code should pass the default levels of golint . All code should follow the guidelines covered in Effective Go and Go Code Review Comments . Comment the code. Tell us the why, the history and the context. Document all declarations and methods, even private ones. Declare expectations, caveats and anything else that may be important. If a type gets exported, having the comments already there will ensure it\u2019s ready. Variable name length should be proportional to its context and no longer. noCommaALongVariableNameLikeThisIsNotMoreClearWhenASimpleCommentWouldDo . In practice, short methods will have short variable names and globals will have longer names. No underscores in package names. If you need a compound name, step back, and re-examine why you need a compound name. If you still think you need a compound name, lose the underscore. All tests should run with go test and outside tooling should not be required. No, we don\u2019t need another unit testing framework. Assertion packages are acceptable if they provide real incremental value. Even though we call these \u201crules\u201d above, they are actually just guidelines. Since you\u2019ve read all the rules, you now know that. If you are having trouble getting into the mood of idiomatic Go, we recommend reading through Effective Go . The Go Blog is also a great resource. Drinking the kool-aid is a lot easier than going thirsty.","title":"Coding Style"},{"location":"developers/buildkite-testmachine-setup/","text":"Buildkite Test Agent Setup \u00b6 We are using Buildkite for Windows and macOS testing. The build machines and buildkite-agent must be set up before use. Windows Test Agent Setup \u00b6 Create the user \u201ctestbot\u201d on the machine. Use the password for ddevtestbot@gmail.com , available in LastPass. In admin PowerShell, wsl --install . In admin PowerShell, Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\" . In admin PowerShell, download and run windows_buildkite_start.ps1 with curl <url> -O windows_buildkite_start.ps1 . After restart, in administrative Git Bash window, Rename-Computer <testbot-win10(home|pro)-<description>-1 and then export BUILDKITE_AGENT_TOKEN=<token> . Now download and run windows_buildkite-testmachine_setup.sh . Download and run windows_postinstall.sh . Launch Docker. It may require you to take further actions. Log into Chrome with the user ddevtestbot@gmail.com and enable Chrome Remote Desktop. Enable gd, fileinfo, and curl extensions in /c/tools/php*/php.ini . If a laptop, set the \u201clid closing\u201d setting to do nothing. Set the \u201cSleep after time\u201d setting in settings to never. Install winaero tweaker and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot . Then run netplwiz, provide the password for the main user, uncheck \u201crequire a password to log in\u201d. The buildkite/hooks/environment.bat file must be updated to contain the Docker pull credentials: @echo off set DOCKERHUB_PULL_USERNAME = druddockerpullaccount set DOCKERHUB_PULL_PASSWORD = Set the buildkite-agent service to run as the testbot user and use delayed start: Choose \u201cAutomatic, delayed start\u201d and on the \u201cLog On\u201d tab in the services widget it must be set up to log in as the testbot user, so it inherits environment variables and home directory (and can access NFS, has testbot git config, etc). git config --global --add safe.directory '*' . Manually run testbot_maintenance.sh , curl -sL -O https://raw.githubusercontent.com/drud/ddev/master/.buildkite/testbot_maintenance.sh && bash testbot_maintenance.sh . Run .buildkite/sanetestbot.sh to check your work. Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.) Verify that go , ddev , git-bash are in the path. In \u201cAdvanced Windows Update Settings\u201d enable \u201cReceive updates for other Microsoft products\u201d to make sure you get WSL2 kernel upgrades. Make sure to run Windows Update to get latest kernel.. Additional Windows Setup for WSL2+Docker Desktop Testing \u00b6 Do not set up buildkite-agent on the Windows side, or disable it. Edit Ubuntu's /etc/wsl.conf to contain: [boot] systemd=true Update WSL2 to WSL2 Preview from Microsoft Store and wsl --shutdown and then restart. wsl --update Open WSL2 and check out drud/ddev . As normal user, run .github/workflows/linux-setup.sh . export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH echo \"export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH\" >>~/.bashrc As root user, add sudo capability with echo \"ALL ALL=NOPASSWD: ALL\" >/etc/sudoers.d/all && chmod 440 /etc/sudoers.d/all . Manually run testbot_maintenance.sh , curl -sL -O https://raw.githubusercontent.com/drud/ddev/master/.buildkite/testbot_maintenance.sh && bash testbot_maintenance.sh . git config --global --add safe.directory '*' Install basics in WSL2: curl https://apt.fury.io/drud/gpg.key | sudo apt-key add - echo \"deb https://apt.fury.io/drud/ * *\" | sudo tee -a /etc/apt/sources.list.d/ddev.list sudo mkdir -p /usr/sharekeyrings && curl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/32A37959C2FA5C3C99EFBC32A79206696452D198 | sudo gpg --dearmor -o /usr/share/keyrings/buildkite-agent-archive-keyring.gpg echo \"deb [signed-by=/usr/share/keyrings/buildkite-agent-archive-keyring.gpg] https://apt.buildkite.com/buildkite-agent stable main\" | sudo tee /etc/apt/sources.list.d/buildkite-agent.list sudo apt update && sudo apt install -y build-essential buildkite-agent ca-certificates curl ddev gnupg lsb-release make mariadb-client sudo snap install ngrok Configure buildkite-agent in WSL2 . It needs the same changes as macOS, but tags tags=\"os=wsl2,architecture=amd64,dockertype=dockerforwindows\" and build-path should be in ~/tmp/buildkite-agent . The buildkite/hooks/environment file must be updated to contain the Docker pull credentials: #!/bin/bash export DOCKERHUB_PULL_USERNAME = druddockerpullaccount export DOCKERHUB_PULL_PASSWORD = xxx set -e Verify that buildkite-agent is running. In Task Scheduler, create a task that runs on User Logon and runs C:\\Windows\\System32\\wsl.exe with arguments -d Ubuntu . Add buildkite-agent to the docker and testbot groups in /etc/group echo \"capath=/etc/ssl/certs/\" >>~/.curlrc And then do the same as buildkite-agent user sudo chmod -R ug+w /home/linuxbrew nc.exe -l -p 9003 on Windows to trigger and allow Windows Defender. Run ngrok config add-authtoken <token> with token for free account. Copy ngrok config into buildkite-agent account, sudo cp -r ~/.ngrok2 ~buildkite-agent/ && sudo chown -R buildkite-agent:buildkite--agent ~buildkite-agent/ngrok2 Add /home/linuxbrew/.linuxbrew/bin to PATH in /etc/environment . Copy ngrok config into buildkite-agent account, sudo cp -r ~/.ngrok2 ~buildkite-agent/ && sudo chown -R buildkite-agent:buildkite--agent ~buildkite-agent/ngrok2 Add buildkite-agent to sudo group in /etc/groups Give buildkite-agent a password with sudo passwd buildkite-agent As buildkite-agent user mkcert -install Additional Windows Setup for WSL2+Docker-Inside Testing \u00b6 Uninstall Docker Desktop. Remove all of the entries (especially host.docker.internal ) that Docker Desktop has added in C:\\Windows\\system32\\drivers\\etc\\hosts . Install docker and basics in WSL2: bash sudo mkdir -p /etc/apt/keyrings sudo mkdir -p /etc/apt/keyrings && sudo rm -f /etc/apt/keyrings/docker.gpg && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin sudo usermod -aG docker $USER Configure buildkite agent in /etc/buildkite-agent: tags=\"os=wsl2,architecture=amd64,dockertype=wsl2\" token=\"xxx\" Create /etc/buildkite-agent/hooks/environment and set to executable with contents: #!/bin/bash export DOCKERHUB_PULL_USERNAME=druddockerpullaccount export DOCKERHUB_PULL_PASSWORD=xxx set -e Run .buildkite/sanetestbot.sh macOS Test Agent Setup (Intel and Apple Silicon) \u00b6 Create the user \u201ctestbot\u201d on the machine. Use the password for ddevtestbot@gmail.com , available in LastPass. Change the name of the machine to something in keeping with current style. Maybe testbot-macstadium-macos-3 . Install Homebrew /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Install everything you\u2019ll need with brew install buildkite/buildkite/buildkite-agent bats-core colima composer drud/ddev/ddev git golang jq mariadb mkcert netcat p7zip && brew install --cask docker iterm2 google-chrome nosleep ngrok . Run ngrok config add-authtoken <token> with token for free account. Run mkcert -install . Run Docker manually and go through its configuration routine. Run iTerm. On Mojave and higher you may need to allow full disk access permissions. Set up nfsd by running macos_ddev_nfs_setup.sh . git config --global --add safe.directory '*' Edit /usr/local/etc/buildkite-agent/buildkite-agent.cfg or /opt/homebrew/etc/buildkite-agent/buildkite-agent.cfg to add the agent token tags, like \"os=macos,architecture=arm64,osvariant=monterrey,dockertype=dockerformac\" build-path=\"~/tmp/buildkite-agent/builds\" The buildkite/hooks/environment file must be updated to contain the Docker pull credentials: #!/bin/bash export DOCKERHUB_PULL_USERNAME = druddockerpullaccount export DOCKERHUB_PULL_PASSWORD = xxx set -e Run brew services start buildkite-agent . Manually run testbot_maintenance.sh , curl -sL -O https://raw.githubusercontent.com/drud/ddev/master/.buildkite/testbot_maintenance.sh && bash testbot_maintenance.sh . Enable nosleep using its shortcut in the Mac status bar. In nosleep Preferences, enable \u201cNever sleep on AC Adapter\u201d, \u201cNever sleep on Battery\u201d, and \u201cStart nosleep utility on system startup\u201d. sudo chown testbot /usr/local/bin Set up Mac to automatically log in on boot . Try checking out drud/ddev and running .buildkite/sanetestbot.sh to check your work. Log into Chrome with the user ddevtestbot@gmail.com and enable Chrome Remote Desktop. Set the timezone (US MT). Start the agent with brew services start buildkite-agent .","title":"Buildkite Test Agent Setup"},{"location":"developers/buildkite-testmachine-setup/#buildkite-test-agent-setup","text":"We are using Buildkite for Windows and macOS testing. The build machines and buildkite-agent must be set up before use.","title":"Buildkite Test Agent Setup"},{"location":"developers/buildkite-testmachine-setup/#windows-test-agent-setup","text":"Create the user \u201ctestbot\u201d on the machine. Use the password for ddevtestbot@gmail.com , available in LastPass. In admin PowerShell, wsl --install . In admin PowerShell, Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\" . In admin PowerShell, download and run windows_buildkite_start.ps1 with curl <url> -O windows_buildkite_start.ps1 . After restart, in administrative Git Bash window, Rename-Computer <testbot-win10(home|pro)-<description>-1 and then export BUILDKITE_AGENT_TOKEN=<token> . Now download and run windows_buildkite-testmachine_setup.sh . Download and run windows_postinstall.sh . Launch Docker. It may require you to take further actions. Log into Chrome with the user ddevtestbot@gmail.com and enable Chrome Remote Desktop. Enable gd, fileinfo, and curl extensions in /c/tools/php*/php.ini . If a laptop, set the \u201clid closing\u201d setting to do nothing. Set the \u201cSleep after time\u201d setting in settings to never. Install winaero tweaker and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot . Then run netplwiz, provide the password for the main user, uncheck \u201crequire a password to log in\u201d. The buildkite/hooks/environment.bat file must be updated to contain the Docker pull credentials: @echo off set DOCKERHUB_PULL_USERNAME = druddockerpullaccount set DOCKERHUB_PULL_PASSWORD = Set the buildkite-agent service to run as the testbot user and use delayed start: Choose \u201cAutomatic, delayed start\u201d and on the \u201cLog On\u201d tab in the services widget it must be set up to log in as the testbot user, so it inherits environment variables and home directory (and can access NFS, has testbot git config, etc). git config --global --add safe.directory '*' . Manually run testbot_maintenance.sh , curl -sL -O https://raw.githubusercontent.com/drud/ddev/master/.buildkite/testbot_maintenance.sh && bash testbot_maintenance.sh . Run .buildkite/sanetestbot.sh to check your work. Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.) Verify that go , ddev , git-bash are in the path. In \u201cAdvanced Windows Update Settings\u201d enable \u201cReceive updates for other Microsoft products\u201d to make sure you get WSL2 kernel upgrades. Make sure to run Windows Update to get latest kernel..","title":"Windows Test Agent Setup"},{"location":"developers/buildkite-testmachine-setup/#additional-windows-setup-for-wsl2docker-desktop-testing","text":"Do not set up buildkite-agent on the Windows side, or disable it. Edit Ubuntu's /etc/wsl.conf to contain: [boot] systemd=true Update WSL2 to WSL2 Preview from Microsoft Store and wsl --shutdown and then restart. wsl --update Open WSL2 and check out drud/ddev . As normal user, run .github/workflows/linux-setup.sh . export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH echo \"export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH\" >>~/.bashrc As root user, add sudo capability with echo \"ALL ALL=NOPASSWD: ALL\" >/etc/sudoers.d/all && chmod 440 /etc/sudoers.d/all . Manually run testbot_maintenance.sh , curl -sL -O https://raw.githubusercontent.com/drud/ddev/master/.buildkite/testbot_maintenance.sh && bash testbot_maintenance.sh . git config --global --add safe.directory '*' Install basics in WSL2: curl https://apt.fury.io/drud/gpg.key | sudo apt-key add - echo \"deb https://apt.fury.io/drud/ * *\" | sudo tee -a /etc/apt/sources.list.d/ddev.list sudo mkdir -p /usr/sharekeyrings && curl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/32A37959C2FA5C3C99EFBC32A79206696452D198 | sudo gpg --dearmor -o /usr/share/keyrings/buildkite-agent-archive-keyring.gpg echo \"deb [signed-by=/usr/share/keyrings/buildkite-agent-archive-keyring.gpg] https://apt.buildkite.com/buildkite-agent stable main\" | sudo tee /etc/apt/sources.list.d/buildkite-agent.list sudo apt update && sudo apt install -y build-essential buildkite-agent ca-certificates curl ddev gnupg lsb-release make mariadb-client sudo snap install ngrok Configure buildkite-agent in WSL2 . It needs the same changes as macOS, but tags tags=\"os=wsl2,architecture=amd64,dockertype=dockerforwindows\" and build-path should be in ~/tmp/buildkite-agent . The buildkite/hooks/environment file must be updated to contain the Docker pull credentials: #!/bin/bash export DOCKERHUB_PULL_USERNAME = druddockerpullaccount export DOCKERHUB_PULL_PASSWORD = xxx set -e Verify that buildkite-agent is running. In Task Scheduler, create a task that runs on User Logon and runs C:\\Windows\\System32\\wsl.exe with arguments -d Ubuntu . Add buildkite-agent to the docker and testbot groups in /etc/group echo \"capath=/etc/ssl/certs/\" >>~/.curlrc And then do the same as buildkite-agent user sudo chmod -R ug+w /home/linuxbrew nc.exe -l -p 9003 on Windows to trigger and allow Windows Defender. Run ngrok config add-authtoken <token> with token for free account. Copy ngrok config into buildkite-agent account, sudo cp -r ~/.ngrok2 ~buildkite-agent/ && sudo chown -R buildkite-agent:buildkite--agent ~buildkite-agent/ngrok2 Add /home/linuxbrew/.linuxbrew/bin to PATH in /etc/environment . Copy ngrok config into buildkite-agent account, sudo cp -r ~/.ngrok2 ~buildkite-agent/ && sudo chown -R buildkite-agent:buildkite--agent ~buildkite-agent/ngrok2 Add buildkite-agent to sudo group in /etc/groups Give buildkite-agent a password with sudo passwd buildkite-agent As buildkite-agent user mkcert -install","title":"Additional Windows Setup for WSL2+Docker Desktop Testing"},{"location":"developers/buildkite-testmachine-setup/#additional-windows-setup-for-wsl2docker-inside-testing","text":"Uninstall Docker Desktop. Remove all of the entries (especially host.docker.internal ) that Docker Desktop has added in C:\\Windows\\system32\\drivers\\etc\\hosts . Install docker and basics in WSL2: bash sudo mkdir -p /etc/apt/keyrings sudo mkdir -p /etc/apt/keyrings && sudo rm -f /etc/apt/keyrings/docker.gpg && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin sudo usermod -aG docker $USER Configure buildkite agent in /etc/buildkite-agent: tags=\"os=wsl2,architecture=amd64,dockertype=wsl2\" token=\"xxx\" Create /etc/buildkite-agent/hooks/environment and set to executable with contents: #!/bin/bash export DOCKERHUB_PULL_USERNAME=druddockerpullaccount export DOCKERHUB_PULL_PASSWORD=xxx set -e Run .buildkite/sanetestbot.sh","title":"Additional Windows Setup for WSL2+Docker-Inside Testing"},{"location":"developers/buildkite-testmachine-setup/#macos-test-agent-setup-intel-and-apple-silicon","text":"Create the user \u201ctestbot\u201d on the machine. Use the password for ddevtestbot@gmail.com , available in LastPass. Change the name of the machine to something in keeping with current style. Maybe testbot-macstadium-macos-3 . Install Homebrew /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Install everything you\u2019ll need with brew install buildkite/buildkite/buildkite-agent bats-core colima composer drud/ddev/ddev git golang jq mariadb mkcert netcat p7zip && brew install --cask docker iterm2 google-chrome nosleep ngrok . Run ngrok config add-authtoken <token> with token for free account. Run mkcert -install . Run Docker manually and go through its configuration routine. Run iTerm. On Mojave and higher you may need to allow full disk access permissions. Set up nfsd by running macos_ddev_nfs_setup.sh . git config --global --add safe.directory '*' Edit /usr/local/etc/buildkite-agent/buildkite-agent.cfg or /opt/homebrew/etc/buildkite-agent/buildkite-agent.cfg to add the agent token tags, like \"os=macos,architecture=arm64,osvariant=monterrey,dockertype=dockerformac\" build-path=\"~/tmp/buildkite-agent/builds\" The buildkite/hooks/environment file must be updated to contain the Docker pull credentials: #!/bin/bash export DOCKERHUB_PULL_USERNAME = druddockerpullaccount export DOCKERHUB_PULL_PASSWORD = xxx set -e Run brew services start buildkite-agent . Manually run testbot_maintenance.sh , curl -sL -O https://raw.githubusercontent.com/drud/ddev/master/.buildkite/testbot_maintenance.sh && bash testbot_maintenance.sh . Enable nosleep using its shortcut in the Mac status bar. In nosleep Preferences, enable \u201cNever sleep on AC Adapter\u201d, \u201cNever sleep on Battery\u201d, and \u201cStart nosleep utility on system startup\u201d. sudo chown testbot /usr/local/bin Set up Mac to automatically log in on boot . Try checking out drud/ddev and running .buildkite/sanetestbot.sh to check your work. Log into Chrome with the user ddevtestbot@gmail.com and enable Chrome Remote Desktop. Set the timezone (US MT). Start the agent with brew services start buildkite-agent .","title":"macOS Test Agent Setup (Intel and Apple Silicon)"},{"location":"developers/github-selfhosted-setup/","text":"GitHub Self-Hosted Agent Setup \u00b6 We are using GitHub Self-Hosted Agents for Windows and macOS testing. The build machines and agents must be set up before use. Windows Agent Setup \u00b6 Create the user \u201ctestbot\u201d on the machine. Use the password for testbot@drud.com , available in 1Password. In admin PowerShell, Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\" . In admin Powershell, download and run windows_buildkite_start.ps1 with curl <url> -O windows_buildkite_start.ps1 . After restart, in administrative Git Bash window, Rename-Computer <testbot-win10(home|pro)-<description>-1 . Now download and run windows_github_agent_setup.sh . Launch Docker. It may require you to take further actions. Log into Chrome with the user testbot@drud.com and enable Chrome Remote Desktop. Enable gd , fileinfo , and curl extensions in /c/tools/php*/php.ini . If a laptop, set the \u201clid closing\u201d setting in settings to do nothing. Set the \u201cSleep after time\u201d setting in settings to never. Install winaero tweaker and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot . Then run netplwiz , provide the password for the main user, uncheck the \u201crequire a password to log in\u201d. Add the path C:\\Program Files\\git\\bin to the very front of the system environment variables. Otherwise Windows will try to use its own bash.exe or PowerShell. Install the GitHub self-hosted runner software using the \u201cAdd New\u201d instructions on https://github.com/organizations/drud/settings/actions . When it asks if you want it as a service: yes, you do. Run .buildkite/sanetestbot.sh to check your work. Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.)","title":"GitHub Self-Hosted Agent Setup"},{"location":"developers/github-selfhosted-setup/#github-self-hosted-agent-setup","text":"We are using GitHub Self-Hosted Agents for Windows and macOS testing. The build machines and agents must be set up before use.","title":"GitHub Self-Hosted Agent Setup"},{"location":"developers/github-selfhosted-setup/#windows-agent-setup","text":"Create the user \u201ctestbot\u201d on the machine. Use the password for testbot@drud.com , available in 1Password. In admin PowerShell, Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\" . In admin Powershell, download and run windows_buildkite_start.ps1 with curl <url> -O windows_buildkite_start.ps1 . After restart, in administrative Git Bash window, Rename-Computer <testbot-win10(home|pro)-<description>-1 . Now download and run windows_github_agent_setup.sh . Launch Docker. It may require you to take further actions. Log into Chrome with the user testbot@drud.com and enable Chrome Remote Desktop. Enable gd , fileinfo , and curl extensions in /c/tools/php*/php.ini . If a laptop, set the \u201clid closing\u201d setting in settings to do nothing. Set the \u201cSleep after time\u201d setting in settings to never. Install winaero tweaker and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot . Then run netplwiz , provide the password for the main user, uncheck the \u201crequire a password to log in\u201d. Add the path C:\\Program Files\\git\\bin to the very front of the system environment variables. Otherwise Windows will try to use its own bash.exe or PowerShell. Install the GitHub self-hosted runner software using the \u201cAdd New\u201d instructions on https://github.com/organizations/drud/settings/actions . When it asks if you want it as a service: yes, you do. Run .buildkite/sanetestbot.sh to check your work. Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.)","title":"Windows Agent Setup"},{"location":"developers/project-types/","text":"Adding New Project Types \u00b6 Adding and maintaining project types (like typo3 , magento2 , etc.) is not too hard. Please update and add to this doc when you find things that have been missed. To add a new project type: Add the new type to the list in nodeps.go Add to appTypeMatrix in apptypes.go Create a new go file for your project type, like django.go . Implement the functions that you think are needed for your project type and add references to them in your appTypeMatrix stanza. There are lots of examples that you can start with in places like drupal.go and typo3.go , shopware6.go , etc. The comments in the code in apptypes.go for the appTypeFuncs for each type of action tell what these are for, but here's a quick summary. settingsCreator is the function that will create a main settings file if none exists. uploadDir returns the filepath of the user-uploaded files directory for the project type, like sites/default/files for Drupal or pub/media for magento2. hookDefaultComments adds comments to config.yaml about hooks with an example for that project type. It's probably not useful at all. apptypeSettingsPaths returns the paths for the main settings file and the extra settings file that DDEV may create (like settings.ddev.php for Drupal). appTypeDetect is a function that determines whether the project is of the type you\u2019re implementing. postImportDBAction can do something after db import. I don\u2019t see it implemented anywhere. configOverrideAction can change default config for your project type. For example, magento2 now requires php8.1 , so a configOverrideAction can change the php version. postConfigAction gives a chance to do something at the end of config, but it doesn\u2019t seem to be used anywhere. postStartAction adds actions at the end of ddev start . You'll see several implementations of this, for things like creating needed default directories, or setting permissions on files, etc. importFilesAction defines how ddev import-files works for this project type. defaultWorkingDirMap allows the project type to override the project\u2019s working_dir (where ddev ssh and ddev exec start by default). This is mostly not done any more, as the working_dir is typically the project root. You\u2019ll likely need templates for settings files, use the Drupal or TYPO3 templates as examples, for example pkg/ddevapp/drupal and pkg/ddevapp/typo3 . Those templates have to be loaded at runtime as well. Once your project type starts working and behaving as you\u2019d like, you\u2019ll need to add test artifacts for it and try testing it (locally first). Add your project to TestSites in ddevapp_test.go . Create a DDEV project named testpkg<projectype> somewhere and get it going and working with a database and files you can export. Export the database, files, and (optionally) code to tarballs or .sql.gz . Put them somewhere on the internet\u2014they\u2019ll end up in drud/ddev_test_tarballs . I can give you permissions on that if you like. The magento2 project has descriptions explaining how each tarball gets created. Do that for yours as well. Run the test and get it working. I usually use the trick of setting GOTEST_SHORT=<element_in_TestSites> , like GOTEST_SHORT=7 . Then set that environment variable in the GoLand profile or your environment. export GOTEST_SHORT=7 && make testpkg TEST_ARGS=\"-run TestDdevFullsiteSetup\"","title":"Adding New Project Types"},{"location":"developers/project-types/#adding-new-project-types","text":"Adding and maintaining project types (like typo3 , magento2 , etc.) is not too hard. Please update and add to this doc when you find things that have been missed. To add a new project type: Add the new type to the list in nodeps.go Add to appTypeMatrix in apptypes.go Create a new go file for your project type, like django.go . Implement the functions that you think are needed for your project type and add references to them in your appTypeMatrix stanza. There are lots of examples that you can start with in places like drupal.go and typo3.go , shopware6.go , etc. The comments in the code in apptypes.go for the appTypeFuncs for each type of action tell what these are for, but here's a quick summary. settingsCreator is the function that will create a main settings file if none exists. uploadDir returns the filepath of the user-uploaded files directory for the project type, like sites/default/files for Drupal or pub/media for magento2. hookDefaultComments adds comments to config.yaml about hooks with an example for that project type. It's probably not useful at all. apptypeSettingsPaths returns the paths for the main settings file and the extra settings file that DDEV may create (like settings.ddev.php for Drupal). appTypeDetect is a function that determines whether the project is of the type you\u2019re implementing. postImportDBAction can do something after db import. I don\u2019t see it implemented anywhere. configOverrideAction can change default config for your project type. For example, magento2 now requires php8.1 , so a configOverrideAction can change the php version. postConfigAction gives a chance to do something at the end of config, but it doesn\u2019t seem to be used anywhere. postStartAction adds actions at the end of ddev start . You'll see several implementations of this, for things like creating needed default directories, or setting permissions on files, etc. importFilesAction defines how ddev import-files works for this project type. defaultWorkingDirMap allows the project type to override the project\u2019s working_dir (where ddev ssh and ddev exec start by default). This is mostly not done any more, as the working_dir is typically the project root. You\u2019ll likely need templates for settings files, use the Drupal or TYPO3 templates as examples, for example pkg/ddevapp/drupal and pkg/ddevapp/typo3 . Those templates have to be loaded at runtime as well. Once your project type starts working and behaving as you\u2019d like, you\u2019ll need to add test artifacts for it and try testing it (locally first). Add your project to TestSites in ddevapp_test.go . Create a DDEV project named testpkg<projectype> somewhere and get it going and working with a database and files you can export. Export the database, files, and (optionally) code to tarballs or .sql.gz . Put them somewhere on the internet\u2014they\u2019ll end up in drud/ddev_test_tarballs . I can give you permissions on that if you like. The magento2 project has descriptions explaining how each tarball gets created. Do that for yours as well. Run the test and get it working. I usually use the trick of setting GOTEST_SHORT=<element_in_TestSites> , like GOTEST_SHORT=7 . Then set that environment variable in the GoLand profile or your environment. export GOTEST_SHORT=7 && make testpkg TEST_ARGS=\"-run TestDdevFullsiteSetup\"","title":"Adding New Project Types"},{"location":"developers/release-management/","text":"Release Management & Docker Images \u00b6 Release process and tools \u00b6 Goreleaser Pro is used to do the actual releasing using .goreleaser.yml . Goreleaser Pro is a licensed product that requires a license key, which is in the GitHub Workflow configuration and is available in LastPass to DDEV maintainers who need it. The Master Build/Release Github Action does the actual running of the goreleaser actions and provides the needed secrets. GitHub Actions Required Secrets \u00b6 How to add new people to these accounts \u00b6 AUR is Arch Linux User Repository. ddev-bin is at https://aur.archlinux.org/packages/ddev-bin . The current maintainer of this is @cweagans , who can add co-maintainers. The chocolatey package. Additional maintainers can be added at link ; they could then create tokens to push it. GitHub requires write access to this repository, either via permissions on the repository or on the org. Apple signing and notarization requires two acces to the Localdev Foundation group on https://developer.apple.com . It's easy enough to add additional people. Windows signging is an awkward process that requires a dongle. When the current signing certificate expires we definitely want the simpler approach. Discord Docker Actual secrets required \u00b6 The following \u201cRepository secret\u201d environment variables must be added to https://github.com/drud/ddev/settings/secrets/actions : AUR_SSH_PRIVATE_KEY : Private ssh key for the ddev-releaser user. This must be processed into a single line, for example, perl -p -e 's/\\n/<SPLIT>/' ~/.ssh/id_rsa_ddev_releaser| pbcopy . CHOCOLATEY_API_KEY : API key for Chocolatey. DDEV_GITHUB_TOKEN : GitHub token that gives access to create releases and push to the Homebrew repositories. DDEV_MACOS_APP_PASSWORD : Password used for notarization, see signing_tools . DDEV_MACOS_SIGNING_PASSWORD : Password for the macOS signing key, see signing_tools . DDEV_WINDOWS_SIGNING_PASSWORD : Windows signing password. SegmentKey : Key that enables Segment reporting. FURY_ACCOUNT : Gemfury account that receives package pushes. FURY_TOKEN : Push token assigned to the above Gemfury account. AUR_STABLE_GIT_URL : The Git URL for AUR stable (normally ddev-bin ), for example ssh://aur@aur.archlinux.org/ddev-bin.git . AUR_EDGE_GIT_URL : The Git URL for AUR edge (normally ddev-edge-bin ), for example ssh://aur@aur.archlinux.org/ddev-edge-bin.git . Creating a Release \u00b6 This is completely automated now, so nothing needs to be done unless something goes wrong. Prerelease Tasks \u00b6 Make sure version-history.md is up to date. Make sure the Docker images are all tagged and pushed. Make sure pkg/version/version.go is all set to point to the new images and tests have been run. Actual Release Creation \u00b6 Create a release for the new version using the GitHub UI. It should be \u201cprerelease\u201d if it\u2019s an edge release. Use the \u201cAuto-generate release notes\u201d option to get the commit list, then edit to add all the other necessary info. Verify that Homebrew (Linux and macOS) and Chocolatey and AUR are working correctly with the right versions. Pushing Docker Images with the GitHub Actions Workflow \u00b6 The easiest way to push Docker images is to use the GitHub Actions workflow, especially if the code for the image is already in the drud/ddev repository. Prerelease tasks \u00b6 Push the new version of drud/ddev-php-base Update drud/ddev-webserver to use the new version of drud/ddev-php-base and push it with the proper tag Make sure the version-history.md file is up to date. Make sure the docker images for the new tag are all tagged and pushed. Make sure the pkg/version/version.go is all set to point to the new images (and tests have been run) Make sure you're about to create the right release tag. Actual release creation \u00b6 Create a release for the new version using the GitHub UI. It should be \"prerelease\" if it's an edge release. Use the right tag! Use the \"Auto-generate release notes\" option to get the commit list, then edit to add all the other necessary info. Verify that homebrew (linux and macOS) and Chocolatey and AUR are working correctly with the right versions Pushing docker images with the GitHub Actions workflow \u00b6 The easiest way to push docker images is to use the GitHub Actions workflow, especially if the code for the image is already in the ddev repo. You can push an image at https://github.com/drud/ddev/actions/workflows/push-tagged-image.yml If you need to push from a forked PR, you\u2019ll have to do this from your fork (for example, https://github.com/drud/rfay/actions/workflows/push-tagged-image.yml ), and you\u2019ll have to specify the branch on the fork. This requires setting the DOCKERHUB_TOKEN and DOCKERHUB_USERNAME secrets on the forked PR, for example https://github.com/rfay/ddev/settings/secrets/actions . Visit https://github.com/drud/ddev/actions/workflows/push-tagged-image.yml . Click the \u201cPush tagged image\u201d workflow on the left side of the page. Click the \u201cRun workflow\u201d button in the blue section above the workflow runs. Choose the branch to build from (usually master ). Enter the image ( ddev-webserver , ddev-dbserver , ddev-php-base , etc.). Enter the tag that will be used in pkg/version/version.go . Pushing Docker Images Manually \u00b6 While it\u2019s more error-prone, images can be pushed from the command line: docker login with a user that has push privileges. docker buildx create --name ddev-builder-multi --use or if it already exists, docker buildx use ddev-builder-multi . cd containers/<image> . Before pushing ddev-webserver , make sure you\u2019ve pushed a version of ddev-php-base and updated ddev-webserver \u2019s Dockerfile to use that as a base. make push VERSION=<release_version> DOCKER_ARGS=--no-cache for most of the images. For ddev-dbserver it\u2019s make PUSH=true VERSION=<release_version> DOCKER_ARGS=--no-cache . There\u2019s a push-all.sh script to update all of them, but it takes forever. Maintaining ddev-dbserver MySQL 5.7 & 8.0 ARM64 Images \u00b6 Sadly, there are no ARM64 Docker images for MySQL 5.7 and 8.0, so we have our own process to maintain drud/mysql-arm64-images and drud/xtrabackup-build images for DDEV. drud/mysql:5.7 uses Ubuntu 18.04 as the base image, and Ubuntu 18.04 ARM64 has mysql-server 5.7 in it, so we can install. drud/mysql:8.0 uses Ubuntu 20.04 as the base image, and Ubuntu 20.04 ARM64 has mysql-server 8.0 in it, so we can install it from packages. Unfortunately, the ddev snapshot command depends on xtrabackup 8.0 being installed for mysql:8.0 . There are no ARM64 packages or binaries provided by Percona for xtrabackup , so we build it from source with drud/xtrabackup-build . There\u2019s a catch, however: xtrabackup \u2019s development cycle lags behind mysql:8.0 \u2019s development cycle, so you can\u2019t build a usable drud/mysql:8.0 image until there\u2019s an xtrabackup version released. Further, when Ubuntu bumps mysql-server-8.0 to a new version, there\u2019s no way to use the old one. So the only time that you can maintain drud/mysql:8.0 is when Ubuntu 20.04 has the same version that\u2019s released for percona-xtrabackup . (In the case at this writeup, I was finally able to build percona-xtrabackup 8.0.28, and the same day Ubuntu bumped its packages to 8.0.29, meaning that it was unusable.) To build percona-xtrabackup, follow the instructions on drud/xtrabackup-build . You just create a release with the release of Percona xtrabackup, for example 8.0.29-21 . When that succeeds, then there is an upstream xtrabackup to be used in the drud/mysql:8.0 build. To build drud/mysql (both 5.7 and 8.0) ARM64 images, follow the instructions on drud/mysql-arm64-images . After the various files are updated, you can push a new release and the proper images will be pushed. After building a new set of drud/mysql images, you\u2019ll need to push drud/ddev-dbserver with new tags. Make sure to update the drud/ ddev-dbserver Makefile to set the explicit version of the upstream mysql:8.0 (for example, 8.0.29, if you\u2019ve succeed in getting 8.0.29 for percona-xtrabackup and mysql:8.0 ). Actual Release Docker Image Updates \u00b6 We don\u2019t actually build every image for every point release. If there have been no changes to ddev-router or ddev-ssh-agent , for example, we only usually push those and update pkg/version/version.go on major releases. But here are the steps for building: The drud/ddev-php-base image must be updated as necessary with a new tag before pushing ddev-webserver . You can do this using the process above . The drud/ddev-webserver Dockerfile must FROM drud/ddev-php-base:<tag> before building/pushing ddev-webserver . But then it can be pushed using either the GitHub Actions or the manual technique. If you\u2019re bumping ddev-dbserver 8.0 minor release, follow the upstream Maintaining ddev-dbserver MySQL 5.7 & 8.0 ARM64 Images instructions. Update pkg/version/version.go with the correct versions for the new images, and run all the tests. Manually Updating Homebrew Formulas \u00b6 Homebrew formulas normally update with the release process, so nothing needs to be done. If you have to temporarily update the Homebrew formulas, you can do that with a commit to https://github.com/drud/homebrew-ddev and https://github.com/drud/homebrew-ddev-edge . The bottles and checksums for macOS (High Sierra) and x86_64_linux are built and pushed to the release page automatically by the release build process (see bump_homebrew.sh . Test brew upgrade ddev both on macOS and Linux and make sure DDEV is the right version and behaves well. Manually Updating Chocolatey \u00b6 Normally the release process does okay with pushing to Chocolatey, but at times a failure can happen and it\u2019s not worth doing the whole release process again. Note that if an existing approved release is being updated you have to have a new version. So for example, if v1.21.3 failed, you'll need to work with v1.21.3.1 , so make chocolatey VERSION=v1.21.3.1 below. Open up Gitpod, https://gitpod.io/#https://github.com/drud/ddev and cd /workspace/ddev git checkout <tag> sudo apt-get update && sudo apt-get install -y nsis sudo .ci-scripts/nsis_setup.sh /usr/share/nsis Edit the checksum in tools/chocolateyinstall.ps1 to match the released checksum of the ddev-windows-installer in checksums.txt of the release that is being repaired, for example, for v1.21.3 this would be the checksum for ddev_windows_installer.v1.21.3.exe in v1.21.3 checksums.txt . Edit url64 in tools/chocolateyinstall.ps1 to be the intended actual DDEV download version - edit the version where it appeasrs and edit the github org. For example, if the actual version of DDEV to be downloaded is v1.21.3 then put that there. make chocolatey VERSION = <tag> export CHOCOLATEY_API_KEY = key33333 cd .gotmp/bin/windows_amd64/chocolatey docker run --rm -v $PWD :/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco push -s https://push.chocolatey.org/ --api-key \" ${ CHOCOLATEY_API_KEY } \" Manually Updating AUR Repository \u00b6 The AUR repository normally updates with the release process, so nothing needs to be done. However, you can manually publish the release to the DDEV AUR repository . The README.md in the AUR git repo ( ssh://aur@aur.archlinux.org/ddev-bin.git or https://aur.archlinux.org/ddev-bin.git ) has instructions on how to update, including how to do it with a Docker container, so it doesn\u2019t have to be done on an ArchLinux or Manjaro VM. Manually Signing the Windows Installer \u00b6 This is done by the release process, but the manual process is documented here. This is done automatically by the release build on a dedicated Windows test runner (GitHub Actions runner) named testbot-asus-win10pro . You would need to do this process manually on that build machine or install the fob on another machine. After rebooting this machine, sometimes an automated reboot, the password for the security fob has to be re-entered or Windows signing will fail. We do this by opening up tb-win11-06 using Chrome Remote Desktop (or manually physically opening it), opening Git Bash, and cd ~/tmp && signtool sign gsudo.exe . There happens to be a gsudo.exe there but it doesn\u2019t matter what you sign\u2014the idea is to pop up the GUI where you enter the password (which is in LastPass). Basic Instructions \u00b6 Install the suggested Windows SDK . Only the signing component is required. Add the path of the kit binaries to the Windows system PATH, C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/ . The keyfob and Safenet Authentication Client must be installed. The best documentation for the Safenet software is at https://support.globalsign.com/ssl/ssl-certificates-installation/safenet-drivers . You must configure the advanced client settings to \u201cEnable single logon\u201d or it will require the password on each run. After make windows_install the ddev-windows-installer.exe will be in .ddev/bin/windows_amd64/ddev_windows_installer.exe and you can sign it with signtool sign ddev-windows-installer.exe . If you need to install the GitHub self-hosted Windows runner, do it with the instructions in project settings \u2192 Actions \u2192 Runners. Currently the actions/cache runner does not work out of the box on Windows, so you have to install tar and zstd as described in this issue . We shouldn\u2019t use this high-security keyfob approach to signing on the next go-around with the certs. It\u2019s way too difficult to manage, and the Safenet software is atrocious.","title":"Release Management & Docker Images"},{"location":"developers/release-management/#release-management-docker-images","text":"","title":"Release Management &amp; Docker Images"},{"location":"developers/release-management/#release-process-and-tools","text":"Goreleaser Pro is used to do the actual releasing using .goreleaser.yml . Goreleaser Pro is a licensed product that requires a license key, which is in the GitHub Workflow configuration and is available in LastPass to DDEV maintainers who need it. The Master Build/Release Github Action does the actual running of the goreleaser actions and provides the needed secrets.","title":"Release process and tools"},{"location":"developers/release-management/#github-actions-required-secrets","text":"","title":"GitHub Actions Required Secrets"},{"location":"developers/release-management/#creating-a-release","text":"This is completely automated now, so nothing needs to be done unless something goes wrong.","title":"Creating a Release"},{"location":"developers/release-management/#pushing-docker-images-with-the-github-actions-workflow","text":"The easiest way to push Docker images is to use the GitHub Actions workflow, especially if the code for the image is already in the drud/ddev repository.","title":"Pushing Docker Images with the GitHub Actions Workflow"},{"location":"developers/release-management/#pushing-docker-images-with-the-github-actions-workflow_1","text":"The easiest way to push docker images is to use the GitHub Actions workflow, especially if the code for the image is already in the ddev repo. You can push an image at https://github.com/drud/ddev/actions/workflows/push-tagged-image.yml If you need to push from a forked PR, you\u2019ll have to do this from your fork (for example, https://github.com/drud/rfay/actions/workflows/push-tagged-image.yml ), and you\u2019ll have to specify the branch on the fork. This requires setting the DOCKERHUB_TOKEN and DOCKERHUB_USERNAME secrets on the forked PR, for example https://github.com/rfay/ddev/settings/secrets/actions . Visit https://github.com/drud/ddev/actions/workflows/push-tagged-image.yml . Click the \u201cPush tagged image\u201d workflow on the left side of the page. Click the \u201cRun workflow\u201d button in the blue section above the workflow runs. Choose the branch to build from (usually master ). Enter the image ( ddev-webserver , ddev-dbserver , ddev-php-base , etc.). Enter the tag that will be used in pkg/version/version.go .","title":"Pushing docker images with the GitHub Actions workflow"},{"location":"developers/release-management/#pushing-docker-images-manually","text":"While it\u2019s more error-prone, images can be pushed from the command line: docker login with a user that has push privileges. docker buildx create --name ddev-builder-multi --use or if it already exists, docker buildx use ddev-builder-multi . cd containers/<image> . Before pushing ddev-webserver , make sure you\u2019ve pushed a version of ddev-php-base and updated ddev-webserver \u2019s Dockerfile to use that as a base. make push VERSION=<release_version> DOCKER_ARGS=--no-cache for most of the images. For ddev-dbserver it\u2019s make PUSH=true VERSION=<release_version> DOCKER_ARGS=--no-cache . There\u2019s a push-all.sh script to update all of them, but it takes forever.","title":"Pushing Docker Images Manually"},{"location":"developers/release-management/#maintaining-ddev-dbserver-mysql-57-80-arm64-images","text":"Sadly, there are no ARM64 Docker images for MySQL 5.7 and 8.0, so we have our own process to maintain drud/mysql-arm64-images and drud/xtrabackup-build images for DDEV. drud/mysql:5.7 uses Ubuntu 18.04 as the base image, and Ubuntu 18.04 ARM64 has mysql-server 5.7 in it, so we can install. drud/mysql:8.0 uses Ubuntu 20.04 as the base image, and Ubuntu 20.04 ARM64 has mysql-server 8.0 in it, so we can install it from packages. Unfortunately, the ddev snapshot command depends on xtrabackup 8.0 being installed for mysql:8.0 . There are no ARM64 packages or binaries provided by Percona for xtrabackup , so we build it from source with drud/xtrabackup-build . There\u2019s a catch, however: xtrabackup \u2019s development cycle lags behind mysql:8.0 \u2019s development cycle, so you can\u2019t build a usable drud/mysql:8.0 image until there\u2019s an xtrabackup version released. Further, when Ubuntu bumps mysql-server-8.0 to a new version, there\u2019s no way to use the old one. So the only time that you can maintain drud/mysql:8.0 is when Ubuntu 20.04 has the same version that\u2019s released for percona-xtrabackup . (In the case at this writeup, I was finally able to build percona-xtrabackup 8.0.28, and the same day Ubuntu bumped its packages to 8.0.29, meaning that it was unusable.) To build percona-xtrabackup, follow the instructions on drud/xtrabackup-build . You just create a release with the release of Percona xtrabackup, for example 8.0.29-21 . When that succeeds, then there is an upstream xtrabackup to be used in the drud/mysql:8.0 build. To build drud/mysql (both 5.7 and 8.0) ARM64 images, follow the instructions on drud/mysql-arm64-images . After the various files are updated, you can push a new release and the proper images will be pushed. After building a new set of drud/mysql images, you\u2019ll need to push drud/ddev-dbserver with new tags. Make sure to update the drud/ ddev-dbserver Makefile to set the explicit version of the upstream mysql:8.0 (for example, 8.0.29, if you\u2019ve succeed in getting 8.0.29 for percona-xtrabackup and mysql:8.0 ).","title":"Maintaining ddev-dbserver MySQL 5.7 &amp; 8.0 ARM64 Images"},{"location":"developers/release-management/#actual-release-docker-image-updates","text":"We don\u2019t actually build every image for every point release. If there have been no changes to ddev-router or ddev-ssh-agent , for example, we only usually push those and update pkg/version/version.go on major releases. But here are the steps for building: The drud/ddev-php-base image must be updated as necessary with a new tag before pushing ddev-webserver . You can do this using the process above . The drud/ddev-webserver Dockerfile must FROM drud/ddev-php-base:<tag> before building/pushing ddev-webserver . But then it can be pushed using either the GitHub Actions or the manual technique. If you\u2019re bumping ddev-dbserver 8.0 minor release, follow the upstream Maintaining ddev-dbserver MySQL 5.7 & 8.0 ARM64 Images instructions. Update pkg/version/version.go with the correct versions for the new images, and run all the tests.","title":"Actual Release Docker Image Updates"},{"location":"developers/release-management/#manually-updating-homebrew-formulas","text":"Homebrew formulas normally update with the release process, so nothing needs to be done. If you have to temporarily update the Homebrew formulas, you can do that with a commit to https://github.com/drud/homebrew-ddev and https://github.com/drud/homebrew-ddev-edge . The bottles and checksums for macOS (High Sierra) and x86_64_linux are built and pushed to the release page automatically by the release build process (see bump_homebrew.sh . Test brew upgrade ddev both on macOS and Linux and make sure DDEV is the right version and behaves well.","title":"Manually Updating Homebrew Formulas"},{"location":"developers/release-management/#manually-updating-chocolatey","text":"Normally the release process does okay with pushing to Chocolatey, but at times a failure can happen and it\u2019s not worth doing the whole release process again. Note that if an existing approved release is being updated you have to have a new version. So for example, if v1.21.3 failed, you'll need to work with v1.21.3.1 , so make chocolatey VERSION=v1.21.3.1 below. Open up Gitpod, https://gitpod.io/#https://github.com/drud/ddev and cd /workspace/ddev git checkout <tag> sudo apt-get update && sudo apt-get install -y nsis sudo .ci-scripts/nsis_setup.sh /usr/share/nsis Edit the checksum in tools/chocolateyinstall.ps1 to match the released checksum of the ddev-windows-installer in checksums.txt of the release that is being repaired, for example, for v1.21.3 this would be the checksum for ddev_windows_installer.v1.21.3.exe in v1.21.3 checksums.txt . Edit url64 in tools/chocolateyinstall.ps1 to be the intended actual DDEV download version - edit the version where it appeasrs and edit the github org. For example, if the actual version of DDEV to be downloaded is v1.21.3 then put that there. make chocolatey VERSION = <tag> export CHOCOLATEY_API_KEY = key33333 cd .gotmp/bin/windows_amd64/chocolatey docker run --rm -v $PWD :/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco push -s https://push.chocolatey.org/ --api-key \" ${ CHOCOLATEY_API_KEY } \"","title":"Manually Updating Chocolatey"},{"location":"developers/release-management/#manually-updating-aur-repository","text":"The AUR repository normally updates with the release process, so nothing needs to be done. However, you can manually publish the release to the DDEV AUR repository . The README.md in the AUR git repo ( ssh://aur@aur.archlinux.org/ddev-bin.git or https://aur.archlinux.org/ddev-bin.git ) has instructions on how to update, including how to do it with a Docker container, so it doesn\u2019t have to be done on an ArchLinux or Manjaro VM.","title":"Manually Updating AUR Repository"},{"location":"developers/release-management/#manually-signing-the-windows-installer","text":"This is done by the release process, but the manual process is documented here. This is done automatically by the release build on a dedicated Windows test runner (GitHub Actions runner) named testbot-asus-win10pro . You would need to do this process manually on that build machine or install the fob on another machine. After rebooting this machine, sometimes an automated reboot, the password for the security fob has to be re-entered or Windows signing will fail. We do this by opening up tb-win11-06 using Chrome Remote Desktop (or manually physically opening it), opening Git Bash, and cd ~/tmp && signtool sign gsudo.exe . There happens to be a gsudo.exe there but it doesn\u2019t matter what you sign\u2014the idea is to pop up the GUI where you enter the password (which is in LastPass).","title":"Manually Signing the Windows Installer"},{"location":"developers/testing-docs/","text":"Working on the Docs \u00b6 This page is about working with the DDEV documentation. See the Writing Style Guide for stylistic guidance. Fix Docs Using Web Browser \u00b6 The documentation is built and checked automatically with various GitHub Actions workflows . While it may help to check your work locally for more involved PRs, you can more quickly make suggestions using GitHub in a browser : Click the pencil in the upper right. That will take you to the the right page on GitHub. Click the pencil button on GitHub and follow the instructions to create your change. Save your changes and follow the prompts to create a PR. In the checks on your PR, click the \u201cdetails\u201d link by docs/readthedocs.org:ddev to browse the docs build created by your PR. Once the PR has run its checks, you\u2019ll see an item labeled docs/readthedocs.org:ddev . Click \u201cDetails\u201d to review a docs build that includes your changes: Take a look at the \u201cCheck docs\u201d action to make sure there were no linting or spelling errors. Fork / Clone the DDEV Repository \u00b6 To start making changes you\u2019ll need a local copy of the DDEV documentation, so fork the DDEV repository which includes the documentation. After forking the repository, you can clone it to your local machine. Make Changes \u00b6 Now that you\u2019ve got a local copy, you can make your changes. Action Path Documentation ./docs/content/users/* ./docs/content/developers/* MkDocs configuration ./mkdocs.yml Front end ./docs/content/assets/extra.css ./docs/content/assets/extra.js Preview Changes \u00b6 Preview your changes locally by running make mkdocs-serve . This will launch a web server on port 8000 and automatically refresh pages as they\u2019re edited. No need to install MkDocs locally! It\u2019s easiest to install install MkDocs locally , but you don\u2019t have to. The make mkdocs-serve command will look for and use a local binary, otherwise using make to build and serve the documenation. If you don\u2019t have make installed on your system, you can directly run the command it would have instead: docker run -it -p 8000:8000 -v \"${PWD}:/docs\" -e \"ADD_MODULES=mkdocs-material mkdocs-redirects mkdocs-minify-plugin mdx_truly_sane_lists mkdocs-git-revision-date-localized-plugin\" -e \"LIVE_RELOAD_SUPPORT=true\" -e \"FAST_MODE=true\" -e \"DOCS_DIRECTORY=./docs\" polinux/mkdocs; Check Markdown for Errors \u00b6 Run make markdownlint before you publish changes to quickly check your files for errors or inconsistencies. markdownlint-cli required! The make markdownlint command requires you to have markdownlint-cli installed, which you can do by executing npm install -g markdownlint-cli Check for Spelling Errors \u00b6 Run make pyspelling to check for spelling errors. Output will be brief if all goes well: \u279c make pyspelling pyspelling: Spelling check passed :) If you\u2019ve added a correctly-spelled word that gets flagged, like \u201cSymfony\u201d for example, you\u2019ll need to add it to .spellcheckwordlist.txt in the root of DDEV\u2019s repository . pyspelling and aspell required! It\u2019s probably best to install packages locally before attempting to run make pyspelling : sudo -H pip3 install pyspelling pymdown-extensions sudo apt-get install aspell Publish Changes \u00b6 If all looks good, it\u2019s time to commit your changes and make a pull request back into the official DDEV repository. When you make a pull request, several tasks and test actions will be run. One of those is a task named docs/readthedocs.org:ddev , which builds a version of the docs containing all the changes from your pull request. You can use that to confirm the final result is exactly what you\u2019d expect.","title":"Working on the Docs"},{"location":"developers/testing-docs/#working-on-the-docs","text":"This page is about working with the DDEV documentation. See the Writing Style Guide for stylistic guidance.","title":"Working on the Docs"},{"location":"developers/testing-docs/#fix-docs-using-web-browser","text":"The documentation is built and checked automatically with various GitHub Actions workflows . While it may help to check your work locally for more involved PRs, you can more quickly make suggestions using GitHub in a browser : Click the pencil in the upper right. That will take you to the the right page on GitHub. Click the pencil button on GitHub and follow the instructions to create your change. Save your changes and follow the prompts to create a PR. In the checks on your PR, click the \u201cdetails\u201d link by docs/readthedocs.org:ddev to browse the docs build created by your PR. Once the PR has run its checks, you\u2019ll see an item labeled docs/readthedocs.org:ddev . Click \u201cDetails\u201d to review a docs build that includes your changes: Take a look at the \u201cCheck docs\u201d action to make sure there were no linting or spelling errors.","title":"Fix Docs Using Web Browser"},{"location":"developers/testing-docs/#fork-clone-the-ddev-repository","text":"To start making changes you\u2019ll need a local copy of the DDEV documentation, so fork the DDEV repository which includes the documentation. After forking the repository, you can clone it to your local machine.","title":"Fork / Clone the DDEV Repository"},{"location":"developers/testing-docs/#make-changes","text":"Now that you\u2019ve got a local copy, you can make your changes. Action Path Documentation ./docs/content/users/* ./docs/content/developers/* MkDocs configuration ./mkdocs.yml Front end ./docs/content/assets/extra.css ./docs/content/assets/extra.js","title":"Make Changes"},{"location":"developers/testing-docs/#preview-changes","text":"Preview your changes locally by running make mkdocs-serve . This will launch a web server on port 8000 and automatically refresh pages as they\u2019re edited. No need to install MkDocs locally! It\u2019s easiest to install install MkDocs locally , but you don\u2019t have to. The make mkdocs-serve command will look for and use a local binary, otherwise using make to build and serve the documenation. If you don\u2019t have make installed on your system, you can directly run the command it would have instead: docker run -it -p 8000:8000 -v \"${PWD}:/docs\" -e \"ADD_MODULES=mkdocs-material mkdocs-redirects mkdocs-minify-plugin mdx_truly_sane_lists mkdocs-git-revision-date-localized-plugin\" -e \"LIVE_RELOAD_SUPPORT=true\" -e \"FAST_MODE=true\" -e \"DOCS_DIRECTORY=./docs\" polinux/mkdocs;","title":"Preview Changes"},{"location":"developers/testing-docs/#check-markdown-for-errors","text":"Run make markdownlint before you publish changes to quickly check your files for errors or inconsistencies. markdownlint-cli required! The make markdownlint command requires you to have markdownlint-cli installed, which you can do by executing npm install -g markdownlint-cli","title":"Check Markdown for Errors"},{"location":"developers/testing-docs/#check-for-spelling-errors","text":"Run make pyspelling to check for spelling errors. Output will be brief if all goes well: \u279c make pyspelling pyspelling: Spelling check passed :) If you\u2019ve added a correctly-spelled word that gets flagged, like \u201cSymfony\u201d for example, you\u2019ll need to add it to .spellcheckwordlist.txt in the root of DDEV\u2019s repository . pyspelling and aspell required! It\u2019s probably best to install packages locally before attempting to run make pyspelling : sudo -H pip3 install pyspelling pymdown-extensions sudo apt-get install aspell","title":"Check for Spelling Errors"},{"location":"developers/testing-docs/#publish-changes","text":"If all looks good, it\u2019s time to commit your changes and make a pull request back into the official DDEV repository. When you make a pull request, several tasks and test actions will be run. One of those is a task named docs/readthedocs.org:ddev , which builds a version of the docs containing all the changes from your pull request. You can use that to confirm the final result is exactly what you\u2019d expect.","title":"Publish Changes"},{"location":"developers/writing-style-guide/","text":"Writing Style Guide \u00b6 This page formalizes the writing conventions we aspire to use in the documentation. It\u2019s a living statement of intent and a reference for all contributors. Voice and Tone \u00b6 In the spirit of the Code of Conduct , we want to be clear and encouraging for everyone that bothers to read DDEV\u2019s documentation, rewarding the time and attention they choose to give to it. Beginner-Friendly, Expert-Compatible \u00b6 Write so a DDEV beginner can follow your guidance and a DDEV veteran could use the same content as a reference. Write This \ud83d\udc4d Not This \u274c You can run ddev restart to apply changes you\u2019ve made to your global ~/.ddev/global_config.yaml or per-project .ddev/config.yaml . Just ddev restart to apply YAML config changes. Be Efficient and Direct \u00b6 Brevity makes for good documentation! Few read the docs from start to finish like a book, and explanation can be a barrier to learning. Get to the point, avoiding parentheticals and mid-sentence notes that interrupt the main flow. Omit extraneous explanation or decorative language that doesn\u2019t help the reader. Instructions don\u2019t need to include \u201cplease\u201d. Provide some context for anchor links without overloading them to hinder flow. Write This \ud83d\udc4d Not This \u274c Run ddev start and launch the site in a browser. Please run ddev start , then launch the site in a browser. Learn more on the Extending page. (You can also learn more about this and related topics in Providing Custom Environment Variables to a Container .) Avoid \u201cJust\u201d and \u201cEasy\u201d \u00b6 Try not to use language that may talk down to the reader. You may intend for \u201cit\u2019s easy\u201d to be reassuring, but it\u2019s a subjective judgment that can convince someone struggling that they\u2019re doing it wrong. Things could instead be \u201cstraightforward\u201d if they\u2019re without nuance, \u201csimple\u201d if they don\u2019t involve complex actions or concepts, or \u201cquick\u201d if they involve one or two steps that\u2019d be fast even on someone\u2019s worst day with the slowest-imaginable machine. Similarly, \u201cjust do X\u201d suggests that \u201cX\u201d should be easy or obvious. Most of the time \u201cjust\u201d can be omitted and everyone wins. If you\u2019d like to reassure the reader something is easy, illustrate it with a demonstration and let them draw their own conclusion! Write This \ud83d\udc4d Not This \u274c Change your project\u2019s PHP version by either editing .ddev/config.yaml to set php_version: \"8.2\" , or by running ddev config --php-version=8.2 , followed by running ddev restart . It\u2019s easy to change your project\u2019s PHP version! Just edit your project\u2019s .ddev/config.yaml to set php_version: \"8.2\" , or run ddev config --php-version=8.2 , followed by running ddev restart . Writing Style \u00b6 DDEV\u2019s documentation should be consistent throughout, which benefits both the reader taking in information and the contributor looking for examples to follow. Read It Aloud If you get tripped up speaking your words out loud, someone else will get tripped up reading them, too. Use Correct Capitalization and Punctuation \u00b6 Write with appropriate grammar and style for U.S. English, including capitalization and punctuation. Variations in spelling and writing style make the documentation harder to read, and we want to be respectful of the reader\u2019s time and attention. Write This \ud83d\udc4d Not This \u274c Let\u2019s not capitalize random words for emphasis. Let\u2019s not Capitalize random Words for emphasis. That organization uses a lovely American color. That organisation uses a lovely American colour. We can use \u201ccurly quotes\u201d now that we\u2019re post-typewriter. We can use \"curly quotes\" now that we're post-typewriter. \u201cRun\u201d Commands \u00b6 We \u201crun\u201d commands. We don\u2019t \u201cdo\u201d them, and the command itself is not a verb. Whenever possible, reinforce that a given thing in backticks is intended as a console command by using the word \u201crun\u201d before it. Write This \ud83d\udc4d Not This \u274c Run ddev config to set up your project. Do ddev config to set up your project. You can ddev config to set up your project. If you get stuck, run ddev restart . If you get stuck, just ddev restart . Use Active Third Person \u00b6 Avoid impersonal language featuring unknown individuals or shadowy organizations. \u201cIt is recommended,\u201d for example, could be a warmer \u201cwe recommend\u201d or \u201cLaravel users recommend\u201d. Write on behalf of the community and not yourself\u2014use \u201cwe\u201d and not \u201cI\u201d. Write This \ud83d\udc4d Not This \u274c We recommend Colima for the best performance. It is recommended for performance that you use Colima. Some prefer Redis for runtime caches. I like using Redis for runtime caches. Write Once and Link \u00b6 Try to keep from repeating yourself in the documentation. Instead, write carefully and link to that well-crafted specimen, whether it\u2019s across the page or off to another section. This has two benefits: Easier maintenance with less chance of redundant information becoming stale. Subtle reinforcement of documentation structure that helps the reader learn where to find answers, rather than answering the same thing in different places. Mind Your Context \u00b6 It\u2019s easy to get lost in documentation; don\u2019t assume the reader is always following your words. Take care to bring the reader with you, especially if there are steps that involve different applications or distinct areas of concern. Write This \ud83d\udc4d Not This \u274c 1. In Docker Desktop, go to Resources \u2192 Advanced and set \u201cMemory\u201d to 6GB. 2. From your terminal, run ddev restart . 3. In your text editor, open .ddev/config.yaml and set php_version: \"8.1\" . 1. Go to Resources \u2192 Advanced and set \u201cMemory\u201d to 6GB. 2. Run ddev restart . 3. Set php_version: \"8.1\" . Once you\u2019ve installed a Docker provider , you\u2019re ready to install DDEV! Docker or an alternative is required before anything will work with DDEV. This is pretty easy on most environments; see the Docker Installation page to help sort out the details. Avoid Starting with Asides \u00b6 The beginning of a page or section should introduce what the rest of the content is about. Try to avoid starting with asides or reminders that get in the way of this initial statement of purpose. Never tell the reader to \u201cremember\u201d something they may not have been introduced to yet. Use Tips \u00b6 Avoid using \u201cNote:\u201d to signal an aside. Most sentences work fine without it, and for discreet notes we have !!!note , !!!tip , and !!!warning conventions. Use one of these callouts for text that can stand on its own and be skipped, or for an urgent message that needs greater visual emphasis. Summarize the callout\u2019s contents with a succinct heading whenever you can, so anyone skimming can know whether to read the callout\u2019s supporting text. !!!note \"This is a note.\" Use it for extraneous asides. !!!tip \"This is a tip.\" Use it for helpful asides. !!!warning \"This is a warning.\" Use it for asides that should have urgent emphasis. !!!note This is a note without a heading, which should only be used with the author isn\u2019t clever enough to come up with a succinct one. (The \u201cNote\u201d is added automatically.) This is a note. Use it for extraneous asides. This is a tip. Use it for helpful asides. This is a warning. Use it for asides that should have urgent emphasis. Note This is a note without a heading, which should only be used with the author isn\u2019t clever enough to come up with a succinct one. (The \u201cNote\u201d is automatically added.) Note: we want to avoid callouts like this sentence, that should either be tips or flow naturally with their surrounding text. If any documentation shouldn\u2019t be noted by the reader, get rid of it. Use Correct Proper Nouns \u00b6 DDEV != ddev \u00b6 DDEV is a product and ddev is a binary or console command. DDEV should always be uppercase, and ddev should always be in backticks. DDEV-Local and DDEV-Live are former product incarnations that shouldn\u2019t be found in modern documentation. Write This \ud83d\udc4d Not This \u274c DDEV is wonderful! Ddev is wonderful! ddev is wonderful! DDEV-Local is wonderful! Run ddev . Run ddev. Run DDEV. Products, Organizations, and Protocols \u00b6 When in doubt, honor whatever name a product or organization uses in its official materials. Use backticks to differentiate between a product and command, just like DDEV vs. ddev . Write This \ud83d\udc4d Not This \u274c AMD64, ARM64, and Apple Silicon amd64, arm64, M1 Macs Apache apache Bash or bash bash Blackfire blackfire, Blackfire.io Chocolatey chocolatey Colima or colima colima Composer or composer composer Docker or docker docker Drush or drush drush Git git Git Bash git bash GitHub or github Github Gitpod or gitpod Gitpod.io, GitPod GoLand Goland Google google Homebrew homebrew HTTP, HTTPS, SSH, http , https , ssh http, https, ssh IPv4, IPv6 IPV4, IPV6, ipv4, ipv6 Linux linux nginx or nginx Nginx, NGINX Node.js or node Node, node NFS nfs Pantheon pantheon, Pantheon.io PHP or php php PhpStorm PHPStorm, PHPstorm, Phpstorm PHPUnit or phpunit phpunit, PHPunit PostgreSQL Postgres Terminus terminus Windows windows Xdebug XDebug, xDebug Quote Copied Text \u00b6 If you\u2019re quoting a human being or a message lifted verbatim from some other source (outside a fenced code block), make sure it ends up in a <blockquote> element: > Error: your quote style should not always be in a fenced block. Error: your quote style should not always be in a fenced block. Other Recommendations \u00b6 One-off tips that don\u2019t fit nicely into any of the sections above: Pluralize \u201cCMS\u201d as \u201cCMSes\u201d, not \u201cCMSs\u201d. Use all-caps references for file types like JSON, YAML and CSS. Wrap file extensions in backticks like .json , .yaml , and .css . Wrap references to files, directories, images and commands in backticks. Use Title Case for headings wherever it makes sense. Link to related services and topics where convenient\u2014usually first use on a given page. Use <kbd> elements for representing literal keystrokes. Use sequential numbers for numbered lists in the source Markdown, regardless of how they\u2019re eventually rendered. Try to maintain parallel format for list items. Write This \ud83d\udc4d Not This \u274c web server webserver add-on addon JSON, YAML, CSS json, Yaml, css .json , .yaml , .css , ~/.ddev .json, .yaml, .css, ~/.ddev CTRL + C control-c, control + c, ctrl+c Menu Item \u2192 Another Menu Item \u2192 Setting Menu Item>Another Menu Item>Setting Menu Item -> Another Menu Item -> Setting several CMSes several CMSs, several CMS\u2019s How to Reticulate Splines How to reticulate splines 1. Run command . 2. Edit file. 3. Restart computer. 1. command 2. Edit file. 3. Additionally, restart your computer.","title":"Writing Style Guide"},{"location":"developers/writing-style-guide/#writing-style-guide","text":"This page formalizes the writing conventions we aspire to use in the documentation. It\u2019s a living statement of intent and a reference for all contributors.","title":"Writing Style Guide"},{"location":"developers/writing-style-guide/#voice-and-tone","text":"In the spirit of the Code of Conduct , we want to be clear and encouraging for everyone that bothers to read DDEV\u2019s documentation, rewarding the time and attention they choose to give to it.","title":"Voice and Tone"},{"location":"developers/writing-style-guide/#writing-style","text":"DDEV\u2019s documentation should be consistent throughout, which benefits both the reader taking in information and the contributor looking for examples to follow. Read It Aloud If you get tripped up speaking your words out loud, someone else will get tripped up reading them, too.","title":"Writing Style"},{"location":"users/code-of-conduct/","text":"Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct (at) localdev.foundation . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"users/code-of-conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"users/code-of-conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"users/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"users/code-of-conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"users/code-of-conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"users/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at conduct (at) localdev.foundation . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"users/code-of-conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"users/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"users/quickstart/","text":"CMS Quickstarts \u00b6 Once DDEV is installed, you can quickly spin up new projects: Clone or create the code for your project. cd into the project directory and run ddev config to initialize a DDEV project. It automatically detects your project type and docroot\u2014make sure it\u2019s accurate! Run ddev start to spin up the project. If your project needs it, don\u2019t forget to run ddev composer install . Import a database with ddev import-db . Optionally import user-managed files with ddev import-files . Run ddev launch to open your project in a browser, or visit the URL given by ddev start . Tip While you\u2019re getting your bearings, use ddev describe to get project details, and ddev help to investigate commands. DDEV comes ready to work with any PHP project, and has deeper support for several common PHP platforms and content management systems. Generic WordPress Drupal TYPO3 OpenMage/Magento 1 Magento 2 Moodle Laravel Craft CMS Shopware 6 Backdrop Generic \u00b6 The php project type is the most general, ready for whatever modern PHP or static HTML/JS project you might be working on. It\u2019s just as full-featured as more specific options, just without any app-specific configuration or presets. You may even prefer to stick with this flavor despite using one of the apps DDEV supports, simply because you\u2019d rather configure things to your own liking. Please do! Create a directory ( mkdir my-new-project ) or clone your project ( git clone <your_project> ). Change to the new directory ( cd my-new-project ). Run ddev config and set the project type and docroot, which are usually auto-detected, but may not be if there's no code in there yet. Run ddev start . If you\u2019re using Composer, run ddev composer install . Configure any database settings; host='db', user='db', password='db', database='db' If needed, import a database with ddev import-db --src=/path/to/db.sql.gz . Visit the project in a browser, and then build things. WordPress \u00b6 There are several easy ways to use DDEV with WordPress: WP-CLI Bedrock Git Clone WP-CLI \u00b6 DDEV has built-in support for WP-CLI , the command-line interface for WordPress. mkdir my-wp-site cd my-wp-site/ # Create a new DDEV project inside the newly-created folder # (Primary URL automatically set to `https://<folder>.ddev.site`) ddev config --project-type = wordpress ddev start # Download WordPress ddev wp core download # Launch in browser to finish installation ddev launch # OR use the following installation command # (we need to use single quotes to get the primary site URL from `.ddev/config.yaml` as variable) ddev wp core install --url = '$DDEV_PRIMARY_URL' --title = 'New-WordPress' --admin_user = admin --admin_email = admin@example.com --prompt = admin_password # Launch WordPress admin dashboard in your browser ddev launch wp-admin/ Bedrock \u00b6 Bedrock is a modern, Composer-based installation if WordPress: mkdir my-wp-bedrock-site cd my-wp-bedrock-site ddev config --project-type = wordpress --docroot = web --create-docroot ddev start ddev composer create roots/bedrock Update the .env file in the project root for Bedrock\u2019s WordPress configuration convention: DB_NAME=db DB_USER=db DB_PASSWORD=db DB_HOST=db WP_HOME=${DDEV_PRIMARY_URL} WP_SITEURL=${WP_HOME}/wp WP_ENV=development You can then run ddev start and ddev launch . For more details, see Bedrock installation . Git Clone \u00b6 To get started using DDEV with an existing WordPress project, clone the project\u2019s repository. Note that the git URL shown here is just an example. git clone https://github.com/example/example-site.git cd example-site ddev config You\u2019ll see a message like: An existing user-managed wp-config.php file has been detected! Project DDEV settings have been written to: /Users/rfay/workspace/bedrock/web/wp-config-ddev.php Please comment out any database connection settings in your wp-config.php and add the following snippet to your wp-config.php, near the bottom of the file and before the include of wp-settings.php: // Include for DDEV-managed settings in wp-config-ddev.php. $ddev_settings = dirname(__FILE__) . '/wp-config-ddev.php'; if (is_readable($ddev_settings) && !defined('DB_USER')) { require_once($ddev_settings); } If you don't care about those settings, or config is managed in a .env file, etc, then you can eliminate this message by putting a line that says // wp-config-ddev.php not needed in your wp-config.php So just add the suggested include into your wp-config.php , or take the workaround shown. Now start your project with ddev start . Quickstart instructions regarding database imports can be found under Importing a database . Drupal \u00b6 Drupal 10 Drupal 9 Drupal 6/7 Git Clone Drupal 10 via Composer \u00b6 Drupal 10 is fully supported by DDEV. mkdir my-drupal10-site cd my-drupal10-site ddev config --project-type = drupal10 --docroot = web --create-docroot ddev start ddev composer create drupal/recommended-project ddev composer require drush/drush ddev drush site:install --account-name = admin --account-pass = admin -y ddev drush uli ddev launch Drupal 9 via Composer \u00b6 mkdir my-drupal9-site cd my-drupal9-site ddev config --project-type = drupal9 --docroot = web --create-docroot ddev start ddev composer create \"drupal/recommended-project:^9\" ddev composer require drush/drush ddev drush site:install --account-name = admin --account-pass = admin -y ddev drush uli ddev launch Drupal 6/7 \u00b6 git clone https://github.com/example/my-drupal-site cd my-drupal-site ddev config # Follow the prompts to select type and docroot ddev start ddev launch /install.php Drupal 7 doesn\u2019t know how to redirect from the front page to /install.php if the database is not set up but the settings files are set up, so launching with /install.php gets you started with an installation. You can also drush site-install , then ddev exec drush site-install --yes . See Importing a Database . Git Clone \u00b6 git clone https://github.com/example/my-drupal-site cd example-site ddev config # Follow the prompts to set Drupal version and docroot ddev composer install # If a composer build ddev launch TYPO3 \u00b6 Composer Git Clone Composer \u00b6 mkdir my-typo3-site cd my-typo3-site ddev config --project-type = typo3 --docroot = public --create-docroot --php-version 8 .1 ddev start ddev composer create \"typo3/cms-base-distribution\" ddev exec touch public/FIRST_INSTALL ddev launch Git Clone \u00b6 git clone https://github.com/example/example-site cd example-site ddev config --project-type = typo3 --docroot = public --create-docroot --php-version 8 .1 ddev composer install ddev restart ddev exec touch public/FIRST_INSTALL ddev launch OpenMage/Magento 1 \u00b6 Download OpenMage from release page . Make a directory for it, for example mkdir ~/workspace/OpenMage and change to the new directory cd ~/workspace/OpenMage . Run ddev config and accept the defaults. Install sample data. (See below.) Run ddev start . Follow the URL to the base site. You may want the Magento 1 Sample Data for experimentation: Download Magento 1.9.2.4 Sample Data . Extract the download: tar -zxf ~/Downloads/compressed-magento-sample-data-1.9.2.4.tgz --strip-components=1 Import the example database magento_sample_data_for_1.9.2.4.sql with ddev import-db --src=magento_sample_data_for_1.9.2.4.sql to database before running OpenMage install. OpenMage is a huge codebase, and we recommend using Mutagen for performance on macOS and traditional Windows. Magento 2 \u00b6 Normal details of a Composer build for Magento 2 are on the [Magento 2 site]( https://devdocs.magento.com/guides/v2.4/install-gde/composer.html . You must have a public and private key to install from Magento\u2019s repository. When prompted for \u201cusername\u201d and \u201cpassword\u201d in composer create , it\u2019s asking for your public and private keys. mkdir ddev-magento2 && cd ddev-magento2 ddev config --project-type = magento2 --php-version = 8 .1 --docroot = pub --create-docroot --disable-settings-management ddev get drud/ddev-elasticsearch ddev start ddev composer create --repository = https://repo.magento.com/ magento/project-community-edition -y rm -f app/etc/env.php # Change the base-url below to your project's URL ddev magento setup:install --base-url = 'https://ddev-magento2.ddev.site/' --cleanup-database --db-host = db --db-name = db --db-user = db --db-password = db --elasticsearch-host = elasticsearch --admin-firstname = Magento --admin-lastname = User --admin-email = user@example.com --admin-user = admin --admin-password = admin123 --language = en_US ddev magento deploy:mode:set developer ddev magento module:disable Magento_TwoFactorAuth ddev config --disable-settings-management = false Change the admin name and related information is needed. You may want to add the Magento 2 Sample Data with ddev magento sampledata:deploy && ddev magento setup:upgrade . Magento 2 is a huge codebase, and we recommend using Mutagen for performance on macOS and traditional Windows. Moodle \u00b6 ddev config --composer-root = public --create-docroot --docroot = public --webserver-type = apache-fpm ddev start ddev composer create moodle/moodle -y ddev exec 'php public/admin/cli/install.php --non-interactive --agree-license --wwwroot=$DDEV_PRIMARY_URL --dbtype=mariadb --dbhost=db --dbname=db --dbuser=db --dbpass=db --fullname=\"DDEV Moodle Demo\" --shortname=Demo --adminpass=password' ddev launch /login In the web browser, log into your account using admin and password . Visit the Moodle Admin Quick Guide for more information. Tip Moodle relies on a periodic cron job\u2014don\u2019t forget to set that up! See drud/ddev-cron . Laravel \u00b6 Use a new or existing Composer project, or clone a Git repository. The Laravel project type can be used for Lumen just as it can for Laravel. DDEV automatically updates or creates the .env file with the database information. Composer Git Clone mkdir my-laravel-app cd my-laravel-app ddev config --project-type = laravel --docroot = public --create-docroot ddev composer create --prefer-dist --no-install --no-scripts laravel/laravel ddev composer install ddev exec \"php artisan key:generate\" ddev launch git clone <your-laravel-repo> cd <your-laravel-project> ddev config --project-type = laravel --docroot = public --create-docroot ddev start ddev composer install ddev exec \"php artisan key:generate\" ddev launch Craft CMS \u00b6 Start a new Craft CMS project or retrofit an existing one. Compatibility The craft project type was added to DDEV in version 1.21.2 . Check your current version with the ddev version command, and upgrade if necessary! Environment variables will be automatically added to your .env file to simplify the first boot of a project. For new installations, this means the default URL and database connection settings displayed during installation can be used without modification. If existing projects expect environment variables to be named in a particular way, you are welcome to rename them. New projects Existing projects New Craft CMS projects can be created from the official starter project using DDEV\u2019s composer create command : # Create a project directory and move into it: mkdir my-craft-project cd my-craft-project # Set up the DDEV environment: ddev config --project-type = craftcms --docroot = web --create-docroot # Boot the project and install the starter project: ddev start ddev composer create -y --no-scripts craftcms/craft # Run the Craft installer: ddev craft install ddev launch Third-party starter projects can by used the same way\u2014just substitute the package name when running ddev composer create . You can start using DDEV with an existing project, too\u2014just make sure you have a database backup handy! # Clone an existing repository (or navigate to a local project directory): git clone https://github.com/example/example-site my-craft-project cd my-craft-project # Set up the DDEV environment: ddev config --project-type = craftcms # Boot the project and install Composer packages: ddev start ddev composer install # Import a database backup and open the site in your browser: ddev import-db --src = /path/to/db.sql.gz ddev launch Upgrading or using a generic project type? If you previously set up DDEV in a Craft project using the generic php project type, update the type: setting in .ddev/config.yaml to craft , then run ddev restart apply the changes. Running Craft in a Sub-directory \u00b6 In order for ddev craft to work when Craft is installed in a sub-directory, you will need to change the location of the craft executable by providing the CRAFT_CMD_ROOT environment variable to the web container. For example, if the installation lives in my-craft-project/app , you would run ddev config --web-environment-add=CRAFT_CMD_ROOT=./app . CRAFT_CMD_ROOT defaults to ./ , the project root directory. Run ddev restart to apply the change. More information about customizing the environment and persisting configuration can be found in Providing Custom Environment Variables to a Container . Installing Craft Read more about installing Craft in the official documentation . Shopware 6 \u00b6 You can set up a Shopware 6 environment many ways, we recommend the following technique: git clone --branch = 6 .4 https://github.com/shopware/production my-shopware6 cd my-shopware6 ddev config --project-type = shopware6 --docroot = public ddev start ddev composer install --no-scripts # During system:setup you may have to enter the Database user (db), Database password (db) # Database host (db) and Database name (db). ddev exec bin/console system:setup --database-url = mysql://db:db@db:3306/db --app-url = '${DDEV_PRIMARY_URL}' ddev exec bin/console system:install --create-database --basic-setup ddev launch /admin Log into the admin site ( /admin ) using the web browser. The default credentials are username admin and password shopware . You can use the web UI to install sample data or accomplish many other tasks. For more advanced tasks like adding elasticsearch, building and watching storefront and administration, see susi.dev . Backdrop \u00b6 To get started with Backdrop, clone the project repository and navigate to the project directory. git clone https://github.com/example/example-site cd example-site ddev config ddev start ddev launch Configuration Files \u00b6 The ddev config command attempts to create a CMS-specific settings file pre-populated with DDEV credentials. For Drupal and Backdrop , DDEV settings are written to a DDEV-managed file, settings.ddev.php . The ddev config command will ensure these settings are included in your settings.php through the following steps: Write DDEV settings to settings.ddev.php . If no settings.php file exists, create one that includes settings.ddev.php . If a settings.php file already exists, ensure that it includes settings.ddev.php , modifying settings.php to write the include if necessary.. For Magento 1 , DDEV settings go into app/etc/local.xml In Magento 2 , DDEV settings go into app/etc/env.php For TYPO3 , DDEV settings are written to AdditionalConfiguration.php . If AdditionalConfiguration.php exists and is not managed by DDEV, it will not be modified. For WordPress , DDEV settings are written to a DDEV-managed file, wp-config-ddev.php . The ddev config command will attempt to write settings through the following steps: Write DDEV settings to wp-config-ddev.php . If no wp-config.php exists, create one that include wp-config-ddev.php . If a DDEV-managed wp-config.php exists, create one that includes wp-config.php . If a user-managed wp-config.php exists, instruct the user on how to modify it to include DDEV settings. You\u2019ll know DDEV is managing a settings file when you see the comment below. Remove the comment and DDEV will not attempt to overwrite it! If you\u2019re letting DDEV create its settings file, we recommended leaving this comment so DDEV can continue to manage it, and make any needed changes in another settings file. /** #ddev-generated: Automatically generated Drupal settings.php file. ddev manages this file and may delete or overwrite the file unless this comment is removed. */ If you\u2019re providing the settings.php or wp-config.php and DDEV is creating settings.ddev.php (or wp-config-local.php , AdditionalConfig.php , or similar), the main settings file must explicitly include the appropriate DDEV-generated settings file. Any changes you need should be included somewhere that loads after DDEV\u2019s settings file, for example in Drupal\u2019s settings.php after settings.ddev.php is included. (See Adding Configuration below). Completely Disabling Settings Management If you do not want DDEV to create or manage settings files, set disable_settings_management: true in .ddev/config.yaml or run ddev config --disable-settings-management . Once you\u2019ve done that, it\u2019s solely up to you to manually edit those settings. Adding Configuration \u00b6 Drupal and Backdrop : In settings.php , enable loading settings.local.php after settings.ddev.php is included\u2014creating a new one if it doesn\u2019t already exist\u2014and make changes there. Wrap with if (getenv('IS_DDEV_PROJECT') == 'true') as needed. WordPress : Load a wp-config-local.php after wp-config-ddev.php , and make changes there. Wrap with if (getenv('IS_DDEV_PROJECT') == 'true') as needed. Listing Project Information \u00b6 Run ddev list or ddev list --active-only current projects. \u279c ddev list NAME TYPE LOCATION URL(s) STATUS d8git drupal8 ~/workspace/d8git <https://d8git.ddev.local> running <http://d8git.ddev.local> hobobiker drupal6 ~/workspace/hobobiker.com stopped \u279c ddev list --active-only NAME TYPE LOCATION URL(s) STATUS drupal8 drupal8 ~/workspace/drupal8 <http://drupal8.ddev.site> running <https://drupal8.ddev.site> You can also see more detailed information about a project by running ddev describe from its working directory. You can also run ddev describe [project-name] from any location to see the detailed information for a running project. NAME TYPE LOCATION URL STATUS d9composer drupal8 ~/workspace/d9composer https://d9composer.ddev.site running Project Information ------------------- PHP version: 7.4 MariaDB version 10.3 URLs ---- https://d9composer.ddev.site https://127.0.0.1:33232 http://d9composer.ddev.site http://127.0.0.1:33233 MySQL/MariaDB Credentials ------------------------- Username: \"db\", Password: \"db\", Default database: \"db\" or use root credentials when needed: Username: \"root\", Password: \"root\" Database hostname and port INSIDE container: ddev-d9-db:3306 To connect to db server inside container or in project settings files: mysql --host=ddev-d9-dbcomposer --user=db --password=db --database=db Database hostname and port from HOST: 127.0.0.1:33231 To connect to mysql from your host machine, mysql --host=127.0.0.1 --port=33231 --user=db --password=db --database=db Other Services -------------- MailHog (https): https://d9composer.ddev.site:8026 MailHog: http://d9composer.ddev.site:8025 phpMyAdmin (https): https://d9composer.ddev.site:8037 phpMyAdmin: http://d9composer.ddev.site:8036 DDEV ROUTER STATUS: healthy ssh-auth status: healthy Removing Projects \u00b6 There are two ways to remove a project from DDEV\u2019s listing. The first, the ddev delete command, is destructive. It removes the project from DDEV\u2019s list, deletes its database, and removes the hostname entry from the hosts file: ddev delete <projectname> or ddev delete --omit-snapshot <projectname> If you simply don\u2019t want the project to show up in ddev list anymore, use ddev stop \u2014which is nondestructive\u2014to unlist the project until the next time you run ddev start or ddev config : ddev stop --unlist <projectname> Importing Assets for An Existing Project \u00b6 An important aspect of local web development is the ability to have a precise local recreation of the project you\u2019re working on, including up-to-date database contents and static assets like uploaded images and files. DDEV provides two commands to help with importing assets to your local environment. Importing a Database \u00b6 The ddev import-db command imports the database for a project. Running this command will prompt you to specify the location of your database import. By default ddev import-db empties the default db database, then loads the provided dump file. Most people use it with command flags, like ddev import-db --src=.tarballs/db.sql.gz , but it can also prompt for the location of the dump if you only use ddev import-db : ddev import-db Provide the path to the database you wish to import. Import path: ~/Downloads/db.sql Importing database... Successfully imported database for drupal8 Supported File Types \u00b6 Database imports can be any of the following file types: Raw SQL Dump ( .sql ) Gzipped SQL Dump ( .sql.gz ) Xz\u2019d SQL Dump ( .sql.xz ) (Gzipped) Tarball Archive ( .tar , .tar.gz , .tgz ) Zip Archive ( .zip ) stdin If a Tarball Archive or Zip Archive is provided for the import, you\u2019ll be prompted to specify a path within the archive to use for the import asset. The specified path should provide a raw SQL dump ( .sql ). In the following example, the database we want to import is named data.sql and resides at the top level of the archive: ddev import-db Provide the path to the database you wish to import. Import path: ~/Downloads/site-backup.tar.gz You provided an archive. Do you want to extract from a specific path in your archive? You may leave this blank if you wish to use the full archive contents Archive extraction path: data.sql Importing database... A settings file already exists for your application, so ddev did not generate one. Run 'ddev describe' to find the database credentials for this application. Successfully imported database for drupal8 Non-Interactive Usage \u00b6 If you want to use the import-db command without answering prompts, you can use the --src flag to provide the path to the import asset. If you\u2019re importing an archive and wish to specify the path within the archive to extract, you can use the --extract-path flag in conjunction with the --src flag. Examples: ddev import-db --src = /tmp/mydb.sql.gz gzip -dc /tmp/mydb.sql.gz | ddev import-db ddev import-db <mydb.sql Database Import Notes \u00b6 Importing from a dump file via stdin will not show progress because there\u2019s no way the import can know how far along through the import it has progressed. Use ddev import-db --target-db <some_database> to import to a non-default database (other than the default db database). This will create the database if it doesn\u2019t already exist. Use ddev import-db --no-drop to import without first emptying the database. If a database already exists and the import does not specify dropping tables, the contents of the imported dumpfile will be added to the database. Most full database dumps do a table drop and create before loading, but if yours does not, you can drop all tables with ddev stop --remove-data before importing. If imports are stalling or failing, make sure you have plenty of unused space (see #3360 ). DDEV has no problems importing large (2G+) databases, but importing requires lots of space. DDEV will show a warning on startup if unused space is getting low.","title":"CMS Quickstarts"},{"location":"users/quickstart/#cms-quickstarts","text":"Once DDEV is installed, you can quickly spin up new projects: Clone or create the code for your project. cd into the project directory and run ddev config to initialize a DDEV project. It automatically detects your project type and docroot\u2014make sure it\u2019s accurate! Run ddev start to spin up the project. If your project needs it, don\u2019t forget to run ddev composer install . Import a database with ddev import-db . Optionally import user-managed files with ddev import-files . Run ddev launch to open your project in a browser, or visit the URL given by ddev start . Tip While you\u2019re getting your bearings, use ddev describe to get project details, and ddev help to investigate commands. DDEV comes ready to work with any PHP project, and has deeper support for several common PHP platforms and content management systems. Generic WordPress Drupal TYPO3 OpenMage/Magento 1 Magento 2 Moodle Laravel Craft CMS Shopware 6 Backdrop","title":"CMS Quickstarts"},{"location":"users/quickstart/#generic","text":"The php project type is the most general, ready for whatever modern PHP or static HTML/JS project you might be working on. It\u2019s just as full-featured as more specific options, just without any app-specific configuration or presets. You may even prefer to stick with this flavor despite using one of the apps DDEV supports, simply because you\u2019d rather configure things to your own liking. Please do! Create a directory ( mkdir my-new-project ) or clone your project ( git clone <your_project> ). Change to the new directory ( cd my-new-project ). Run ddev config and set the project type and docroot, which are usually auto-detected, but may not be if there's no code in there yet. Run ddev start . If you\u2019re using Composer, run ddev composer install . Configure any database settings; host='db', user='db', password='db', database='db' If needed, import a database with ddev import-db --src=/path/to/db.sql.gz . Visit the project in a browser, and then build things.","title":"Generic"},{"location":"users/quickstart/#wordpress","text":"There are several easy ways to use DDEV with WordPress: WP-CLI Bedrock Git Clone","title":"WordPress"},{"location":"users/quickstart/#drupal","text":"Drupal 10 Drupal 9 Drupal 6/7 Git Clone","title":"Drupal"},{"location":"users/quickstart/#typo3","text":"Composer Git Clone","title":"TYPO3"},{"location":"users/quickstart/#openmagemagento-1","text":"Download OpenMage from release page . Make a directory for it, for example mkdir ~/workspace/OpenMage and change to the new directory cd ~/workspace/OpenMage . Run ddev config and accept the defaults. Install sample data. (See below.) Run ddev start . Follow the URL to the base site. You may want the Magento 1 Sample Data for experimentation: Download Magento 1.9.2.4 Sample Data . Extract the download: tar -zxf ~/Downloads/compressed-magento-sample-data-1.9.2.4.tgz --strip-components=1 Import the example database magento_sample_data_for_1.9.2.4.sql with ddev import-db --src=magento_sample_data_for_1.9.2.4.sql to database before running OpenMage install. OpenMage is a huge codebase, and we recommend using Mutagen for performance on macOS and traditional Windows.","title":"OpenMage/Magento 1"},{"location":"users/quickstart/#magento-2","text":"Normal details of a Composer build for Magento 2 are on the [Magento 2 site]( https://devdocs.magento.com/guides/v2.4/install-gde/composer.html . You must have a public and private key to install from Magento\u2019s repository. When prompted for \u201cusername\u201d and \u201cpassword\u201d in composer create , it\u2019s asking for your public and private keys. mkdir ddev-magento2 && cd ddev-magento2 ddev config --project-type = magento2 --php-version = 8 .1 --docroot = pub --create-docroot --disable-settings-management ddev get drud/ddev-elasticsearch ddev start ddev composer create --repository = https://repo.magento.com/ magento/project-community-edition -y rm -f app/etc/env.php # Change the base-url below to your project's URL ddev magento setup:install --base-url = 'https://ddev-magento2.ddev.site/' --cleanup-database --db-host = db --db-name = db --db-user = db --db-password = db --elasticsearch-host = elasticsearch --admin-firstname = Magento --admin-lastname = User --admin-email = user@example.com --admin-user = admin --admin-password = admin123 --language = en_US ddev magento deploy:mode:set developer ddev magento module:disable Magento_TwoFactorAuth ddev config --disable-settings-management = false Change the admin name and related information is needed. You may want to add the Magento 2 Sample Data with ddev magento sampledata:deploy && ddev magento setup:upgrade . Magento 2 is a huge codebase, and we recommend using Mutagen for performance on macOS and traditional Windows.","title":"Magento 2"},{"location":"users/quickstart/#moodle","text":"ddev config --composer-root = public --create-docroot --docroot = public --webserver-type = apache-fpm ddev start ddev composer create moodle/moodle -y ddev exec 'php public/admin/cli/install.php --non-interactive --agree-license --wwwroot=$DDEV_PRIMARY_URL --dbtype=mariadb --dbhost=db --dbname=db --dbuser=db --dbpass=db --fullname=\"DDEV Moodle Demo\" --shortname=Demo --adminpass=password' ddev launch /login In the web browser, log into your account using admin and password . Visit the Moodle Admin Quick Guide for more information. Tip Moodle relies on a periodic cron job\u2014don\u2019t forget to set that up! See drud/ddev-cron .","title":"Moodle"},{"location":"users/quickstart/#laravel","text":"Use a new or existing Composer project, or clone a Git repository. The Laravel project type can be used for Lumen just as it can for Laravel. DDEV automatically updates or creates the .env file with the database information. Composer Git Clone mkdir my-laravel-app cd my-laravel-app ddev config --project-type = laravel --docroot = public --create-docroot ddev composer create --prefer-dist --no-install --no-scripts laravel/laravel ddev composer install ddev exec \"php artisan key:generate\" ddev launch git clone <your-laravel-repo> cd <your-laravel-project> ddev config --project-type = laravel --docroot = public --create-docroot ddev start ddev composer install ddev exec \"php artisan key:generate\" ddev launch","title":"Laravel"},{"location":"users/quickstart/#craft-cms","text":"Start a new Craft CMS project or retrofit an existing one. Compatibility The craft project type was added to DDEV in version 1.21.2 . Check your current version with the ddev version command, and upgrade if necessary! Environment variables will be automatically added to your .env file to simplify the first boot of a project. For new installations, this means the default URL and database connection settings displayed during installation can be used without modification. If existing projects expect environment variables to be named in a particular way, you are welcome to rename them. New projects Existing projects New Craft CMS projects can be created from the official starter project using DDEV\u2019s composer create command : # Create a project directory and move into it: mkdir my-craft-project cd my-craft-project # Set up the DDEV environment: ddev config --project-type = craftcms --docroot = web --create-docroot # Boot the project and install the starter project: ddev start ddev composer create -y --no-scripts craftcms/craft # Run the Craft installer: ddev craft install ddev launch Third-party starter projects can by used the same way\u2014just substitute the package name when running ddev composer create . You can start using DDEV with an existing project, too\u2014just make sure you have a database backup handy! # Clone an existing repository (or navigate to a local project directory): git clone https://github.com/example/example-site my-craft-project cd my-craft-project # Set up the DDEV environment: ddev config --project-type = craftcms # Boot the project and install Composer packages: ddev start ddev composer install # Import a database backup and open the site in your browser: ddev import-db --src = /path/to/db.sql.gz ddev launch Upgrading or using a generic project type? If you previously set up DDEV in a Craft project using the generic php project type, update the type: setting in .ddev/config.yaml to craft , then run ddev restart apply the changes.","title":"Craft CMS"},{"location":"users/quickstart/#shopware-6","text":"You can set up a Shopware 6 environment many ways, we recommend the following technique: git clone --branch = 6 .4 https://github.com/shopware/production my-shopware6 cd my-shopware6 ddev config --project-type = shopware6 --docroot = public ddev start ddev composer install --no-scripts # During system:setup you may have to enter the Database user (db), Database password (db) # Database host (db) and Database name (db). ddev exec bin/console system:setup --database-url = mysql://db:db@db:3306/db --app-url = '${DDEV_PRIMARY_URL}' ddev exec bin/console system:install --create-database --basic-setup ddev launch /admin Log into the admin site ( /admin ) using the web browser. The default credentials are username admin and password shopware . You can use the web UI to install sample data or accomplish many other tasks. For more advanced tasks like adding elasticsearch, building and watching storefront and administration, see susi.dev .","title":"Shopware 6"},{"location":"users/quickstart/#backdrop","text":"To get started with Backdrop, clone the project repository and navigate to the project directory. git clone https://github.com/example/example-site cd example-site ddev config ddev start ddev launch","title":"Backdrop"},{"location":"users/quickstart/#configuration-files","text":"The ddev config command attempts to create a CMS-specific settings file pre-populated with DDEV credentials. For Drupal and Backdrop , DDEV settings are written to a DDEV-managed file, settings.ddev.php . The ddev config command will ensure these settings are included in your settings.php through the following steps: Write DDEV settings to settings.ddev.php . If no settings.php file exists, create one that includes settings.ddev.php . If a settings.php file already exists, ensure that it includes settings.ddev.php , modifying settings.php to write the include if necessary.. For Magento 1 , DDEV settings go into app/etc/local.xml In Magento 2 , DDEV settings go into app/etc/env.php For TYPO3 , DDEV settings are written to AdditionalConfiguration.php . If AdditionalConfiguration.php exists and is not managed by DDEV, it will not be modified. For WordPress , DDEV settings are written to a DDEV-managed file, wp-config-ddev.php . The ddev config command will attempt to write settings through the following steps: Write DDEV settings to wp-config-ddev.php . If no wp-config.php exists, create one that include wp-config-ddev.php . If a DDEV-managed wp-config.php exists, create one that includes wp-config.php . If a user-managed wp-config.php exists, instruct the user on how to modify it to include DDEV settings. You\u2019ll know DDEV is managing a settings file when you see the comment below. Remove the comment and DDEV will not attempt to overwrite it! If you\u2019re letting DDEV create its settings file, we recommended leaving this comment so DDEV can continue to manage it, and make any needed changes in another settings file. /** #ddev-generated: Automatically generated Drupal settings.php file. ddev manages this file and may delete or overwrite the file unless this comment is removed. */ If you\u2019re providing the settings.php or wp-config.php and DDEV is creating settings.ddev.php (or wp-config-local.php , AdditionalConfig.php , or similar), the main settings file must explicitly include the appropriate DDEV-generated settings file. Any changes you need should be included somewhere that loads after DDEV\u2019s settings file, for example in Drupal\u2019s settings.php after settings.ddev.php is included. (See Adding Configuration below). Completely Disabling Settings Management If you do not want DDEV to create or manage settings files, set disable_settings_management: true in .ddev/config.yaml or run ddev config --disable-settings-management . Once you\u2019ve done that, it\u2019s solely up to you to manually edit those settings.","title":"Configuration Files"},{"location":"users/quickstart/#listing-project-information","text":"Run ddev list or ddev list --active-only current projects. \u279c ddev list NAME TYPE LOCATION URL(s) STATUS d8git drupal8 ~/workspace/d8git <https://d8git.ddev.local> running <http://d8git.ddev.local> hobobiker drupal6 ~/workspace/hobobiker.com stopped \u279c ddev list --active-only NAME TYPE LOCATION URL(s) STATUS drupal8 drupal8 ~/workspace/drupal8 <http://drupal8.ddev.site> running <https://drupal8.ddev.site> You can also see more detailed information about a project by running ddev describe from its working directory. You can also run ddev describe [project-name] from any location to see the detailed information for a running project. NAME TYPE LOCATION URL STATUS d9composer drupal8 ~/workspace/d9composer https://d9composer.ddev.site running Project Information ------------------- PHP version: 7.4 MariaDB version 10.3 URLs ---- https://d9composer.ddev.site https://127.0.0.1:33232 http://d9composer.ddev.site http://127.0.0.1:33233 MySQL/MariaDB Credentials ------------------------- Username: \"db\", Password: \"db\", Default database: \"db\" or use root credentials when needed: Username: \"root\", Password: \"root\" Database hostname and port INSIDE container: ddev-d9-db:3306 To connect to db server inside container or in project settings files: mysql --host=ddev-d9-dbcomposer --user=db --password=db --database=db Database hostname and port from HOST: 127.0.0.1:33231 To connect to mysql from your host machine, mysql --host=127.0.0.1 --port=33231 --user=db --password=db --database=db Other Services -------------- MailHog (https): https://d9composer.ddev.site:8026 MailHog: http://d9composer.ddev.site:8025 phpMyAdmin (https): https://d9composer.ddev.site:8037 phpMyAdmin: http://d9composer.ddev.site:8036 DDEV ROUTER STATUS: healthy ssh-auth status: healthy","title":"Listing Project Information"},{"location":"users/quickstart/#removing-projects","text":"There are two ways to remove a project from DDEV\u2019s listing. The first, the ddev delete command, is destructive. It removes the project from DDEV\u2019s list, deletes its database, and removes the hostname entry from the hosts file: ddev delete <projectname> or ddev delete --omit-snapshot <projectname> If you simply don\u2019t want the project to show up in ddev list anymore, use ddev stop \u2014which is nondestructive\u2014to unlist the project until the next time you run ddev start or ddev config : ddev stop --unlist <projectname>","title":"Removing Projects"},{"location":"users/quickstart/#importing-assets-for-an-existing-project","text":"An important aspect of local web development is the ability to have a precise local recreation of the project you\u2019re working on, including up-to-date database contents and static assets like uploaded images and files. DDEV provides two commands to help with importing assets to your local environment.","title":"Importing Assets for An Existing Project"},{"location":"users/support/","text":"Support \u00b6 We love to hear from you and want you to be successful with DDEV! See the included ddev help command, which includes lots of examples. FAQ Discord interactive community support. DDEV issue queue for bugs and feature requests. Twitter with tag #ddev will get to us. It\u2019s not as good for interactive support, but we\u2019ll answer anywhere. Additional Resources \u00b6 DDEV Stack Overflow for support and frequently asked questions. We respond quickly here and the results provide quite a library of user-curated solutions. ddev-contrib repo provides a number of vetted, user-contributed recipes for extending and using DDEV. Your contributions are welcome. awesome-ddev repo has loads of external resources, blog posts, recipes, screencasts, and the like. Your contributions are welcome.","title":"Support"},{"location":"users/support/#support","text":"We love to hear from you and want you to be successful with DDEV! See the included ddev help command, which includes lots of examples. FAQ Discord interactive community support. DDEV issue queue for bugs and feature requests. Twitter with tag #ddev will get to us. It\u2019s not as good for interactive support, but we\u2019ll answer anywhere.","title":"Support"},{"location":"users/support/#additional-resources","text":"DDEV Stack Overflow for support and frequently asked questions. We respond quickly here and the results provide quite a library of user-curated solutions. ddev-contrib repo provides a number of vetted, user-contributed recipes for extending and using DDEV. Your contributions are welcome. awesome-ddev repo has loads of external resources, blog posts, recipes, screencasts, and the like. Your contributions are welcome.","title":"Additional Resources"},{"location":"users/basics/","text":"Basics \u00b6 Learn: Using the ddev Command Commands Database Management Built-in Developer Tools How DDEV Works FAQ Troubleshooting Uninstalling DDEV","title":"Basics"},{"location":"users/basics/#basics","text":"Learn: Using the ddev Command Commands Database Management Built-in Developer Tools How DDEV Works FAQ Troubleshooting Uninstalling DDEV","title":"Basics"},{"location":"users/basics/architecture/","text":"How DDEV Works \u00b6 DDEV is a Go application that stores its configuration in files on your workstation . It uses those blueprints to mount your project files into Docker containers that facilitate the operation of a local development environment. DDEV writes and uses docker-compose files for you, which is a detail you can cheerfully ignore unless you\u2019re Docker-curious or defining your own services . Directory Tour \u00b6 DDEV stores configuration in two places: a single .ddev directory in your home folder, and a .ddev directory for each project you set up. The global configuration directory is used to keep track of your projects and any of the global settings that apply across all projects. You\u2019ll probably spend more time working with the per-project .ddev directories for their configuration and overrides. Project Files \u00b6 A project\u2019s .ddev directory can be intimidating at first, so let\u2019s take a look at what lives in there. Yours May Differ Slightly You may have some directories or files that aren\u2019t listed here, likely added by custom services. For example, if you see a solr directory, it probably pertains to a custom Solr add-on service . apache directory Default Apache configuration when using webserver_type: apache-fpm , which can be customized . commands subdirectories Project custom shell commands that can run on the host or inside a container. config.yaml The project\u2019s main configuration file . config.*.yaml files Environmental overrides for parts of config.yaml . db-build directory Can be used to provide a custom Dockerfile for the database container. db_snapshots directory Where snapshots go when you run the ddev snapshot command. You can safely delete anything in here that you don\u2019t need. docker-compose.*.yaml files Where Docker-friendly users can provide their own custom compose files that add or override services. Read more in Additional Service Configurations & Add-ons and check out examples in ddev-contrib . homeadditions directory Files to be copied into the web container on startup. You could use this, for example, to override the default home directory contents ( .profile , .bashrc , .composer , .ssh ), or include scripts that you\u2019d like to be available inside the container. (You can do the same thing globally in ~/.ddev/homeadditions .) Check out the homeadditions docs for more. mutagen directory Contains mutagen/mutagen.yml , where you can override the default Mutagen configuration . mysql directory Contains optional mysql or mariadb configuration . nginx directory Can be used for add-on nginx snippets . nginx_full directory Contains the nginx configuration used by the web container, which can be customized . postgres directory Contains postgres/postgresql.conf , which can be edited if needed. Remove the #ddev-generated line at the top to take it over. providers directory Contains examples and implementations to demonstrate how the ddev pull command can work with hosting providers . traefik directory Configures the ddev-router when it is using Traefik . web-build directory Can be used to provide a custom Dockerfile for the web container. xhprof directory Contains the xhprof_prepend.php file that can be used to customize xhprof behavior for different types of websites. Hidden Project Files \u00b6 Files beginning with . are hidden because they shouldn\u2019t be fiddled with; most are regenerated, and thus overwritten, on every ddev start : .dbimageBuild directory The generated Dockerfile used to customize the db container on first start. .ddev-docker-compose-base.yaml The base docker-compose file used to describe a project. .ddev-docker-compose-full.yaml The result of preprocessing .ddev-docker-compose-base.yaml using docker-compose config . Mostly it replaces environment variables with their values. .gitignore The .gitignore is generated by DDEV and should generally not be edited or checked in. (It gitignores itself to make sure you don\u2019t check it in.) It\u2019s generated on every ddev start and will change as DDEV versions change, so if you check it in by accident it will always be showing changes that you don\u2019t need to see in git status . .global_commands Temporary directory used to get global commands available inside a project. You shouldn\u2019t ever have to look there. .homeadditions Temporary directory used to consolidate global homeadditions with project-level homeadditions . You shouldn\u2019t ever have to look here. .webimageBuild directory The generated Dockerfile used to customize the web container on first start. Global Files \u00b6 There\u2019s only one global .ddev directory, which lives in your home directory: ~/.ddev ( $HOME/.ddev ). global_config.yaml This YAML file defines your global configuration, which consists of various config settings along with an important project_info key that lets DDEV keep track of the projects you\u2019ve added. bin directory This is where DDEV stores private executable binaries it needs, like mutagen and docker-compose . commands directory Directory for storing DDEV commands that should be available in containers, like npm , artisan , and drush for example. These are organized in subdirectories named for where they\u2019ll be used: db , host , and web . You can add your own custom commands here. homeadditions directory Just like the per-project homeadditions directory, files you add here will automatically be copied into the web container\u2019s home directory. Files from the global homeadditions directory will be copied into every web container\u2019s home directory. Hidden Global Files \u00b6 Again, these files are mostly regenerated on every ddev start so it\u2019s best to leave them alone: .gitignore Prevents files from getting checked in when they shouldn\u2019t be. .router-compose-full.yaml The complete, generated docker-compose directive used for DDEV\u2019s router. .router-compose.yaml The base docker-compose directive used in generating .router-compose-full.yaml . router-compose.*.yaml docker-compose files with the name router-compose.*.yaml can be used to override stanzas in the .router-compose.yaml file. .ssh-auth-compose-full.yaml The complete, generated docker-compose directive used for DDEV\u2019s SSH agent. .ssh-auth-compose.yaml The base docker-compose directive used in generating .ssh-auth-compose-full.yaml . .sshimageBuild Directory used for storing DDEV\u2019s generated Dockerfile used in building the SSH agent image. .update An empty file whose purpose is mysterious and intriguing. .ddev_mutagen_data_directory DDEV uses a global ~/.ddev_mutagen_data_directory for storing Mutagen sync data. Container Architecture \u00b6 It\u2019s easiest to think of DDEV as a set of little networked computers (Docker containers) that are in a different network from your workstation but still reachable from it. When you install or upgrade DDEV you\u2019re mostly installing a single ddev binary. When you use it, it downloads the Docker images it needs, and then starts them based on what\u2019s needed for your projects. The ddev-webserver container (one per project) runs nginx or apache and php-fpm for a single site, so it does all the basic work of a PHP-interpreting web server. The ddev-dbserver container (one per project) handles MariaDB/MySQL/PostgreSQL database management. It can be reached from the web server by the hostname db or with the more explicit name ddev-<projectname>-db . The optional dba container runs phpMyAdmin for projects with MySQL or MariaDB. Additional add-on services may be there for a given project, for example solr or elasticsearch or memcached . Although it\u2019s not common usage, different projects can communicate with each other as described in the FAQ . Now for the two oddball global containers (there\u2019s only one of each): The ddev-router container is a \u201creverse proxy\u201d. It takes incoming HTTP/S requests, looks up the hostname in the incoming URL, and routes it to the correct project\u2019s ddev-webserver . Depending on the project\u2019s configuration with additional_hostnames and additional_fqdns , it can route many different URLs to a single project\u2019s ddev-webserver . If, like most people, you use the named URLs like https://something.ddev.site , your request goes through the router. When you use the 127.0.0.1 URLs, the requests go directly to the ddev-webserver . The ddev-ssh-agent container runs an ssh-agent inside the Docker network so that after run ddev auth ssh all the different projects can use your SSH keys for outgoing requests\u2014like private Composer access or SCP from a remote host. Here\u2019s a basic diagram of how it works inside the Docker network:","title":"How DDEV Works"},{"location":"users/basics/architecture/#how-ddev-works","text":"DDEV is a Go application that stores its configuration in files on your workstation . It uses those blueprints to mount your project files into Docker containers that facilitate the operation of a local development environment. DDEV writes and uses docker-compose files for you, which is a detail you can cheerfully ignore unless you\u2019re Docker-curious or defining your own services .","title":"How DDEV Works"},{"location":"users/basics/architecture/#directory-tour","text":"DDEV stores configuration in two places: a single .ddev directory in your home folder, and a .ddev directory for each project you set up. The global configuration directory is used to keep track of your projects and any of the global settings that apply across all projects. You\u2019ll probably spend more time working with the per-project .ddev directories for their configuration and overrides.","title":"Directory Tour"},{"location":"users/basics/architecture/#container-architecture","text":"It\u2019s easiest to think of DDEV as a set of little networked computers (Docker containers) that are in a different network from your workstation but still reachable from it. When you install or upgrade DDEV you\u2019re mostly installing a single ddev binary. When you use it, it downloads the Docker images it needs, and then starts them based on what\u2019s needed for your projects. The ddev-webserver container (one per project) runs nginx or apache and php-fpm for a single site, so it does all the basic work of a PHP-interpreting web server. The ddev-dbserver container (one per project) handles MariaDB/MySQL/PostgreSQL database management. It can be reached from the web server by the hostname db or with the more explicit name ddev-<projectname>-db . The optional dba container runs phpMyAdmin for projects with MySQL or MariaDB. Additional add-on services may be there for a given project, for example solr or elasticsearch or memcached . Although it\u2019s not common usage, different projects can communicate with each other as described in the FAQ . Now for the two oddball global containers (there\u2019s only one of each): The ddev-router container is a \u201creverse proxy\u201d. It takes incoming HTTP/S requests, looks up the hostname in the incoming URL, and routes it to the correct project\u2019s ddev-webserver . Depending on the project\u2019s configuration with additional_hostnames and additional_fqdns , it can route many different URLs to a single project\u2019s ddev-webserver . If, like most people, you use the named URLs like https://something.ddev.site , your request goes through the router. When you use the 127.0.0.1 URLs, the requests go directly to the ddev-webserver . The ddev-ssh-agent container runs an ssh-agent inside the Docker network so that after run ddev auth ssh all the different projects can use your SSH keys for outgoing requests\u2014like private Composer access or SCP from a remote host. Here\u2019s a basic diagram of how it works inside the Docker network:","title":"Container Architecture"},{"location":"users/basics/cli-usage/","text":"Using the ddev Command \u00b6 Type ddev or ddev -h in a terminal window to see the available DDEV commands. There are commands to configure a project, start, stop, describe, etc. Each command also has help using ddev help <command> or ddev command -h . For example, ddev help snapshot will show help and examples for the snapshot command. ddev config configures a project\u2019s type and docroot. ddev start starts up a project. ddev launch opens a web browser showing the project. ddev list shows current projects and their state. ddev describe gives all the info about the current project. ddev ssh takes you into the web container. ddev exec <command> executes a command inside the web container. ddev stop stops a project and removes its memory usage (but does not throw away any data). ddev poweroff stops all resources that DDEV is using and stops the Mutagen daemon if it\u2019s running. ddev delete destroys the database and DDEV\u2019s knowledge of the project without touching to your code. Lots of Other Commands \u00b6 ddev mysql gives direct access to the MySQL client and ddev psql to the PostgreSQL psql client. ddev sequelpro , ddev sequelace , ddev tableplus , and ddev querious (macOS only, if the app is installed) give access to the Sequel Pro, Sequel Ace, TablePlus or Querious database browser GUIs. ddev heidisql (Windows/WSL2 only, if installed) gives access to the HeidiSQL database browser GUI. ddev import-db and ddev export-db import or export SQL or compressed SQL files. ddev composer runs Composer inside the container. For example, ddev composer install will do a full composer install for you without even needing Composer on your computer. See developer tools . ddev snapshot makes a very fast snapshot of your database that can be easily and quickly restored with ddev snapshot restore . ddev share requires ngrok and at least a free account on ngrok.com so you can let someone in the next office or on the other side of the planet see your project and what you\u2019re working on. ddev share -h gives more info about how to set up ngrok. ddev xdebug enables Xdebug, ddev xdebug off disables it, and ddev xdebug status shows status. ddev xhprof enables xhprof, ddev xhprof off disables it, and ddev xhprof status shows status. ddev drush (Drupal and Backdrop only) gives direct access to the drush CLI. ddev artisan (Laravel only) gives direct access to the Laravel artisan CLI. ddev magento (Magento2 only) gives access to the magento CLI. ddev craft (Craft CMS only) gives access to the craft CLI. ddev yarn and ddev npm give direct access to the yarn and npm CLIs. Node.js, npm, nvm, and Yarn \u00b6 nodejs , npm , nvm and yarn are preinstalled in the web container. You can configure the default value of the installed Node.js version with the nodejs_version option in .ddev/config.yaml or with ddev config --nodejs_version . You can also override that with any value using the built-in nvm in the web container or with ddev nvm , for example ddev nvm install 6 . There is also a ddev yarn command. More Bundled Tools \u00b6 In addition to the commands listed above, there are lots of tools included inside the containers: ddev describe tells how to access MailHog , which captures email in your development environment. ddev describe tells how to use the built-in phpMyAdmin and ddev launch -p gives direct access to it. Composer, Git, Node.js, npm, nvm, and dozens of other tools are installed in the web container, and you can access them via ddev ssh or ddev exec . ddev logs gets you web server logs; ddev logs -s db gets database server logs. sqlite3 and the mysql and psql clients are inside the web container (and mysql or psql client is also in the db container). Exporting a Database \u00b6 You can export a database with ddev export-db , which outputs to stdout or with options to a file: ddev export-db --file = /tmp/db.sql.gz ddev export-db --gzip = false --file = /tmp/db.sql ddev export-db >/tmp/db.sql.gz ddev import-files \u00b6 To import static file assets for a project, such as uploaded images and documents, use the command ddev import-files . This command will prompt you to specify the location of your import asset, then import the assets into the project\u2019s upload directory. To define a custom upload directory, set the upload_dir config option. If no custom upload directory is defined, the default will be used: For Drupal projects, this is the sites/default/files directory. For WordPress projects, this is the wp-content/uploads directory. For TYPO3 projects, this is the fileadmin directory. For Backdrop projects, this is the files . For Magento 1 projects, this is the media directory. For Magento 2 projects, this is the pub/media directory. ddev import-files Provide the path to the directory or archive you wish to import. Please note, if the destination directory exists, it will be replaced with the import assets specified here. Import path: ~/Downloads/files.tar.gz Successfully imported files for drupal8 ddev import-files supports the following file types: .tar , .tar.gz , .tar.xz , .tar.bz2 , .tgz , or .zip . It can also import a directory containing static assets. If you want to use import-files without answering prompts, use the --src flag to provide the path to the import asset. If you\u2019re importing an archive, and wish to specify the path within the archive to extract, you can use the --extract-path flag in conjunction with the --src flag. Example: ddev import-files --src=/tmp/files.tgz See ddev help import-files for more examples. Snapshotting and Restoring a Database \u00b6 The project database is stored in a Docker volume, but can be snapshotted (and later restored) with the ddev snapshot command. A snapshot is automatically taken when you run ddev stop --remove-data . For example: ddev snapshot Creating database snapshot d9_20220107124831-mariadb_10.3.gz Created database snapshot d9_20220107124831-mariadb_10.3.gz ddev snapshot restore d9_20220107124831-mariadb_10.3.gz Stopping db container for snapshot restore of 'd9_20220107124831-mariadb_10.3.gz' ... Restored database snapshot d9_20220107124831-mariadb_10.3.gz Snapshots are stored as gzipped files in the project\u2019s .ddev/db_snapshots directory, and the file created for a snapshot can be renamed as necessary. For example, if you rename the above d9_20220107124831-mariadb_10.3.gz file to working-before-migration-mariadb_10.3.gz , then you can use ddev snapshot restore working-before-migration-mariadb_10.3.gz . (The description of the database type and version\u2014 mariadb_10.3 , for example\u2014must remain intact.) To restore the latest snapshot add the --latest flag ( ddev snapshot restore --latest ). List snapshots for an existing project with ddev snapshot --list . (Add the --all option for an exhaustive list; ddev snapshot --list --all .) You can remove all of them with ddev snapshot --cleanup , or remove a single snapshot with ddev snapshot --cleanup --name <snapshot-name> . Tip The default 120-second timeout may be inadequate for restores with very large snapshots or slower systems. You can increase this timeout by setting default_container_timeout to a higher value. A timeout doesn\u2019t necessarily mean the restore failed; you can watch the snapshot restore complete by running ddev logs -s db . Interacting with Your Project \u00b6 DDEV provides several commands to facilitate interacting with your project in the development environment. These commands can be run within the working directory of your project while the project is running in DDEV. Executing Commands in Containers \u00b6 The ddev exec command allows you to run shell commands in the container for a DDEV service. By default, commands are executed on the web service container, in the docroot path of your project. This allows you to use the developer tools included in the web container . For example, to run the ls command in the web container, you would run ddev exec ls or ddev . ls . To run a shell command in the container for a different service, use the --service (or -s ) flag at the beginning of your exec command to specify the service the command should be run against. For example, to run the MySQL client in the database, container, you would run ddev exec --service db mysql . To specify the directory in which a shell command will be run, use the --dir flag. For example, to see the contents of the /usr/bin directory, you would run ddev exec --dir /usr/bin ls . To run privileged commands, sudo can be passed into ddev exec . For example, to update the container\u2019s apt package lists, use ddev exec sudo apt-get update . Commands can also be executed using the shorter ddev . <cmd> alias. Normally, ddev exec commands are executed in the container using Bash, which means that environment variables and redirection and pipes can be used. For example, a complex command like ddev exec 'ls -l ${DDEV_FILES_DIR} | grep x >/tmp/junk.out' will be interpreted by Bash and will work. However, there are cases where Bash introduces too much complexity and it\u2019s best to just run the command directly. In those cases, something like ddev exec --raw ls -l \"dir1\" \"dir2\" may be useful. With --raw , the ls command is executed directly instead of the full command being interpreted by Bash. But you cannot use environment variables, pipes, redirection, etc. SSH Into Containers \u00b6 The ddev ssh command opens an interactive Bash or sh shell session to the container for a DDEV service. The web service is connected by default, and the session can be ended by typing exit . To connect to another service, use the --service flag to specify the service you want to connect to. For example, to connect to the database container, you would run ddev ssh --service db . To specify the destination directory, use the --dir flag. For example, to connect to the database container and be placed into the /home directory, you would run ddev ssh --service db --dir /home . You can also use your personal SSH keys within the web container. Run ddev auth ssh to add the keys from your ~/.ssh directory and provide a passphrase, and those keys will be usable from within the web container. You generally only have to ddev auth ssh one time per computer reboot. This is a very popular approach for accessing private Composer repositories, or for using drush aliases against remote servers. ddev logs \u00b6 The ddev logs command allows you to easily view error logs from the web container (both nginx/Apache and php-fpm logs are concatenated). To follow the logs in real time, run ddev logs -f . When you\u2019re done, press CTRL + C to exit the log trail. Similarly, ddev logs -s db will show logs from a running or stopped database container. Stopping a Project \u00b6 To remove a project\u2019s containers, run ddev stop in the project\u2019s working directory. To remove any running project\u2019s containers regardless of context, specify the project name as an argument: ddev stop <projectname> . ddev stop is not destructive. It removes the Docker containers but does not remove the database for the project, and does nothing to your code. This allows you to have many configured projects with databases loaded without wasting Docker containers on unused projects. ddev stop does not affect the project code base and files. To remove the imported database for a project, use the flag --remove-data , as in ddev stop --remove-data . This command will destroy both the containers and the imported database contents.","title":"Using the `ddev` Command"},{"location":"users/basics/cli-usage/#using-the-ddev-command","text":"Type ddev or ddev -h in a terminal window to see the available DDEV commands. There are commands to configure a project, start, stop, describe, etc. Each command also has help using ddev help <command> or ddev command -h . For example, ddev help snapshot will show help and examples for the snapshot command. ddev config configures a project\u2019s type and docroot. ddev start starts up a project. ddev launch opens a web browser showing the project. ddev list shows current projects and their state. ddev describe gives all the info about the current project. ddev ssh takes you into the web container. ddev exec <command> executes a command inside the web container. ddev stop stops a project and removes its memory usage (but does not throw away any data). ddev poweroff stops all resources that DDEV is using and stops the Mutagen daemon if it\u2019s running. ddev delete destroys the database and DDEV\u2019s knowledge of the project without touching to your code.","title":"Using the ddev Command"},{"location":"users/basics/cli-usage/#lots-of-other-commands","text":"ddev mysql gives direct access to the MySQL client and ddev psql to the PostgreSQL psql client. ddev sequelpro , ddev sequelace , ddev tableplus , and ddev querious (macOS only, if the app is installed) give access to the Sequel Pro, Sequel Ace, TablePlus or Querious database browser GUIs. ddev heidisql (Windows/WSL2 only, if installed) gives access to the HeidiSQL database browser GUI. ddev import-db and ddev export-db import or export SQL or compressed SQL files. ddev composer runs Composer inside the container. For example, ddev composer install will do a full composer install for you without even needing Composer on your computer. See developer tools . ddev snapshot makes a very fast snapshot of your database that can be easily and quickly restored with ddev snapshot restore . ddev share requires ngrok and at least a free account on ngrok.com so you can let someone in the next office or on the other side of the planet see your project and what you\u2019re working on. ddev share -h gives more info about how to set up ngrok. ddev xdebug enables Xdebug, ddev xdebug off disables it, and ddev xdebug status shows status. ddev xhprof enables xhprof, ddev xhprof off disables it, and ddev xhprof status shows status. ddev drush (Drupal and Backdrop only) gives direct access to the drush CLI. ddev artisan (Laravel only) gives direct access to the Laravel artisan CLI. ddev magento (Magento2 only) gives access to the magento CLI. ddev craft (Craft CMS only) gives access to the craft CLI. ddev yarn and ddev npm give direct access to the yarn and npm CLIs.","title":"Lots of Other Commands"},{"location":"users/basics/cli-usage/#nodejs-npm-nvm-and-yarn","text":"nodejs , npm , nvm and yarn are preinstalled in the web container. You can configure the default value of the installed Node.js version with the nodejs_version option in .ddev/config.yaml or with ddev config --nodejs_version . You can also override that with any value using the built-in nvm in the web container or with ddev nvm , for example ddev nvm install 6 . There is also a ddev yarn command.","title":"Node.js, npm, nvm, and Yarn"},{"location":"users/basics/cli-usage/#more-bundled-tools","text":"In addition to the commands listed above, there are lots of tools included inside the containers: ddev describe tells how to access MailHog , which captures email in your development environment. ddev describe tells how to use the built-in phpMyAdmin and ddev launch -p gives direct access to it. Composer, Git, Node.js, npm, nvm, and dozens of other tools are installed in the web container, and you can access them via ddev ssh or ddev exec . ddev logs gets you web server logs; ddev logs -s db gets database server logs. sqlite3 and the mysql and psql clients are inside the web container (and mysql or psql client is also in the db container).","title":"More Bundled Tools"},{"location":"users/basics/cli-usage/#exporting-a-database","text":"You can export a database with ddev export-db , which outputs to stdout or with options to a file: ddev export-db --file = /tmp/db.sql.gz ddev export-db --gzip = false --file = /tmp/db.sql ddev export-db >/tmp/db.sql.gz","title":"Exporting a Database"},{"location":"users/basics/cli-usage/#ddev-import-files","text":"To import static file assets for a project, such as uploaded images and documents, use the command ddev import-files . This command will prompt you to specify the location of your import asset, then import the assets into the project\u2019s upload directory. To define a custom upload directory, set the upload_dir config option. If no custom upload directory is defined, the default will be used: For Drupal projects, this is the sites/default/files directory. For WordPress projects, this is the wp-content/uploads directory. For TYPO3 projects, this is the fileadmin directory. For Backdrop projects, this is the files . For Magento 1 projects, this is the media directory. For Magento 2 projects, this is the pub/media directory. ddev import-files Provide the path to the directory or archive you wish to import. Please note, if the destination directory exists, it will be replaced with the import assets specified here. Import path: ~/Downloads/files.tar.gz Successfully imported files for drupal8 ddev import-files supports the following file types: .tar , .tar.gz , .tar.xz , .tar.bz2 , .tgz , or .zip . It can also import a directory containing static assets. If you want to use import-files without answering prompts, use the --src flag to provide the path to the import asset. If you\u2019re importing an archive, and wish to specify the path within the archive to extract, you can use the --extract-path flag in conjunction with the --src flag. Example: ddev import-files --src=/tmp/files.tgz See ddev help import-files for more examples.","title":"ddev import-files"},{"location":"users/basics/cli-usage/#snapshotting-and-restoring-a-database","text":"The project database is stored in a Docker volume, but can be snapshotted (and later restored) with the ddev snapshot command. A snapshot is automatically taken when you run ddev stop --remove-data . For example: ddev snapshot Creating database snapshot d9_20220107124831-mariadb_10.3.gz Created database snapshot d9_20220107124831-mariadb_10.3.gz ddev snapshot restore d9_20220107124831-mariadb_10.3.gz Stopping db container for snapshot restore of 'd9_20220107124831-mariadb_10.3.gz' ... Restored database snapshot d9_20220107124831-mariadb_10.3.gz Snapshots are stored as gzipped files in the project\u2019s .ddev/db_snapshots directory, and the file created for a snapshot can be renamed as necessary. For example, if you rename the above d9_20220107124831-mariadb_10.3.gz file to working-before-migration-mariadb_10.3.gz , then you can use ddev snapshot restore working-before-migration-mariadb_10.3.gz . (The description of the database type and version\u2014 mariadb_10.3 , for example\u2014must remain intact.) To restore the latest snapshot add the --latest flag ( ddev snapshot restore --latest ). List snapshots for an existing project with ddev snapshot --list . (Add the --all option for an exhaustive list; ddev snapshot --list --all .) You can remove all of them with ddev snapshot --cleanup , or remove a single snapshot with ddev snapshot --cleanup --name <snapshot-name> . Tip The default 120-second timeout may be inadequate for restores with very large snapshots or slower systems. You can increase this timeout by setting default_container_timeout to a higher value. A timeout doesn\u2019t necessarily mean the restore failed; you can watch the snapshot restore complete by running ddev logs -s db .","title":"Snapshotting and Restoring a Database"},{"location":"users/basics/cli-usage/#interacting-with-your-project","text":"DDEV provides several commands to facilitate interacting with your project in the development environment. These commands can be run within the working directory of your project while the project is running in DDEV.","title":"Interacting with Your Project"},{"location":"users/basics/cli-usage/#stopping-a-project","text":"To remove a project\u2019s containers, run ddev stop in the project\u2019s working directory. To remove any running project\u2019s containers regardless of context, specify the project name as an argument: ddev stop <projectname> . ddev stop is not destructive. It removes the Docker containers but does not remove the database for the project, and does nothing to your code. This allows you to have many configured projects with databases loaded without wasting Docker containers on unused projects. ddev stop does not affect the project code base and files. To remove the imported database for a project, use the flag --remove-data , as in ddev stop --remove-data . This command will destroy both the containers and the imported database contents.","title":"Stopping a Project"},{"location":"users/basics/commands/","text":"Commands \u00b6 You can tell DDEV what to do by running its commands. This page details each of the available commands and their options, or flags. Run DDEV without any commands or flags to see this list in your terminal: \u2192 ddev Create and maintain a local web development environment. Docs: https://ddev.readthedocs.io Support: https://ddev.readthedocs.io/en/stable/users/support Usage: ddev [command] Available Commands: auth A collection of authentication commands blackfire Enable or disable blackfire.io profiling (global shell web container command) clean Removes items ddev has created composer Executes a composer command within the web container ... Use ddev help to learn more about a specific command, like this example for ddev describe : \u2192 ddev help describe Get a detailed description of a running ddev project. Describe provides basic information about a ddev project, including its name, location, url, and status. It also provides details for MySQL connections, and connection information for additional services like MailHog and phpMyAdmin. You can run 'ddev describe' from a project directory to describe that project, or you can specify a project to describe by running 'ddev describe <projectname>'. Usage: ddev describe [projectname] [flags] Aliases: describe, status, st, desc Examples: ddev describe ddev describe <projectname> ddev status ddev st Flags: -h, --help help for describe Global Flags: -j, --json-output If true, user-oriented output will be in JSON format. Global Flags \u00b6 Two flags are available for every command: --help or -h : Outputs more information about a command rather than executing it. --json-output or -j : Format user-oriented output in JSON. auth \u00b6 Authentication commands. auth ssh \u00b6 Add SSH key authentication to the ddev-ssh-agent container. Example: # Add your SSH keys to the SSH agent container ddev auth ssh Flags: --ssh-key-path , -d : Full path to SSH key directory. blackfire \u00b6 Enable or disable Blackfire profiling (global shell web container command). # Display Blackfire profiling status ddev blackfire status # Start Blackfire profiling ddev blackfire on # Stop Blackfire profiling ddev blackfire off Tip There are synonyms for the on and off arguments that have the exact same effect: on : start , enable , true off : stop , disable , false clean \u00b6 Removes items DDEV has created. (See Uninstalling DDEV .) Flags: --all , -a : Clean all DDEV projects. --dry-run : Run the clean command without deleting. Example: # Preview cleaning all projects without actually removing anything ddev clean --dry-run --all # Clean all projects ddev clean --all # Clean my-project and my-other-project ddev clean my-project my-other-project composer \u00b6 Executes a Composer command within the web container. Example: # Install Composer packages ddev composer install config \u00b6 Create or modify a DDEV project\u2019s configuration in the current directory. You can also set these via YAML! These settings, plus a few more, can be set by editing stored Config Options . Example: # Start interactive project configuration ddev config # Configure a Drupal 8 project with a `web` document root ddev config --docroot = web --project-type = drupal8 Flags: --additional-fqdns : Comma-delimited list of project FQDNs. --additional-hostnames : Comma-delimited list of project hostnames. --auto : Automatically run config without prompting. (default true ) --bind-all-interfaces : Bind host ports on all interfaces, not just on localhost network interface. --composer-root : Overrides the default Composer root directory for the web service. --composer-root-default : Unsets a web service Composer root directory override. --composer-version : Specify override for Composer version in the web container. This may be \"\" , \"1\" , \"2\" , \"2.2\" , \"stable\" , \"preview\" , \"snapshot\" , or a specific version. --create-docroot : Create the docroot if it doesn\u2019t exist. --database : Specify the database type:version to use. Defaults to mariadb:10.4 . --db-image : Sets the db container image. --db-image-default : Sets the default db container image for this DDEV version. --db-working-dir : Overrides the default working directory for the db service. --db-working-dir-default : Unsets a db service working directory override. --dba-image : Sets the dba container image. --dba-image-default : Sets the default dba container image for this DDEV version. --dba-working-dir : Overrides the default working directory for the dba service. --dba-working-dir-default : Unsets a dba service working directory override. --dbimage-extra-packages : A comma-delimited list of Debian packages that should be added to db container when the project is started. --default-container-timeout : Default time in seconds that DDEV waits for all containers to become ready on start. (default 120 ) --disable-settings-management : Prevent DDEV from creating or updating CMS settings files. --docroot : Provide the relative docroot of the project, like docroot or htdocs or web . (defaults to empty, the current directory) --fail-on-hook-fail : Decide whether ddev start should be interrupted by a failing hook. --host-db-port : The db container\u2019s localhost-bound port. --host-dba-port : The dba (phpMyAdmin) container\u2019s localhost-bound port, if exposed via bind-all-interfaces. --host-https-port : The web container\u2019s localhost-bound HTTPS port. --host-webserver-port : The web container\u2019s localhost-bound port. --http-port : The router HTTP port for this project. --https-port : The router HTTPS port for this project. --image-defaults : Sets the default web, db, and dba container images. --mailhog-https-port : Router port to be used for MailHog HTTPS access. --mailhog-port : Router port to be used for MailHog HTTP access. --mutagen-enabled : Enable Mutagen asynchronous update of project in web container. --nfs-mount-enabled : Enable NFS mounting of project in container. --ngrok-args : Provide extra args to ngrok in ddev share . --no-project-mount : Whether or not to skip mounting project code into the web container. --nodejs-version : Specify the Node.js version to use if you don\u2019t want the default Node.js 16. --omit-containers : Comma-delimited list of container types that should not be started when the project is started. --php-version : PHP version that will be enabled in the web container. --phpmyadmin-https-port : Router port to be used for phpMyAdmin (dba) HTTPS container access. --phpmyadmin-port : Router port to be used forphpMyAdmin (dba) HTTP container access. --project-name : Provide the project name of project to configure. (normally the same as the last part of directory name) --project-tld : Set the top-level domain to be used for projects. (default \"ddev.site\" ) --project-type : Provide the project type: backdrop , drupal10 , drupal6 , drupal7 , drupal8 , drupal9 , laravel , magento , magento2 , php , shopware6 , typo3 , wordpress . This is autodetected and this flag is necessary only to override the detection. --show-config-location : Output the location of the config.yaml file if it exists, or error that it doesn\u2019t exist. --timezone : Specify timezone for containers and PHP, like Europe/London or America/Denver or GMT or UTC . --upload-dir : Sets the project\u2019s upload directory, the destination directory of the import-files command. --use-dns-when-possible : Use DNS for hostname resolution instead of /etc/hosts when possible. (default true ) --web-environment : Set the environment variables in the web container: --web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\" --web-environment-add : Append environment variables to the web container: --web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\" --web-image : Sets the web container image. --web-image-default : Sets the default web container image for this DDEV version. --web-working-dir : Overrides the default working directory for the web service. --web-working-dir-default : Unsets a web service working directory override. --webimage-extra-packages : A comma-delimited list of Debian packages that should be added to web container when the project is started. --webserver-type : Sets the project\u2019s desired webserver type: nginx-fpm or apache-fpm . --working-dir-defaults : Unsets all service working directory overrides. --xdebug-enabled : Whether or not Xdebug is enabled in the web container. config global \u00b6 Change global configuration. # Opt out of sharing anonymized usage information ddev config global --instrumentation-opt-in = false # Skip phpMyAdmin and the SSH agent for all projects ddev config global --omit-containers = dba,ddev-ssh-agent --auto-restart-containers : If true , automatically restart containers after a reboot or Docker restart. --disable-http2 : Optionally disable http2 in ddev-router ; ddev config global --disable-http2 or ddev config global --disable-http2=false . --fail-on-hook-fail : If true, ddev start will fail when a hook fails. --instrumentation-opt-in : instrumentation-opt-in=true . --internet-detection-timeout-ms : Increase timeout when checking internet timeout, in milliseconds. (default 3000 ) --letsencrypt-email : Email associated with Let\u2019s Encrypt; ddev global --letsencrypt-email=me@example.com . --mutagen-enabled : If true , web container will use Mutagen caching/asynchronous updates. --nfs-mount-enabled : Enable NFS mounting on all projects globally. --no-bind-mounts : If true , don\u2019t use bind-mounts. Useful for environments like remote Docker where bind-mounts are impossible. (default true ) --omit-containers : For example, --omit-containers=dba,ddev-ssh-agent . --required-docker-compose-version : Override default docker-compose version. --router-bind-all-interfaces : router-bind-all-interfaces=true . --simple-formatting : If true , use simple formatting and no color for tables. --table-style : Table style for list and describe, see ~/.ddev/global_config.yaml for values. --use-docker-compose-from-path : If true , use docker-compose from path instead of private ~/.ddev/bin/docker-compose . (default true ) --use-hardened-images : If true , use more secure 'hardened' images for an actual internet deployment. --use-letsencrypt : Enables experimental Let\u2019s Encrypt integration; ddev global --use-letsencrypt or ddev global --use-letsencrypt=false . --web-environment : Set the environment variables in the web container: --web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\" --web-environment-add : Append environment variables to the web container: --web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\" craft \u00b6 Run a Craft CMS command inside the web container (global shell web container command). Example: # Run pending Craft migrations and apply pending project config changes ddev craft up debug \u00b6 Aliases: d , dbg . A collection of debugging commands, often useful for troubleshooting . debug capabilities \u00b6 Show capabilities of this version of DDEV. Example: # List capabilities of the current project ddev debug capabilities # List capabilities of `my-project` ddev debug capabilities my-project debug check-db-match \u00b6 Verify that the database in the db server matches the configured type and version . Example: # Check whether project\u2019s running database matches configuration ddev debug check-db-match debug compose-config \u00b6 Prints the current project\u2019s docker-compose configuration. Example: # Print docker-compose config for the current project ddev debug compose-config # Print docker-compose config for `my-project` ddev debug compose-config my-project debug configyaml \u00b6 Prints the project config.*.yaml usage. Example: # Print config for the current project ddev debug configyaml # Print config specifically for `my-project` ddev debug configyaml my-project debug dockercheck \u00b6 Diagnose DDEV Docker/Colima setup. Example: # Output contextual details for the Docker provider ddev debug dockerchck debug download-images \u00b6 Download all images required by DDEV. Example: # Download DDEV\u2019s Docker images ddev debug download-images debug fix-commands \u00b6 Refreshes custom command definitions without running ddev start . Example: # Refresh the current project\u2019s custom commands ddev debug fix-commands debug get-volume-db-version \u00b6 Get the database type and version found in the ddev-dbserver database volume, which may not be the same as the configured database type and version . Example: # Print the database volume\u2019s engine and version ddev debug get-volume-db-version debug migrate-database \u00b6 Migrate a MySQL or MariaDB database to a different dbtype:dbversion . Works only with MySQL and MariaDB, not with PostgreSQL. Example: # Migrate the current project\u2019s database to MariaDB 10.7 ddev debug migrate-database mariadb:10.7 debug mutagen \u00b6 Allows access to any Mutagen command . Example: # Run Mutagen\u2019s `sync list` command ddev debug mutagen sync list debug nfsmount \u00b6 Checks to see if NFS mounting works for current project. Example: # See if NFS is working as expected for the current project ddev debug nfsmount debug refresh \u00b6 Refreshes the project\u2019s Docker cache. Example: # Refresh the current project\u2019s Docker cache ddev debug refresh debug router-nginx-config \u00b6 Prints the router\u2019s nginx config . Example: # Output router nginx configuration ddev debug router-nginx-config debug test \u00b6 Run diagnostics using the embedded test script . Example: # Run DDEV\u2019s diagnostic suite ddev debug test delete \u00b6 Remove all information, including the database, for an existing project. Flags: --all , -a : Delete all projects. --clean-containers : Clean up all DDEV docker containers not required by this version of DDEV. (default true) --omit-snapshot , -O : Omit/skip database snapshot. --yes , -y : Skip confirmation prompt. Example: # Delete my-project and my-other-project ddev delete my-project my-other-project # Delete the current project without taking a snapshot or confirming ddev delete --omit-snapshot --yes delete images \u00b6 With with --all , it deletes all drud/ddev-* Docker images. Flags: --all , -a : If set, deletes all Docker images created by DDEV. --yes , -y : Skip confirmation prompt. Example: # Delete images ddev delete images # Delete images and skip confirmation ddev delete images -y # Delete all DDEV-created images ddev delete images --all describe \u00b6 Aliases: status , st , desc . Get a detailed description of a running DDEV project. Example: # Display details for the current project ddev describe # Display details for my-project ddev describe my-project exec \u00b6 Alias: . . Execute a shell command in the container for a service. Uses the web service by default. To run your command in a different service container, run ddev exec --service <service> <cmd> . Use the --raw flag if you\u2019d like to run a raw, uninterpreted command in a container. Flags: --dir , -d : Defines the execution directory within the container. --raw : Use raw exec (do not interpret with Bash inside container). (default true ) --service , -s : Defines the service to connect to. (e.g. web , db ) (default \"web\" ) Example: # List the web container\u2019s docroot contents ddev exec ls /var/www/html # List the web container\u2019s vendor directory contents ddev exec --dir /var/www/html/vendor ls # Output a long, recursive list of the files in the web container ddev exec --raw -- ls -lR # Say \u201chi\u201d from the phpMyAdmin container ddev exec --service dba echo hi export-db \u00b6 Dump a database to a file or to stdout. Flags: --bzip2 : Use bzip2 compression. --file , -f : Provide the path to output the dump. --gzip , -z : Use gzip compression. (default true ) --target-db , -d : If provided, target-db is alternate database to export. (default \"db\" ) --xz : Use xz compression. Example: # Dump and compress the current project\u2019s database to `/tmp/db.sql.gz` ddev export-db --file = /tmp/db.sql.gz # Dump the current project\u2019s database, without compressing it, to `/tmp/db.sql` ddev export-db --gzip = false --file /tmp/db.sql # Dump and compress the current project\u2019s `foo` database instead of `db` ddev export-db --target-db = foo --file = /tmp/db.sql.gz # Output the current project\u2019s database and use `>` to write to `/tmp/db.sql.gz` ddev export-db > /tmp/db.sql.gz # Dump my-project\u2019s database, without compressing it, to `/tmp/my-project.sql` ddev export-db my-project --gzip = false --file = /tmp/my-project.sql get \u00b6 Download an add-on (service, provider, etc.). Flags: --all : List unofficial and official add-ons. (default true ) --list : List official add-ons. (default true ) --verbose or -v : Output verbose error information with bash set -x (default false ) Example: # List official add-ons ddev get --list # List official and third-party add-ons ddev get --list --all # Download the official Redis add-on ddev get drud/ddev-redis # Get debug info about `ddev get` failure ddev get drud/ddev-redis --verbose # Download the Drupal 9 Solr add-on from its v0.0.5 release tarball ddev get https://github.com/drud/ddev-drupal9-solr/archive/refs/tags/v0.0.5.tar.gz # Copy an add-on available in another directory ddev get /path/to/package # Copy an add-on from a tarball in another directory ddev get /path/to/tarball.tar.gz heidisql \u00b6 Open HeidiSQL with the current project\u2019s database (global shell host container command). This command is only available if TablePlus.app is installed as C:\\Program Files\\HeidiSQL\\Heidisql.exe . Example: # Open the current project\u2019s database in HeidiSQL ddev heidisql help \u00b6 Help about any command. Example: # Illuminate the virtues of the `describe` command ddev help describe hostname \u00b6 Manage your hostfile entries. Flags: --remove , -r : Remove the provided host name - ip correlation. --remove-inactive , -R : Remove host names of inactive projects. Example: ddev hostname somesite.ddev.local 127 .0.0.1 import-db \u00b6 Import a SQL file into the project. Flags: --extract-path : If provided asset is an archive, provide the path to extract within the archive. --no-drop : Set if you do NOT want to drop the db before importing. --progress , -p : Display a progress bar during import. (default true ) --src , -f : Provide the path to a SQL dump in .sql , .tar , .tar.gz , .tgz , .bz2 , .xx , or .zip format. --target-db , -d : If provided, target-db is alternate database to import into. (default \"db\" ) Example: # Start the interactive import utility ddev import-db # Import the `.tarballs/db.sql` dump to the project database ddev import-db --src = .tarballs/db.sql # Import the compressed `.tarballs/db.sql.gz` dump to the project database ddev import-db --src = .tarballs/db.sql.gz # Import the compressed `.tarballs/db.sql.gz` dump to a `newdb` database ddev import-db --target-db = newdb --src = .tarballs/db.sql.gz # Import the `db.sql` dump to the project database ddev import-db <db.sql # Import the `db.sql` dump to a `newdb` database ddev import-db newdb <db.sql # Uncompress `db.sql.gz` and pipe the result to the `import-db` command gzip -dc db.sql.gz | ddev import-db import-files \u00b6 Pull the uploaded files directory of an existing project to the default public upload directory of your project. Flags: --extract-path : If provided asset is an archive, optionally provide the path to extract within the archive. --src : Provide the path to the source directory or archive to import. (Archive can be .tar , .tar.gz , .tar.xz , .tar.bz2 , .tgz , or .zip .) Example: # Extract+import `/path/to/files.tar.gz` to the project\u2019s upload directory ddev import-files --src = /path/to/files.tar.gz # Import `/path/to/dir` contents to the project\u2019s upload directory ddev import-files --src = /path/to/dir launch \u00b6 Launch a browser with the current site (global shell host container command). Flags: --phpmyadmin , -p : Open phpMyAdmin. --mailhog , -m : Open MailHog. Example: # Open your project\u2019s base URL in the default browser ddev launch # Open MailHog in the default browser ddev launch --mailhog # Open your project\u2019s base URL appended with `temp/phpinfo.php` ddev launch temp/phpinfo.php list \u00b6 Aliases: l , ls . List projects. Flags: --active-only , -A : If set, only currently active projects will be displayed. --continuous : If set, project information will be emitted until the command is stopped. --continuous-sleep-interval , -I : Time in seconds between ddev list --continuous output lists. (default 1 ) --wrap-table , -W : Display table with wrapped text if required. Example: # List all projects ddev list # List all running projects ddev list --active-only logs \u00b6 Get the logs from your running services. Flags: --follow , -f : Follow the logs in real time. --service , -s : Defines the service to retrieve logs from (e.g. web , db ). (default \"web\" ) --tail : How many lines to show. --time , -t : Add timestamps to logs. Example: # Display recent logs from the current project\u2019s web server ddev logs # Stream logs from the current project\u2019s web server in real time ddev logs -f # Display recent logs from the current project\u2019s database server ddev logs -s db # Display recent logs from my-project\u2019s database server ddev logs -s db my-project mutagen \u00b6 Commands for Mutagen status and sync, etc. mutagen logs \u00b6 Show Mutagen logs for debugging. Flags: --verbose : Show full Mutagen logs. Example: # Stream Mutagen\u2019s logs in real time ddev mutagen logs # Stream Mutagen\u2019s more detailed logs in real time ddev mutagen logs --verbose mutagen monitor \u00b6 Monitor Mutagen status. Example: # Start Mutagen\u2019s sync process and monitor its status in real time ddev mutagen sync && ddev mutagen monitor mutagen reset \u00b6 Stops a project and removes the Mutagen Docker volume. # Reset Mutagen data for the current project ddev mutagen reset # Reset Mutagen data for my-project ddev mutagen reset my-project mutagen status \u00b6 Shows Mutagen sync status. Flags: --verbose , -l : Extended/verbose output for Mutagen status. Example: # Display Mutagen sync status for the current project ddev mutagen status # Display Mutagen sync status for my-project ddev mutagen status my-project mutagen sync \u00b6 Explicit sync for Mutagen. Flags: --verbose : Extended/verbose output for Mutagen status. Example: # Initiate Mutagen sync for the current project ddev mutagen sync # Initiate Mutagen sync for my-project ddev mutagen sync my-project mysql \u00b6 Run MySQL client in the database container (global shell db container command). Example: # Run the database container\u2019s MySQL client ddev mysql # Run the database container\u2019s MySQL client as root user ddev mysql -uroot -proot # Pipe the `SHOW TABLES;` command to the MySQL client to see a list of tables echo 'SHOW TABLES;' | ddev mysql npm \u00b6 Run npm inside the web container (global shell web container command). Example: # Install JavaScript packages using `npm` ddev npm install # Update JavaScript packages using `npm` ddev npm update nvm \u00b6 Run nvm inside the web container (global shell web container command). Example: # Use `nvm` to switch to Node.js v18 ddev nvm install 18 pause \u00b6 Aliases: sc , stop-containers . Uses docker stop to pause/stop the containers belonging to a project. Tip This leaves the containers instantiated instead of removing them like ddev stop does. Flags: --all , -a : Pause all running projects. Example: # Pause the current project\u2019s containers ddev pause # Pause my-project\u2019s containers ddev pause my-project # Pause all projects ddev pause --all php \u00b6 Run php inside the web container (global shell web container command). Example: # Output the web container\u2019s PHP version ddev php --version poweroff \u00b6 Alias: powerdown . Completely stop all projects and containers. Tip This is the equivalent of running ddev stop -a --stop-ssh-agent . Example: # Stop all projects and containers ddev poweroff pull \u00b6 Pull files and database using a configured provider plugin . Flags: --skip-confirmation , -y : Skip confirmation step. --skip-db : Skip pulling database archive. --skip-files : Skip pulling file archive. --skip-import : Download archive(s) without importing than. Example: # Pull a backup from the configured Pantheon project to use locally ddev pull pantheon # Pull a backup from the configured Platform.sh project to use locally ddev pull platform # Pull a backup from the configured Pantheon project without confirming ddev pull pantheon -y # Pull the Platform.sh database archive *only* without confirming ddev pull platform --skip-files -y # Pull the localfile integration\u2019s files *only* without confirming ddev pull localfile --skip-db -y push \u00b6 Push files and database using a configured provider plugin . Example: # Push local files and database to the configured Pantheon project ddev push pantheon # Push local files and database to the configured Platform.sh project ddev push platform # Push files and database to Pantheon without confirming ddev push pantheon -y # Push database only to Platform.sh without confirming ddev push platform --skip-files -y # Push files only to Acquia without confirming ddev push acquia --skip-db -y querious \u00b6 Open Querious with the current project\u2019s MariaDB or MySQL database (global shell host container command). This is only available if Querious.app is installed as /Applications/Querious.app , and only for projects with mysql or mariadb databases. Example: # Open the current project\u2019s database in Querious ddev querious restart \u00b6 Restart one or several projects. Flags: --all , -a : Restart all projects. Example: # Restart the current project ddev restart # Restart my-project and my-other-project ddev restart my-project my-other-project # Restart all projects ddev restart --all self-upgrade \u00b6 Output instructions for updating or upgrading DDEV. The command doesn\u2019t perform the upgrade, but tries to provide instructions relevant to your installation. Must be executed from the project context. Example: \u2192 ddev self-upgrade DDEV appears to have been installed with install_ddev.sh, you can run that script again to update. curl -fsSL https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash sequelace \u00b6 Open SequelAce with the current project\u2019s database (global shell host container command). This command is only available if Sequel Ace.app is installed as /Applications/Sequel ace.app , and only for projects with mysql or mariadb databases. Example: # Open the current project\u2019s database in SequelAce ddev sequelace sequelpro \u00b6 Open SequelPro with the current project\u2019s database (global shell host container command). This command is only available if Sequel Pro.app is installed as /Applications/Sequel pro.app , and only for projects with mysql or mariadb databases. *Note that Sequel Pro is considered abandoned, does not work with mysql:8.0 ; other solutions like Sequel Ace, Querious, Tableplus are preferred. Example: # Open the current project\u2019s database in SequelPro ddev sequelpro service \u00b6 Add or remove, enable or disable extra services . service disable \u00b6 Disable a service. Example: # Disable the Solr service ddev service disable solr service enable \u00b6 Enable a service. Example: # Enable the Solr service ddev service enable solr share \u00b6 Share the current project on the internet via ngrok . Tip Some ngrok arguments are supported via CLI, but any ngrok flag can be specified in the ngrok_args config setting . Flags: --subdomain : Subdomain to use with paid ngrok account. Example: # Share the current project with ngrok ddev share # Share the current project with ngrok, using subdomain `foo.*` ddev share --subdomain foo # Share the current project using ngrok\u2019s basic-auth argument ddev share --basic-auth username:pass1234 # Share my-project with ngrok ddev share my-project snapshot \u00b6 Create a database snapshot for one or more projects. This uses xtrabackup or mariabackup to create a database snapshot in the .ddev/db_snapshots directory. These are compatible with server backups using the same tools and can be restored with the snapshot restore command. See Snapshotting and Restoring a Database for more detail, or Database Management for more on working with databases in general. Flags: --all , -a : Snapshot all projects. (Will start stopped or paused projects.) --cleanup , -C : Cleanup snapshots. --list , -l : List snapshots. --name , -n : Provide a name for the snapshot. --yes , -y : Skip confirmation prompt. Example: # Take a database snapshot for the current project ddev snapshot # Take a database snapshot for the current project, named `my_snapshot_name` ddev snapshot --name my_snapshot_name # Take a snapshot for the current project, cleaning up existing snapshots ddev snapshot --cleanup # Take a snapshot for the current project, cleaning existing snapshots and skipping prompt ddev snapshot --cleanup -y # List the current project\u2019s snapshots ddev snapshot --list # Take a snapshot for each project ddev snapshot --all snapshot restore \u00b6 Restores a database snapshot from the .ddev/db_snapshots directory. Flags: --latest : Use the latest snapshot. Example: # Restore the most recent snapshot ddev snapshot restore --latest # Restore the previously-taken `my_snapshot_name` snapshot ddev snapshot restore my_snapshot_name ssh \u00b6 Starts a shell session in a service container. Uses the web service by default. Flags: --dir , -d : Defines the destination directory within the container. --service , -s : Defines the service to connect to. (default \"web\" ) Example: # SSH into the current project\u2019s web container ddev ssh # SSH into the current project\u2019s database container ddev ssh -s db # SSH into the web container for my-project ddev ssh my-project # SSH into the docroot of the current project\u2019s web container ddev ssh -d /var/www/html start \u00b6 Start a DDEV project. Flags: --all , -a : Start all projects. --select , -s : Interactively select a project to start. --skip-confirmation , -y : Skip any confirmation steps. Example: # Start the current project ddev start # Start my-project and my-other-project ddev start my-project my-other-project # Start all projects ddev start --all stop \u00b6 Aliases: rm , remove . Stop and remove the containers of a project. Does not lose or harm anything unless you add --remove-data . Flags: --all , -a : Stop and remove all running or container-stopped projects and remove from global projects list. --omit-snapshot , -O : Omit/skip database snapshot. --remove-data , -R : Remove stored project data (MySQL, logs, etc.). --select , -s : Interactively select a project to stop. --snapshot , -S : Create database snapshot. --stop-ssh-agent : Stop the ddev-ssh-agent container. --unlist , -U : Remove the project from global project list, so it won\u2019t appear in ddev list until started again. Example: # Stop the current project ddev stop # Stop my-project, my-other-project, and my-third-project ddev stop my-project my-other-project my-third-project # Stop all projects ddev stop --all # Stop all projects and the `ddev-ssh-agent` container ddev stop --all --stop-ssh-agent # Stop all projects and remove their data ddev stop --remove-data tableplus \u00b6 Open TablePlus with the current project\u2019s database (global shell host container command). This command is only available if TablePlus.app is installed as /Applications/TablePlus.app . Example: # Open the current project\u2019s database in TablePlus ddev tableplus version \u00b6 Print DDEV and component versions. Example: # Print DDEV and platform version details ddev version xdebug \u00b6 Enable or disable Xdebug (global shell web container command). The on argument is equivalent to enable and true . The off argument is equivalent to disable and false . # Display whether Xdebug is running ddev xdebug status # Turn Xdebug on ddev xdebug # Turn Xdebug on ddev xdebug on # Turn Xdebug off ddev xdebug off xhprof \u00b6 Enable or disable Xhprof (global shell web container command). The on argument is equivalent to enable and true . The off argument is equivalent to disable and false . # Display whether Xhprof is running ddev xhprof status # Turn Xhprof on ddev xhprof # Turn Xhprof on ddev xhprof on # Turn Xhprof off ddev xhprof off yarn \u00b6 Run yarn commands inside the web container in the root of the project (global shell host container command). Tip Use --cwd for another directory. Example: # Use Yarn to install JavaScript packages ddev yarn install # Use Yarn to add the Lerna package ddev yarn add lerna # Use Yarn to add the Lerna package from the `web/core` directory ddev yarn --cwd web/core add lerna","title":"Commands"},{"location":"users/basics/commands/#commands","text":"You can tell DDEV what to do by running its commands. This page details each of the available commands and their options, or flags. Run DDEV without any commands or flags to see this list in your terminal: \u2192 ddev Create and maintain a local web development environment. Docs: https://ddev.readthedocs.io Support: https://ddev.readthedocs.io/en/stable/users/support Usage: ddev [command] Available Commands: auth A collection of authentication commands blackfire Enable or disable blackfire.io profiling (global shell web container command) clean Removes items ddev has created composer Executes a composer command within the web container ... Use ddev help to learn more about a specific command, like this example for ddev describe : \u2192 ddev help describe Get a detailed description of a running ddev project. Describe provides basic information about a ddev project, including its name, location, url, and status. It also provides details for MySQL connections, and connection information for additional services like MailHog and phpMyAdmin. You can run 'ddev describe' from a project directory to describe that project, or you can specify a project to describe by running 'ddev describe <projectname>'. Usage: ddev describe [projectname] [flags] Aliases: describe, status, st, desc Examples: ddev describe ddev describe <projectname> ddev status ddev st Flags: -h, --help help for describe Global Flags: -j, --json-output If true, user-oriented output will be in JSON format.","title":"Commands"},{"location":"users/basics/commands/#global-flags","text":"Two flags are available for every command: --help or -h : Outputs more information about a command rather than executing it. --json-output or -j : Format user-oriented output in JSON.","title":"Global Flags"},{"location":"users/basics/commands/#auth","text":"Authentication commands.","title":"auth"},{"location":"users/basics/commands/#blackfire","text":"Enable or disable Blackfire profiling (global shell web container command). # Display Blackfire profiling status ddev blackfire status # Start Blackfire profiling ddev blackfire on # Stop Blackfire profiling ddev blackfire off Tip There are synonyms for the on and off arguments that have the exact same effect: on : start , enable , true off : stop , disable , false","title":"blackfire"},{"location":"users/basics/commands/#clean","text":"Removes items DDEV has created. (See Uninstalling DDEV .) Flags: --all , -a : Clean all DDEV projects. --dry-run : Run the clean command without deleting. Example: # Preview cleaning all projects without actually removing anything ddev clean --dry-run --all # Clean all projects ddev clean --all # Clean my-project and my-other-project ddev clean my-project my-other-project","title":"clean"},{"location":"users/basics/commands/#composer","text":"Executes a Composer command within the web container. Example: # Install Composer packages ddev composer install","title":"composer"},{"location":"users/basics/commands/#config","text":"Create or modify a DDEV project\u2019s configuration in the current directory. You can also set these via YAML! These settings, plus a few more, can be set by editing stored Config Options . Example: # Start interactive project configuration ddev config # Configure a Drupal 8 project with a `web` document root ddev config --docroot = web --project-type = drupal8 Flags: --additional-fqdns : Comma-delimited list of project FQDNs. --additional-hostnames : Comma-delimited list of project hostnames. --auto : Automatically run config without prompting. (default true ) --bind-all-interfaces : Bind host ports on all interfaces, not just on localhost network interface. --composer-root : Overrides the default Composer root directory for the web service. --composer-root-default : Unsets a web service Composer root directory override. --composer-version : Specify override for Composer version in the web container. This may be \"\" , \"1\" , \"2\" , \"2.2\" , \"stable\" , \"preview\" , \"snapshot\" , or a specific version. --create-docroot : Create the docroot if it doesn\u2019t exist. --database : Specify the database type:version to use. Defaults to mariadb:10.4 . --db-image : Sets the db container image. --db-image-default : Sets the default db container image for this DDEV version. --db-working-dir : Overrides the default working directory for the db service. --db-working-dir-default : Unsets a db service working directory override. --dba-image : Sets the dba container image. --dba-image-default : Sets the default dba container image for this DDEV version. --dba-working-dir : Overrides the default working directory for the dba service. --dba-working-dir-default : Unsets a dba service working directory override. --dbimage-extra-packages : A comma-delimited list of Debian packages that should be added to db container when the project is started. --default-container-timeout : Default time in seconds that DDEV waits for all containers to become ready on start. (default 120 ) --disable-settings-management : Prevent DDEV from creating or updating CMS settings files. --docroot : Provide the relative docroot of the project, like docroot or htdocs or web . (defaults to empty, the current directory) --fail-on-hook-fail : Decide whether ddev start should be interrupted by a failing hook. --host-db-port : The db container\u2019s localhost-bound port. --host-dba-port : The dba (phpMyAdmin) container\u2019s localhost-bound port, if exposed via bind-all-interfaces. --host-https-port : The web container\u2019s localhost-bound HTTPS port. --host-webserver-port : The web container\u2019s localhost-bound port. --http-port : The router HTTP port for this project. --https-port : The router HTTPS port for this project. --image-defaults : Sets the default web, db, and dba container images. --mailhog-https-port : Router port to be used for MailHog HTTPS access. --mailhog-port : Router port to be used for MailHog HTTP access. --mutagen-enabled : Enable Mutagen asynchronous update of project in web container. --nfs-mount-enabled : Enable NFS mounting of project in container. --ngrok-args : Provide extra args to ngrok in ddev share . --no-project-mount : Whether or not to skip mounting project code into the web container. --nodejs-version : Specify the Node.js version to use if you don\u2019t want the default Node.js 16. --omit-containers : Comma-delimited list of container types that should not be started when the project is started. --php-version : PHP version that will be enabled in the web container. --phpmyadmin-https-port : Router port to be used for phpMyAdmin (dba) HTTPS container access. --phpmyadmin-port : Router port to be used forphpMyAdmin (dba) HTTP container access. --project-name : Provide the project name of project to configure. (normally the same as the last part of directory name) --project-tld : Set the top-level domain to be used for projects. (default \"ddev.site\" ) --project-type : Provide the project type: backdrop , drupal10 , drupal6 , drupal7 , drupal8 , drupal9 , laravel , magento , magento2 , php , shopware6 , typo3 , wordpress . This is autodetected and this flag is necessary only to override the detection. --show-config-location : Output the location of the config.yaml file if it exists, or error that it doesn\u2019t exist. --timezone : Specify timezone for containers and PHP, like Europe/London or America/Denver or GMT or UTC . --upload-dir : Sets the project\u2019s upload directory, the destination directory of the import-files command. --use-dns-when-possible : Use DNS for hostname resolution instead of /etc/hosts when possible. (default true ) --web-environment : Set the environment variables in the web container: --web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\" --web-environment-add : Append environment variables to the web container: --web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\" --web-image : Sets the web container image. --web-image-default : Sets the default web container image for this DDEV version. --web-working-dir : Overrides the default working directory for the web service. --web-working-dir-default : Unsets a web service working directory override. --webimage-extra-packages : A comma-delimited list of Debian packages that should be added to web container when the project is started. --webserver-type : Sets the project\u2019s desired webserver type: nginx-fpm or apache-fpm . --working-dir-defaults : Unsets all service working directory overrides. --xdebug-enabled : Whether or not Xdebug is enabled in the web container.","title":"config"},{"location":"users/basics/commands/#craft","text":"Run a Craft CMS command inside the web container (global shell web container command). Example: # Run pending Craft migrations and apply pending project config changes ddev craft up","title":"craft"},{"location":"users/basics/commands/#debug","text":"Aliases: d , dbg . A collection of debugging commands, often useful for troubleshooting .","title":"debug"},{"location":"users/basics/commands/#delete","text":"Remove all information, including the database, for an existing project. Flags: --all , -a : Delete all projects. --clean-containers : Clean up all DDEV docker containers not required by this version of DDEV. (default true) --omit-snapshot , -O : Omit/skip database snapshot. --yes , -y : Skip confirmation prompt. Example: # Delete my-project and my-other-project ddev delete my-project my-other-project # Delete the current project without taking a snapshot or confirming ddev delete --omit-snapshot --yes","title":"delete"},{"location":"users/basics/commands/#describe","text":"Aliases: status , st , desc . Get a detailed description of a running DDEV project. Example: # Display details for the current project ddev describe # Display details for my-project ddev describe my-project","title":"describe"},{"location":"users/basics/commands/#exec","text":"Alias: . . Execute a shell command in the container for a service. Uses the web service by default. To run your command in a different service container, run ddev exec --service <service> <cmd> . Use the --raw flag if you\u2019d like to run a raw, uninterpreted command in a container. Flags: --dir , -d : Defines the execution directory within the container. --raw : Use raw exec (do not interpret with Bash inside container). (default true ) --service , -s : Defines the service to connect to. (e.g. web , db ) (default \"web\" ) Example: # List the web container\u2019s docroot contents ddev exec ls /var/www/html # List the web container\u2019s vendor directory contents ddev exec --dir /var/www/html/vendor ls # Output a long, recursive list of the files in the web container ddev exec --raw -- ls -lR # Say \u201chi\u201d from the phpMyAdmin container ddev exec --service dba echo hi","title":"exec"},{"location":"users/basics/commands/#export-db","text":"Dump a database to a file or to stdout. Flags: --bzip2 : Use bzip2 compression. --file , -f : Provide the path to output the dump. --gzip , -z : Use gzip compression. (default true ) --target-db , -d : If provided, target-db is alternate database to export. (default \"db\" ) --xz : Use xz compression. Example: # Dump and compress the current project\u2019s database to `/tmp/db.sql.gz` ddev export-db --file = /tmp/db.sql.gz # Dump the current project\u2019s database, without compressing it, to `/tmp/db.sql` ddev export-db --gzip = false --file /tmp/db.sql # Dump and compress the current project\u2019s `foo` database instead of `db` ddev export-db --target-db = foo --file = /tmp/db.sql.gz # Output the current project\u2019s database and use `>` to write to `/tmp/db.sql.gz` ddev export-db > /tmp/db.sql.gz # Dump my-project\u2019s database, without compressing it, to `/tmp/my-project.sql` ddev export-db my-project --gzip = false --file = /tmp/my-project.sql","title":"export-db"},{"location":"users/basics/commands/#get","text":"Download an add-on (service, provider, etc.). Flags: --all : List unofficial and official add-ons. (default true ) --list : List official add-ons. (default true ) --verbose or -v : Output verbose error information with bash set -x (default false ) Example: # List official add-ons ddev get --list # List official and third-party add-ons ddev get --list --all # Download the official Redis add-on ddev get drud/ddev-redis # Get debug info about `ddev get` failure ddev get drud/ddev-redis --verbose # Download the Drupal 9 Solr add-on from its v0.0.5 release tarball ddev get https://github.com/drud/ddev-drupal9-solr/archive/refs/tags/v0.0.5.tar.gz # Copy an add-on available in another directory ddev get /path/to/package # Copy an add-on from a tarball in another directory ddev get /path/to/tarball.tar.gz","title":"get"},{"location":"users/basics/commands/#heidisql","text":"Open HeidiSQL with the current project\u2019s database (global shell host container command). This command is only available if TablePlus.app is installed as C:\\Program Files\\HeidiSQL\\Heidisql.exe . Example: # Open the current project\u2019s database in HeidiSQL ddev heidisql","title":"heidisql"},{"location":"users/basics/commands/#help","text":"Help about any command. Example: # Illuminate the virtues of the `describe` command ddev help describe","title":"help"},{"location":"users/basics/commands/#hostname","text":"Manage your hostfile entries. Flags: --remove , -r : Remove the provided host name - ip correlation. --remove-inactive , -R : Remove host names of inactive projects. Example: ddev hostname somesite.ddev.local 127 .0.0.1","title":"hostname"},{"location":"users/basics/commands/#import-db","text":"Import a SQL file into the project. Flags: --extract-path : If provided asset is an archive, provide the path to extract within the archive. --no-drop : Set if you do NOT want to drop the db before importing. --progress , -p : Display a progress bar during import. (default true ) --src , -f : Provide the path to a SQL dump in .sql , .tar , .tar.gz , .tgz , .bz2 , .xx , or .zip format. --target-db , -d : If provided, target-db is alternate database to import into. (default \"db\" ) Example: # Start the interactive import utility ddev import-db # Import the `.tarballs/db.sql` dump to the project database ddev import-db --src = .tarballs/db.sql # Import the compressed `.tarballs/db.sql.gz` dump to the project database ddev import-db --src = .tarballs/db.sql.gz # Import the compressed `.tarballs/db.sql.gz` dump to a `newdb` database ddev import-db --target-db = newdb --src = .tarballs/db.sql.gz # Import the `db.sql` dump to the project database ddev import-db <db.sql # Import the `db.sql` dump to a `newdb` database ddev import-db newdb <db.sql # Uncompress `db.sql.gz` and pipe the result to the `import-db` command gzip -dc db.sql.gz | ddev import-db","title":"import-db"},{"location":"users/basics/commands/#import-files","text":"Pull the uploaded files directory of an existing project to the default public upload directory of your project. Flags: --extract-path : If provided asset is an archive, optionally provide the path to extract within the archive. --src : Provide the path to the source directory or archive to import. (Archive can be .tar , .tar.gz , .tar.xz , .tar.bz2 , .tgz , or .zip .) Example: # Extract+import `/path/to/files.tar.gz` to the project\u2019s upload directory ddev import-files --src = /path/to/files.tar.gz # Import `/path/to/dir` contents to the project\u2019s upload directory ddev import-files --src = /path/to/dir","title":"import-files"},{"location":"users/basics/commands/#launch","text":"Launch a browser with the current site (global shell host container command). Flags: --phpmyadmin , -p : Open phpMyAdmin. --mailhog , -m : Open MailHog. Example: # Open your project\u2019s base URL in the default browser ddev launch # Open MailHog in the default browser ddev launch --mailhog # Open your project\u2019s base URL appended with `temp/phpinfo.php` ddev launch temp/phpinfo.php","title":"launch"},{"location":"users/basics/commands/#list","text":"Aliases: l , ls . List projects. Flags: --active-only , -A : If set, only currently active projects will be displayed. --continuous : If set, project information will be emitted until the command is stopped. --continuous-sleep-interval , -I : Time in seconds between ddev list --continuous output lists. (default 1 ) --wrap-table , -W : Display table with wrapped text if required. Example: # List all projects ddev list # List all running projects ddev list --active-only","title":"list"},{"location":"users/basics/commands/#logs","text":"Get the logs from your running services. Flags: --follow , -f : Follow the logs in real time. --service , -s : Defines the service to retrieve logs from (e.g. web , db ). (default \"web\" ) --tail : How many lines to show. --time , -t : Add timestamps to logs. Example: # Display recent logs from the current project\u2019s web server ddev logs # Stream logs from the current project\u2019s web server in real time ddev logs -f # Display recent logs from the current project\u2019s database server ddev logs -s db # Display recent logs from my-project\u2019s database server ddev logs -s db my-project","title":"logs"},{"location":"users/basics/commands/#mutagen","text":"Commands for Mutagen status and sync, etc.","title":"mutagen"},{"location":"users/basics/commands/#mysql","text":"Run MySQL client in the database container (global shell db container command). Example: # Run the database container\u2019s MySQL client ddev mysql # Run the database container\u2019s MySQL client as root user ddev mysql -uroot -proot # Pipe the `SHOW TABLES;` command to the MySQL client to see a list of tables echo 'SHOW TABLES;' | ddev mysql","title":"mysql"},{"location":"users/basics/commands/#npm","text":"Run npm inside the web container (global shell web container command). Example: # Install JavaScript packages using `npm` ddev npm install # Update JavaScript packages using `npm` ddev npm update","title":"npm"},{"location":"users/basics/commands/#nvm","text":"Run nvm inside the web container (global shell web container command). Example: # Use `nvm` to switch to Node.js v18 ddev nvm install 18","title":"nvm"},{"location":"users/basics/commands/#pause","text":"Aliases: sc , stop-containers . Uses docker stop to pause/stop the containers belonging to a project. Tip This leaves the containers instantiated instead of removing them like ddev stop does. Flags: --all , -a : Pause all running projects. Example: # Pause the current project\u2019s containers ddev pause # Pause my-project\u2019s containers ddev pause my-project # Pause all projects ddev pause --all","title":"pause"},{"location":"users/basics/commands/#php","text":"Run php inside the web container (global shell web container command). Example: # Output the web container\u2019s PHP version ddev php --version","title":"php"},{"location":"users/basics/commands/#poweroff","text":"Alias: powerdown . Completely stop all projects and containers. Tip This is the equivalent of running ddev stop -a --stop-ssh-agent . Example: # Stop all projects and containers ddev poweroff","title":"poweroff"},{"location":"users/basics/commands/#pull","text":"Pull files and database using a configured provider plugin . Flags: --skip-confirmation , -y : Skip confirmation step. --skip-db : Skip pulling database archive. --skip-files : Skip pulling file archive. --skip-import : Download archive(s) without importing than. Example: # Pull a backup from the configured Pantheon project to use locally ddev pull pantheon # Pull a backup from the configured Platform.sh project to use locally ddev pull platform # Pull a backup from the configured Pantheon project without confirming ddev pull pantheon -y # Pull the Platform.sh database archive *only* without confirming ddev pull platform --skip-files -y # Pull the localfile integration\u2019s files *only* without confirming ddev pull localfile --skip-db -y","title":"pull"},{"location":"users/basics/commands/#push","text":"Push files and database using a configured provider plugin . Example: # Push local files and database to the configured Pantheon project ddev push pantheon # Push local files and database to the configured Platform.sh project ddev push platform # Push files and database to Pantheon without confirming ddev push pantheon -y # Push database only to Platform.sh without confirming ddev push platform --skip-files -y # Push files only to Acquia without confirming ddev push acquia --skip-db -y","title":"push"},{"location":"users/basics/commands/#querious","text":"Open Querious with the current project\u2019s MariaDB or MySQL database (global shell host container command). This is only available if Querious.app is installed as /Applications/Querious.app , and only for projects with mysql or mariadb databases. Example: # Open the current project\u2019s database in Querious ddev querious","title":"querious"},{"location":"users/basics/commands/#restart","text":"Restart one or several projects. Flags: --all , -a : Restart all projects. Example: # Restart the current project ddev restart # Restart my-project and my-other-project ddev restart my-project my-other-project # Restart all projects ddev restart --all","title":"restart"},{"location":"users/basics/commands/#self-upgrade","text":"Output instructions for updating or upgrading DDEV. The command doesn\u2019t perform the upgrade, but tries to provide instructions relevant to your installation. Must be executed from the project context. Example: \u2192 ddev self-upgrade DDEV appears to have been installed with install_ddev.sh, you can run that script again to update. curl -fsSL https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash","title":"self-upgrade"},{"location":"users/basics/commands/#sequelace","text":"Open SequelAce with the current project\u2019s database (global shell host container command). This command is only available if Sequel Ace.app is installed as /Applications/Sequel ace.app , and only for projects with mysql or mariadb databases. Example: # Open the current project\u2019s database in SequelAce ddev sequelace","title":"sequelace"},{"location":"users/basics/commands/#sequelpro","text":"Open SequelPro with the current project\u2019s database (global shell host container command). This command is only available if Sequel Pro.app is installed as /Applications/Sequel pro.app , and only for projects with mysql or mariadb databases. *Note that Sequel Pro is considered abandoned, does not work with mysql:8.0 ; other solutions like Sequel Ace, Querious, Tableplus are preferred. Example: # Open the current project\u2019s database in SequelPro ddev sequelpro","title":"sequelpro"},{"location":"users/basics/commands/#service","text":"Add or remove, enable or disable extra services .","title":"service"},{"location":"users/basics/commands/#share","text":"Share the current project on the internet via ngrok . Tip Some ngrok arguments are supported via CLI, but any ngrok flag can be specified in the ngrok_args config setting . Flags: --subdomain : Subdomain to use with paid ngrok account. Example: # Share the current project with ngrok ddev share # Share the current project with ngrok, using subdomain `foo.*` ddev share --subdomain foo # Share the current project using ngrok\u2019s basic-auth argument ddev share --basic-auth username:pass1234 # Share my-project with ngrok ddev share my-project","title":"share"},{"location":"users/basics/commands/#snapshot","text":"Create a database snapshot for one or more projects. This uses xtrabackup or mariabackup to create a database snapshot in the .ddev/db_snapshots directory. These are compatible with server backups using the same tools and can be restored with the snapshot restore command. See Snapshotting and Restoring a Database for more detail, or Database Management for more on working with databases in general. Flags: --all , -a : Snapshot all projects. (Will start stopped or paused projects.) --cleanup , -C : Cleanup snapshots. --list , -l : List snapshots. --name , -n : Provide a name for the snapshot. --yes , -y : Skip confirmation prompt. Example: # Take a database snapshot for the current project ddev snapshot # Take a database snapshot for the current project, named `my_snapshot_name` ddev snapshot --name my_snapshot_name # Take a snapshot for the current project, cleaning up existing snapshots ddev snapshot --cleanup # Take a snapshot for the current project, cleaning existing snapshots and skipping prompt ddev snapshot --cleanup -y # List the current project\u2019s snapshots ddev snapshot --list # Take a snapshot for each project ddev snapshot --all","title":"snapshot"},{"location":"users/basics/commands/#ssh","text":"Starts a shell session in a service container. Uses the web service by default. Flags: --dir , -d : Defines the destination directory within the container. --service , -s : Defines the service to connect to. (default \"web\" ) Example: # SSH into the current project\u2019s web container ddev ssh # SSH into the current project\u2019s database container ddev ssh -s db # SSH into the web container for my-project ddev ssh my-project # SSH into the docroot of the current project\u2019s web container ddev ssh -d /var/www/html","title":"ssh"},{"location":"users/basics/commands/#start","text":"Start a DDEV project. Flags: --all , -a : Start all projects. --select , -s : Interactively select a project to start. --skip-confirmation , -y : Skip any confirmation steps. Example: # Start the current project ddev start # Start my-project and my-other-project ddev start my-project my-other-project # Start all projects ddev start --all","title":"start"},{"location":"users/basics/commands/#stop","text":"Aliases: rm , remove . Stop and remove the containers of a project. Does not lose or harm anything unless you add --remove-data . Flags: --all , -a : Stop and remove all running or container-stopped projects and remove from global projects list. --omit-snapshot , -O : Omit/skip database snapshot. --remove-data , -R : Remove stored project data (MySQL, logs, etc.). --select , -s : Interactively select a project to stop. --snapshot , -S : Create database snapshot. --stop-ssh-agent : Stop the ddev-ssh-agent container. --unlist , -U : Remove the project from global project list, so it won\u2019t appear in ddev list until started again. Example: # Stop the current project ddev stop # Stop my-project, my-other-project, and my-third-project ddev stop my-project my-other-project my-third-project # Stop all projects ddev stop --all # Stop all projects and the `ddev-ssh-agent` container ddev stop --all --stop-ssh-agent # Stop all projects and remove their data ddev stop --remove-data","title":"stop"},{"location":"users/basics/commands/#tableplus","text":"Open TablePlus with the current project\u2019s database (global shell host container command). This command is only available if TablePlus.app is installed as /Applications/TablePlus.app . Example: # Open the current project\u2019s database in TablePlus ddev tableplus","title":"tableplus"},{"location":"users/basics/commands/#version","text":"Print DDEV and component versions. Example: # Print DDEV and platform version details ddev version","title":"version"},{"location":"users/basics/commands/#xdebug","text":"Enable or disable Xdebug (global shell web container command). The on argument is equivalent to enable and true . The off argument is equivalent to disable and false . # Display whether Xdebug is running ddev xdebug status # Turn Xdebug on ddev xdebug # Turn Xdebug on ddev xdebug on # Turn Xdebug off ddev xdebug off","title":"xdebug"},{"location":"users/basics/commands/#xhprof","text":"Enable or disable Xhprof (global shell web container command). The on argument is equivalent to enable and true . The off argument is equivalent to disable and false . # Display whether Xhprof is running ddev xhprof status # Turn Xhprof on ddev xhprof # Turn Xhprof on ddev xhprof on # Turn Xhprof off ddev xhprof off","title":"xhprof"},{"location":"users/basics/commands/#yarn","text":"Run yarn commands inside the web container in the root of the project (global shell host container command). Tip Use --cwd for another directory. Example: # Use Yarn to install JavaScript packages ddev yarn install # Use Yarn to add the Lerna package ddev yarn add lerna # Use Yarn to add the Lerna package from the `web/core` directory ddev yarn --cwd web/core add lerna","title":"yarn"},{"location":"users/basics/database-management/","text":"Database Management \u00b6 DDEV provides lots of flexibility for managing your databases between your local, staging and production environments. You may commonly use the ddev import-db and ddev export-db commands, but there are plenty of other adaptable ways to work with your databases. Tip Remember, you can run ddev [command] --help for more info on many of the topics below. Database Imports \u00b6 Import a database with one command, from one of the following file formats: .sql, .sql.gz, .mysql, .mysql.gz, .tar, .tar.gz, and .zip . Here\u2019s an example of a database import using DDEV: ddev import-db --src = dumpfile.sql.gz You can also: Use ddev mysql or ddev psql or the mysql and psql commands inside the web and db containers. Use phpMyAdmin for database imports\u2014just be aware it\u2019s much slower. Discussion \u00b6 Many database backends : You can use a vast array of different database types, including MariaDB (5.5\u201310.8) and MySQL (5.5\u20138.0) PostgreSQL (9\u201314), see ( docs ). Note that if you want to change database type, you need to export your database and then ddev delete the project (to kill off the existing database), make the change to a new database type, start again, and import. Default database : DDEV creates a default database named db and default permissions for the db user with password db , and it\u2019s on the (inside Docker) hostname db . Extra databases : You can easily create and populate additional databases. For example, ddev import-db --target-db=backend --src=backend.sql.gz will create the database named backend with permissions for that same db user and import from the backend.sql.gz dumpfile . Exporting extra databases : You can export in the same way: ddev export-db -f mysite.sql.gz will export your default database ( db ). ddev export-db --target-db=backend -f backend-export.sql.gz will dump the database named backend . Database snapshots : Snapshots let you easily save the entire status of all of your databases, which can be great when you\u2019re working incrementally on migrations or updates and want to save state so you can start right back where you were. Snapshots can be named for easier reference later on. For example, ddev snapshot --name=two-dbs would make a snapshot named two-dbs in the .ddev/db_snapshots directory. It includes the entire state of the db server, so in the case of our two databases above, both databases and the system level mysql or postgres database will all be snapshotted. Then if you want to delete everything with ddev delete -O (omitting the snapshot since we have one already), and then ddev start again, we can ddev snapshot restore two-dbs and we\u2019ll be right back where we were. Use the ddev snapshot restore command to interactively choose among snapshots, or append --latest to restore the most recent snapshot: ddev snapshot restore --latest . ddev mysql and ddev psql : These commands give you direct access to the mysql and psql clients in the database container, which can be useful for quickly running commands while you work. You might run ddev mysql to use interactive commands like DROP DATABASE backend; or SHOW TABLES; , or do things like echo \"SHOW TABLES;\" | ddev mysql or ddev mysql -uroot -proot to get root privileges. mysql/psql clients in containers : The web and db containers are each ready with MySQL/PostgreSQL clients, so you can ddev ssh or ddev ssh -s db and use mysql or psql . mysqldump : The web and db containers also come with mysqldump . You could ddev ssh into the web container, for example, then mkdir /var/www/html/.tarballs and mysqldump db >/var/www/html/.tarballs/db.sql or mysqldump db | gzip >/var/www/html/.tarballs/db.sql.gz to create database dumps. Because /var/www/html is mounted into the container from your project root, the .tarballs directory will also show up in the root of the project on your host machine. pgdump and related commands : The PostgreSQL database container includes normal pg commands like pgdump . Other database explorers : There are lots of alternatives for GUI database explorers: macOS users can use ddev sequelace to launch the free Sequel Ace database browser, ddev tableplus to launch TablePlus , [ ddev querious ] for Querious , and the obsolete Sequel Pro is also supported with ddev sequelpro . (Each must be installed for the command to exist.) ddev describe displays the URL for the built-in phpMyAdmin GUI. (Something like https://<yourproject>.ddev.site:8037 .) PhpStorm (and all JetBrains tools) have a nice database browser. (If you use the DDEV Integration plugin this is all done for you.) Choose a static host_db_port for your project. For example host_db_port: 59002 (each project\u2019s database port should be different if you\u2019re running more than one project at a time). Use ddev start for it to take effect. Use the \u201cdatabase\u201d tool to create a source from \u201clocalhost\u201d, with the proper type \u201cmysql\u201d or \u201cpostgresql\u201d and the port you chose, username db + password db . Explore away! There\u2019s a sample custom command that will run the free MySQL Workbench on macOS, Windows or Linux. To use it, run: cp ~/.ddev/commands/host/mysqlworkbench.example ~/.ddev/commands/host/mysqlworkbench ddev mysqlworkbench","title":"Database Management"},{"location":"users/basics/database-management/#database-management","text":"DDEV provides lots of flexibility for managing your databases between your local, staging and production environments. You may commonly use the ddev import-db and ddev export-db commands, but there are plenty of other adaptable ways to work with your databases. Tip Remember, you can run ddev [command] --help for more info on many of the topics below.","title":"Database Management"},{"location":"users/basics/database-management/#database-imports","text":"Import a database with one command, from one of the following file formats: .sql, .sql.gz, .mysql, .mysql.gz, .tar, .tar.gz, and .zip . Here\u2019s an example of a database import using DDEV: ddev import-db --src = dumpfile.sql.gz You can also: Use ddev mysql or ddev psql or the mysql and psql commands inside the web and db containers. Use phpMyAdmin for database imports\u2014just be aware it\u2019s much slower.","title":"Database Imports"},{"location":"users/basics/database-management/#discussion","text":"Many database backends : You can use a vast array of different database types, including MariaDB (5.5\u201310.8) and MySQL (5.5\u20138.0) PostgreSQL (9\u201314), see ( docs ). Note that if you want to change database type, you need to export your database and then ddev delete the project (to kill off the existing database), make the change to a new database type, start again, and import. Default database : DDEV creates a default database named db and default permissions for the db user with password db , and it\u2019s on the (inside Docker) hostname db . Extra databases : You can easily create and populate additional databases. For example, ddev import-db --target-db=backend --src=backend.sql.gz will create the database named backend with permissions for that same db user and import from the backend.sql.gz dumpfile . Exporting extra databases : You can export in the same way: ddev export-db -f mysite.sql.gz will export your default database ( db ). ddev export-db --target-db=backend -f backend-export.sql.gz will dump the database named backend . Database snapshots : Snapshots let you easily save the entire status of all of your databases, which can be great when you\u2019re working incrementally on migrations or updates and want to save state so you can start right back where you were. Snapshots can be named for easier reference later on. For example, ddev snapshot --name=two-dbs would make a snapshot named two-dbs in the .ddev/db_snapshots directory. It includes the entire state of the db server, so in the case of our two databases above, both databases and the system level mysql or postgres database will all be snapshotted. Then if you want to delete everything with ddev delete -O (omitting the snapshot since we have one already), and then ddev start again, we can ddev snapshot restore two-dbs and we\u2019ll be right back where we were. Use the ddev snapshot restore command to interactively choose among snapshots, or append --latest to restore the most recent snapshot: ddev snapshot restore --latest . ddev mysql and ddev psql : These commands give you direct access to the mysql and psql clients in the database container, which can be useful for quickly running commands while you work. You might run ddev mysql to use interactive commands like DROP DATABASE backend; or SHOW TABLES; , or do things like echo \"SHOW TABLES;\" | ddev mysql or ddev mysql -uroot -proot to get root privileges. mysql/psql clients in containers : The web and db containers are each ready with MySQL/PostgreSQL clients, so you can ddev ssh or ddev ssh -s db and use mysql or psql . mysqldump : The web and db containers also come with mysqldump . You could ddev ssh into the web container, for example, then mkdir /var/www/html/.tarballs and mysqldump db >/var/www/html/.tarballs/db.sql or mysqldump db | gzip >/var/www/html/.tarballs/db.sql.gz to create database dumps. Because /var/www/html is mounted into the container from your project root, the .tarballs directory will also show up in the root of the project on your host machine. pgdump and related commands : The PostgreSQL database container includes normal pg commands like pgdump . Other database explorers : There are lots of alternatives for GUI database explorers: macOS users can use ddev sequelace to launch the free Sequel Ace database browser, ddev tableplus to launch TablePlus , [ ddev querious ] for Querious , and the obsolete Sequel Pro is also supported with ddev sequelpro . (Each must be installed for the command to exist.) ddev describe displays the URL for the built-in phpMyAdmin GUI. (Something like https://<yourproject>.ddev.site:8037 .) PhpStorm (and all JetBrains tools) have a nice database browser. (If you use the DDEV Integration plugin this is all done for you.) Choose a static host_db_port for your project. For example host_db_port: 59002 (each project\u2019s database port should be different if you\u2019re running more than one project at a time). Use ddev start for it to take effect. Use the \u201cdatabase\u201d tool to create a source from \u201clocalhost\u201d, with the proper type \u201cmysql\u201d or \u201cpostgresql\u201d and the port you chose, username db + password db . Explore away! There\u2019s a sample custom command that will run the free MySQL Workbench on macOS, Windows or Linux. To use it, run: cp ~/.ddev/commands/host/mysqlworkbench.example ~/.ddev/commands/host/mysqlworkbench ddev mysqlworkbench","title":"Discussion"},{"location":"users/basics/developer-tools/","text":"Built-in Developer Tools \u00b6 Run ddev describe to see the project information and services available for your project and how to access them. Command-line Tools in the Containers \u00b6 Hundreds of useful developer tools are included inside the containers and can be used via ddev exec or ddev ssh . Some of those include: MySQL client ( mysql ) - Command-line interface for interacting with MySQL/MariaDB. PostgreSQL client ( psql ) - Command-line tool for PostgreSQL. Drush - Command-line shell and Unix scripting interface for Drupal. PHIVE - Command line tool for \u201cPHAR Installation and Verification Environment\u201d. WP-CLI - Command-line tools for managing WordPress installations, available both as wp and as wp-cli . npm , nvm , and yarn (these also have ddev shortcuts like ddev npm , ddev nvm , ddev yarn ). node sqlite3 These tools can be accessed for single commands using ddev exec <command> or ddev ssh for an interactive bash or sh session. You can also add tools that are not provided by default using webimage_extra_packages or a custom Dockerfile . DDEV and Composer \u00b6 DDEV provides a built-in command to simplify use of PHP\u2019s dependency manager, Composer , without requiring it to be installed on the host machine. Generally, executing any Composer command through DDEV is as simple as prepending the command with ddev . DDEV will execute the command at the project root in the web container, passing (almost) all arguments and flags to Composer. To execute Composer in other directories within the container, use ddev ssh or ddev exec -d <dir> . For example: ddev composer help runs Composer\u2019s help command to learn more about what\u2019s available. ddev composer require <package> tells Composer to require a specific PHP package for the current project. Additionally, Composer can be used to initialize new projects with ddev composer create . This command supports limited argument and flag options, and will install a new project to the project root in /var/www/html . The package and version arguments are required: ddev composer create [<flags>] \"<package>:<version>\" For example: ddev composer create --no-dev \"typo3/cms-base-distribution:^9\" To execute a fully-featured composer create-project command, you can execute the command from within the container after executing ddev ssh , or pass the full command to ddev exec , like so: ddev exec composer create-project ... DDEV uses Composer 2 by default. Use the --composer-version option to roll back to version 1: ddev config --composer-version=1 && ddev start . composer.json Location : It\u2019s most common for composer.json to be in the project root, but you can specify an alternate Composer root using DDEV\u2019s composer_root option in .ddev/config.yaml , or ddev config --composer-root <dir> . The composer_root value is the relative path from the project root to the directory containing composer.json . If yours is at docroot/composer.json , for example, the composer_root value should be docroot . Careful with Global Requirements! If you run ddev composer global require (or composer global require inside the web container), global packages will be installed at the home directory within the container ( ~/.composer ) and will disappear when the container restarts\u2014meaning you\u2019ll need to re-run the command. You may want to synchronize created Composer configuration and installed packages with the DDEV\u2019s homeadditions directory on your host machine. Windows OS and ddev composer \u00b6 DDEV attempts to help with Composer and some configurations of Docker Desktop for Windows that introduce complex filesystem workarounds. Use ddev composer (Composer inside the container) instead of using composer on the host side, because it uses the right version of PHP and all its extensions for your project: On some older configurations of Docker Desktop for Windows, symlinks are created in the container as \u201csimulated symlinks\u201d, or XSym files. These special text files behave as symlinks inside the container (on CIFS filesystem), but appear as simple text files on the Windows host. (On the CIFS filesystem used by Docker for Windows, inside the container, there is no capability to create real symlinks even though Windows now has this capability.) DDEV attempts to clean up for this situation. Since Windows 10/11+ (in developer mode) can create real symlinks, DDEV scans your repository after a ddev composer command and attempts to convert XSym files into real symlinks. On older versions of Windows 10, it can only do this if your Windows 10 workstation is set to \u201cDeveloper Mode\u201d. To enable developer mode on Windows 10/11+, search for \u201cdeveloper\u201d in settings: Limitations of ddev composer \u00b6 Using ddev composer --version or ddev composer -V will not work, since ddev tries to utilize the command for itself. Use ddev composer -- --version instead. Email Capture and Review (MailHog) \u00b6 MailHog is a mail catcher that\u2019s configured to capture and display emails sent by PHP in the development environment. After your project is started, access the MailHog web interface at https://mysite.ddev.site:8026 , or run ddev launch -m to launch it in your default browser. MailHog will not intercept emails if your application is configured to use SMTP or a third-party ESP integration. If you\u2019re using SMTP for outgoing mail\u2014with Symfony Mailer or SMTP modules, for example\u2014update your application\u2019s SMTP server configuration to use localhost and MailHog\u2019s port 1025 . For Drupal 9+ settings.ddev.php overrides the Symfony Mailer sendmail configuration to use MailHog. For Drupal 8/9 settings.ddev.php overrides the Swift Mailer transport configuration to use MailHog. For Laravel projects, MailHog will capture Swift messages via SMTP. Update your .env to use Mailhog with the following settings: MAIL_MAILER=smtp MAIL_HOST=localhost MAIL_PORT=1025 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null Using Development Tools on the Host Machine \u00b6 It\u2019s possible in many cases to use development tools installed on your host machine on a project provisioned by DDEV. Tools that interact with files and require no database connection, such as Git or Composer, can be run from the host machine against the code base for a DDEV project with no additional configuration necessary. Database Connections from the Host \u00b6 If you need to connect to your project\u2019s database from your workstation, run ddev describe to show the database connection information, like Host: localhost:49156 . Each project\u2019s database port is unique, and randomly chosen from available ports on your system when you run ddev start . You can force this port to be the same on every ddev start by setting host_db_port in the project\u2019s .ddev/config.yaml . For example, host_db_port: \"49156\" or ddev config --host-db-port=49156 . This value needs to be different on each running DDEV project, and unless it is set, the database port will change on every ddev start . You can use this port with various tools that need a direct port, like mysql or psql clients, but it\u2019s usually easiest to use ddev mysql , ddev psql , ddev sequelace , ddev tableplus , etc, which set everything up for you. (If you use PhpStorm and its integrated database browser, use the DDEV Integration Plugin to manage all of this for you.) Using Drush 8 Installation on Your Host Machine \u00b6 Warning We don\u2019t recommend using drush on your host machine. It\u2019s also mostly irrelevant for Drupal 9+, as you should be using Composer-installed, project-level drush . If you have PHP and Drush installed on your host system and the environment variable IS_DDEV_PROJECT=true , you can use Drush to interact with a DDEV project. On the host machine, extra host-side configuration for the database and port in settings.ddev.php allow Drush to access the database server. This may not work for all Drush commands because the actual web server environment is not available. On Drupal 8+, if you want to use drush uli on the host (or other Drush commands that require a default URI), you\u2019ll need to set DRUSH_OPTIONS_URI on the host. For example, export DRUSH_OPTIONS_URI=https://mysite.ddev.site . DDEV and Terminus \u00b6 Terminus is a command line tool providing advanced interaction with Pantheon services. terminus is available inside the project\u2019s container, allowing users to get information from, or issue commands to their Pantheon-hosted sites. This is an especially helpful feature for Windows users since Terminus is only officially supported on Unix-based systems. To use Terminus, you\u2019ll first need to: Use a machine token. (See Pantheon provider discussion .) Run ddev ssh to tunnel into your container. Issue a command using the keyword terminus . For help using Terminus, try terminus list to get a list of possible commands. Terminus also allows you to issue Drush , WP-CLI , and Composer commands to your Pantheon server. These are all usable from within the container as well, but will require authentication via either your Pantheon password or an SSH key. To use your host machine\u2019s SSH key, you can use the ddev auth ssh command described here .","title":"Built-in Developer Tools"},{"location":"users/basics/developer-tools/#built-in-developer-tools","text":"Run ddev describe to see the project information and services available for your project and how to access them.","title":"Built-in Developer Tools"},{"location":"users/basics/developer-tools/#command-line-tools-in-the-containers","text":"Hundreds of useful developer tools are included inside the containers and can be used via ddev exec or ddev ssh . Some of those include: MySQL client ( mysql ) - Command-line interface for interacting with MySQL/MariaDB. PostgreSQL client ( psql ) - Command-line tool for PostgreSQL. Drush - Command-line shell and Unix scripting interface for Drupal. PHIVE - Command line tool for \u201cPHAR Installation and Verification Environment\u201d. WP-CLI - Command-line tools for managing WordPress installations, available both as wp and as wp-cli . npm , nvm , and yarn (these also have ddev shortcuts like ddev npm , ddev nvm , ddev yarn ). node sqlite3 These tools can be accessed for single commands using ddev exec <command> or ddev ssh for an interactive bash or sh session. You can also add tools that are not provided by default using webimage_extra_packages or a custom Dockerfile .","title":"Command-line Tools in the Containers"},{"location":"users/basics/developer-tools/#ddev-and-composer","text":"DDEV provides a built-in command to simplify use of PHP\u2019s dependency manager, Composer , without requiring it to be installed on the host machine. Generally, executing any Composer command through DDEV is as simple as prepending the command with ddev . DDEV will execute the command at the project root in the web container, passing (almost) all arguments and flags to Composer. To execute Composer in other directories within the container, use ddev ssh or ddev exec -d <dir> . For example: ddev composer help runs Composer\u2019s help command to learn more about what\u2019s available. ddev composer require <package> tells Composer to require a specific PHP package for the current project. Additionally, Composer can be used to initialize new projects with ddev composer create . This command supports limited argument and flag options, and will install a new project to the project root in /var/www/html . The package and version arguments are required: ddev composer create [<flags>] \"<package>:<version>\" For example: ddev composer create --no-dev \"typo3/cms-base-distribution:^9\" To execute a fully-featured composer create-project command, you can execute the command from within the container after executing ddev ssh , or pass the full command to ddev exec , like so: ddev exec composer create-project ... DDEV uses Composer 2 by default. Use the --composer-version option to roll back to version 1: ddev config --composer-version=1 && ddev start . composer.json Location : It\u2019s most common for composer.json to be in the project root, but you can specify an alternate Composer root using DDEV\u2019s composer_root option in .ddev/config.yaml , or ddev config --composer-root <dir> . The composer_root value is the relative path from the project root to the directory containing composer.json . If yours is at docroot/composer.json , for example, the composer_root value should be docroot . Careful with Global Requirements! If you run ddev composer global require (or composer global require inside the web container), global packages will be installed at the home directory within the container ( ~/.composer ) and will disappear when the container restarts\u2014meaning you\u2019ll need to re-run the command. You may want to synchronize created Composer configuration and installed packages with the DDEV\u2019s homeadditions directory on your host machine.","title":"DDEV and Composer"},{"location":"users/basics/developer-tools/#email-capture-and-review-mailhog","text":"MailHog is a mail catcher that\u2019s configured to capture and display emails sent by PHP in the development environment. After your project is started, access the MailHog web interface at https://mysite.ddev.site:8026 , or run ddev launch -m to launch it in your default browser. MailHog will not intercept emails if your application is configured to use SMTP or a third-party ESP integration. If you\u2019re using SMTP for outgoing mail\u2014with Symfony Mailer or SMTP modules, for example\u2014update your application\u2019s SMTP server configuration to use localhost and MailHog\u2019s port 1025 . For Drupal 9+ settings.ddev.php overrides the Symfony Mailer sendmail configuration to use MailHog. For Drupal 8/9 settings.ddev.php overrides the Swift Mailer transport configuration to use MailHog. For Laravel projects, MailHog will capture Swift messages via SMTP. Update your .env to use Mailhog with the following settings: MAIL_MAILER=smtp MAIL_HOST=localhost MAIL_PORT=1025 MAIL_USERNAME=null MAIL_PASSWORD=null MAIL_ENCRYPTION=null","title":"Email Capture and Review (MailHog)"},{"location":"users/basics/developer-tools/#using-development-tools-on-the-host-machine","text":"It\u2019s possible in many cases to use development tools installed on your host machine on a project provisioned by DDEV. Tools that interact with files and require no database connection, such as Git or Composer, can be run from the host machine against the code base for a DDEV project with no additional configuration necessary.","title":"Using Development Tools on the Host Machine"},{"location":"users/basics/developer-tools/#using-drush-8-installation-on-your-host-machine","text":"Warning We don\u2019t recommend using drush on your host machine. It\u2019s also mostly irrelevant for Drupal 9+, as you should be using Composer-installed, project-level drush . If you have PHP and Drush installed on your host system and the environment variable IS_DDEV_PROJECT=true , you can use Drush to interact with a DDEV project. On the host machine, extra host-side configuration for the database and port in settings.ddev.php allow Drush to access the database server. This may not work for all Drush commands because the actual web server environment is not available. On Drupal 8+, if you want to use drush uli on the host (or other Drush commands that require a default URI), you\u2019ll need to set DRUSH_OPTIONS_URI on the host. For example, export DRUSH_OPTIONS_URI=https://mysite.ddev.site .","title":"Using Drush 8 Installation on Your Host Machine"},{"location":"users/basics/developer-tools/#ddev-and-terminus","text":"Terminus is a command line tool providing advanced interaction with Pantheon services. terminus is available inside the project\u2019s container, allowing users to get information from, or issue commands to their Pantheon-hosted sites. This is an especially helpful feature for Windows users since Terminus is only officially supported on Unix-based systems. To use Terminus, you\u2019ll first need to: Use a machine token. (See Pantheon provider discussion .) Run ddev ssh to tunnel into your container. Issue a command using the keyword terminus . For help using Terminus, try terminus list to get a list of possible commands. Terminus also allows you to issue Drush , WP-CLI , and Composer commands to your Pantheon server. These are all usable from within the container as well, but will require authentication via either your Pantheon password or an SSH key. To use your host machine\u2019s SSH key, you can use the ddev auth ssh command described here .","title":"DDEV and Terminus"},{"location":"users/basics/faq/","text":"FAQ \u00b6 Frequently-asked questions organized into high-level functionality, investigating issues, daily usage, and connecting with our community. Features & Requirements \u00b6 What operating systems will DDEV work with? \u00b6 DDEV works nearly anywhere Docker will run, including macOS, Windows 10/11 Pro/Enterprise and Home, and every Linux variant we\u2019ve ever tried. It also runs in many Linux-like environments, like ChromeOS (in Linux machine) and Windows 10/11\u2019s WSL2. DDEV works the same on each of these platforms since the important work is done inside identical Docker containers. Why do you recommend Colima over Docker Desktop on macOS? \u00b6 Colima (with its bundled Lima ) is similar to what Docker Desktop provides, with a great DDEV experience on Intel and Apple Silicon machines. We specifically recommend Colima because of some important differences: It\u2019s open source software with an MIT license, unlike Docker Desktop which is proprietary software. No license fee to Docker, Inc. and no paid Docker plan required for larger organizations. It\u2019s CLI-focused, unlike Docker Desktop\u2019s GUI. It\u2019s focused directly on running containers. It\u2019s fast and stable. Do I need to install PHP, Composer, nginx, or Node.js/npm on my workstation? \u00b6 No. These tools live inside DDEV\u2019s Docker containers, so you only need to install Docker and install DDEV . This is especially handy for Windows users where there\u2019s more friction getting these things installed. Do I lose data when I run ddev poweroff , ddev stop , or ddev restart ? \u00b6 No. Your code continues to live on your workstation, and your database is safely stored on a Docker volume\u2014both unaffected by these commands. How can I connect to my database? \u00b6 The answer depends on where you\u2019re connecting from . The ddev describe command includes database connection details in a row like this: \u2502 db \u2502 OK \u2502 InDocker: ddev-mysite-db:3306 \u2502 mariadb:10.3 \u2502 \u2502 \u2502 \u2502 Host: localhost:63161 \u2502 User/Pass: 'db/db' \u2502 \u2502 \u2502 \u2502 \u2502 or 'root/root' \u2502 Inside your project container, where the app itself is running, the database hostname is db ( not 127.0.0.1 ) and the port is the default for your database engine\u2014 3306 for MySQL/MariaDB, 5432 for PostgreSQL. Outside your project\u2019s web container, for example a database GUI on your workstation, the hostname is localhost and the port is unique to that project. In the example above, it\u2019s 63161 . The username, password, and database are each db regardless of how you connect. Can I use additional databases with DDEV? \u00b6 Yes, you can create additional databases and manually do whatever you need on them. They\u2019re created automatically if you use ddev import-db with the --target-db option. In this example, extradb.sql.gz is extracted and imported to a newly-created database named extradb : ddev import-db --target-db=extradb --src=.tarballs/extradb.sql.gz You can use ddev mysql or ddev psql to execute queries, or use the MySQL/PostgreSQL clients within ddev ssh or ddev ssh -s db . See the Database Management page. Can different projects communicate with each other? \u00b6 Yes, this is commonly required for situations like Drupal migrations. For the web container to access the db container of another project, use ddev-<projectname>-db as the hostname of the other project. Let\u2019s say we have two projects, for example: project A, and project B. In project A, use mysql -h ddev-projectb-db to access the database server of project B. For HTTP/S communication you can 1) access the web container of project B directly with the hostname ddev-<projectb>-web and port 80 or 443: curl https://ddev-projectb-web or 2) Add a .ddev/docker-compose.communicate.yaml for accessing the other project via the official FQDN. services : web : external_links : - \"ddev-router:projectb.ddev.site\" Can I run DDEV with other development environments at the same time? \u00b6 Yes, as long as they\u2019re configured with different ports. It doesn\u2019t matter whether your other environments use Docker or not, it should only be a matter of avoiding port conflicts. It\u2019s probably easiest, however, to shut down one before using the other. For example, if you use Lando for one project, do a lando poweroff before using DDEV, and then run ddev poweroff before using Lando again. If you run nginx or Apache locally, stop them before using DDEV. The troubleshooting section goes into more detail about identifying and resolving port conflicts. Performance & Troubleshooting \u00b6 How can I get the best performance? \u00b6 Docker\u2019s normal mounting can be slow, especially on macOS. See the Performance section for speed-up options including Mutagen and NFS mounting. How can I troubleshoot what\u2019s going wrong? \u00b6 See the troubleshooting , Docker troubleshooting and Xdebug troubleshooting sections. How can I check that Docker is working? \u00b6 See the troubleshooting section on the Docker Installation page. Why do I get a 403 or 404 on my project after ddev launch ? \u00b6 Most likely because the docroot is misconfigured, or there\u2019s no index.php or index.html in it. Open your .ddev/config.yaml file and check the docroot value, which should be a relative path to the directory containing your project\u2019s index.php . Why do I see nginx headers when I\u2019ve set webserver_type: apache-fpm ? \u00b6 Apache runs in the web container, but when you use the https://*.ddev.site URL, it goes through ddev-router , which is an nginx reverse proxy. That\u2019s why you see nginx headers even though your web container\u2019s using Apache. Read more in this Stack Overflow answer . Why does ddev start fail with \u201cerror while mounting volume, Permission denied\u201d? \u00b6 This almost always means NFS is enabled in your project, but NFS isn\u2019t working on your machine. Start by completely turning NFS off for your projects with ddev config --nfs-mount-enabled=false && ddev config global --nfs-mount-enabled=false . Then later, get NFS working . NFS can be a big performance help on macOS and traditional Windows, and not needed on Linux or Windows WSL2. Most people on macOS and Windows use Mutagen instead of NFS because of its vastly improved performance, so instead of trying to fix this you can disable NFS and enable Mutagen by running ddev config --nfs-mount-enabled=false --mutagen-enabled . Workflow \u00b6 How can I update/upgrade DDEV? \u00b6 You\u2019ll want to update DDEV using the same method you chose to install it. Since upgrading is basically the same as installing, you can follow DDEV Installation to upgrade. You can use the self-upgrade command for getting instructions tailored to your installation. On macOS you likely installed via Homebrew; run brew update && brew upgrade ddev . On Linux + WSL2 using Debian/Ubuntu\u2019s apt install technique, run sudo apt update && sudo apt upgrade ddev like any other package on your system. On Linux + WSL2 with a Homebrew install, run brew update && brew upgrade ddev . On macOS or Linux (including WSL2) if you installed using the install_ddev.sh script you just run it again: curl -fsSL https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash On traditional Windows, you likely installed with Chocolatey or by downloading the installer package. You can upgrade with choco upgrade ddev or by visiting the releases page and downloading the installer. Both techniques will work. On Arch-Linux based systems, use the standard upgrade techniques, e.g. yay -Syu . How can I install a specific version of DDEV? \u00b6 If you\u2019re using Homebrew, first run brew unlink ddev to get rid of the version you have there. Then use one of these options: Download the version you want from the releases page and place it in your $PATH . Use the install_ddev.sh script with the version number argument. For example, if you want v1.18.3-alpha1, run curl -fsSL https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash -s v1.18.3-alpha1 . On Debian/Ubuntu/WSL2 with DDEV installed via apt, you can run sudo apt update && sudo apt install ddev=<version> , for example sudo apt install ddev=1.21.1 . If you want the very latest, unreleased version of DDEV, run brew unlink ddev && brew install drud/ddev/ddev --HEAD . How can I back up or restore all project databases? \u00b6 You can back up all projects that show in ddev list with ddev snapshot -a . This only snapshots projects displayed in ddev list ; any projects not shown there will need to be started so they\u2019re be registered in ddev list . How can I share my local project with someone? \u00b6 See Sharing Your Project . How do I make DDEV match my production environment? \u00b6 You can change the major PHP version and choose between nginx+fpm (default) and Apache+fpm and choose the MariaDB/MySQL/PostgreSQL version add extra services like Solr and Memcached . You won\u2019t be able to make every detail match your production server, but with database server type and version, PHP version and web server type you\u2019ll be close. How do I completely destroy a project? \u00b6 Use ddev delete <project> to destroy a project. By default, a ddev snapshot of your database is taken, but you can skip this using ddev delete --omit-snapshot or ddev delete --omit-snapshot -y . See ddev delete -h for options. It\u2019s up to you to then delete the code directory. What if I don\u2019t like the settings files or gitignores DDEV creates? \u00b6 You have several options: Use the disable_settings_management: true option in the project\u2019s .ddev/config.yaml file. This disables DDEV from updating CMS-related settings files. Use the more generic \u201cphp\u201d project type rather than a CMS-specific one; it basically means \u201cdon\u2019t try to create settings files for me\u201d. The \u201cphp\u201d type works great for experienced developers. Take over the settings file or .gitignore by deleting the line #ddev-generated in it, then check in the file. If that line is removed, DDEV will not try to replace or change the file. How can I change a project\u2019s name? \u00b6 Delete it and migrate it to a new project with your preferred name: Export the project\u2019s database: ddev export-db --file=/path/to/db.sql.gz . Delete the project: ddev delete <project> . (This takes a snapshot by default for safety.) Rename the project: ddev config --project-name=<new_name> . Start thew new project with ddev start . Import the database dump from step one: ddev import-db --src=/path/to/db.sql.gz . How can I move a project to another directory? \u00b6 Run ddev stop --unlist , then move the directory, then run ddev start in the new directory. How can I move a project to another workstation? \u00b6 Take a snapshot, move the project files, and restore the snapshot in a new project on the target workstation: ddev start && ddev snapshot . ddev stop --unlist . Move the project directory to another computer any way you want. On the new computer, run ddev start && ddev snapshot restore --latest . Optionally, on the old computer, run ddev delete --omit-snapshot to remove its copy of the database. How can I move a project from traditional Windows to WSL2? \u00b6 This is exactly the same as moving a project from one computer to another described above. Make sure you move the project into a native filesystem in WSL2, most likely /home . Why does DDEV want to edit /etc/hosts ? \u00b6 If you see \u201cThe hostname is not currently resolvable\u201d and you can ping <hostname> , it may be that DNS resolution is slow. DDEV doesn\u2019t have control over your computer\u2019s name resolution, so it doesn\u2019t have any way to influence how your browser gets an IP address from a hostname. It knows you have to be connected to the internet to do that, and uses a test DNS lookup of <somethingrandom>.ddev.site as a way to guess whether you\u2019re connected to the internet. If it\u2019s unable to do a name lookup, or if the hostname associated with your project is not *.ddev.site , it will try to create entries in /etc/hosts , since it\u2019s assuming you can\u2019t look up your project\u2019s hostname(s) via DNS. If your internet (and name resolution) is actually working, but DNS is slow, run ddev config global --internet-detection-timeout-ms=3000 to set the timeout to 3 seconds (or higher). See this GitHub issue for more. (If DNS rebinding is disallowed on your network/router, this won\u2019t be solvable without network/router changes. Help here and here .) For more detailed troubleshooting information, please see the troubleshooting section . How can I configure a project with the defaults without hitting RETURN a bunch of times? \u00b6 Use ddev config --auto to set the docroot and project type based on the discovered code. If anything in .ddev/config.yaml is wrong, you can edit that directly or use ddev config commands to update settings. Getting Involved \u00b6 How do I get support? \u00b6 See the support options , including Discord , Stack Overflow and the issue queue . How can I contribute to DDEV? \u00b6 We love and welcome contributions of knowledge, support, docs, and code: Submit an issue or pull request to the main repo . Add your external resource to awesome-ddev . Add your recipe or HOWTO to ddev-contrib . Help others in Discord and on Stack Overflow . Contribute financially via GitHub Sponsors . Get involved with DDEV governance and the Advisory Group . How do financial contributions support DDEV? \u00b6 Thanks for asking! Contributions made via GitHub Sponsors go to the Localdev Foundation and are used for infrastructure and supporting development.","title":"FAQ"},{"location":"users/basics/faq/#faq","text":"Frequently-asked questions organized into high-level functionality, investigating issues, daily usage, and connecting with our community.","title":"FAQ"},{"location":"users/basics/faq/#features-requirements","text":"","title":"Features &amp; Requirements"},{"location":"users/basics/faq/#performance-troubleshooting","text":"","title":"Performance &amp; Troubleshooting"},{"location":"users/basics/faq/#workflow","text":"","title":"Workflow"},{"location":"users/basics/faq/#getting-involved","text":"","title":"Getting Involved"},{"location":"users/basics/troubleshooting/","text":"Troubleshooting \u00b6 Things might go wrong! In addition to this page, consider checking Stack Overflow and the DDEV issue queue and other support options , as well as Docker troubleshooting suggestions . General Troubleshooting Strategies \u00b6 Start by running ddev poweroff to make sure all containers can start fresh. Temporarily disable firewalls, VPNs, network proxies, and virus checkers while you\u2019re troubleshooting. Temporarily disable any proxies you\u2019ve established in Docker\u2019s settings. Use ddev debug dockercheck and ddev debug test to help sort out Docker problems. On macOS, check to make sure Docker Desktop or Colima are not out of disk space. In Settings (or Preferences ) \u2192 Resources \u2192 Disk image size there should be ample space left; try not to let usage exceed 80% because the reported number can be unreliable. If it says zero used, something is wrong. If you have customizations like PHP overrides, nginx or Apache overrides, MySQL/PostgreSQL overrides, custom services, or config.yaml changes, please back them out while troubleshooting. It\u2019s important to have the simplest possible environment while troubleshooting. Restart Docker. Consider a Docker factory reset in serious cases, which will destroy any databases you\u2019ve loaded. See Docker Troubleshooting for more. Try the simplest possible DDEV project (just as ddev debug test does): ddev poweroff mkdir ~/tmp/testddev cd ~/tmp/testddev ddev config --auto printf \"<?php\\nphpinfo();\\n\" > index.php ddev start If that starts up fine, there may be an issue specifically with the project you\u2019re trying to start. Using DDEV with Other Development Environments DDEV uses your system\u2019s port 80 and 443 by default when projects are running. If you\u2019re using another local development environment (like Lando or Docksal or a native setup), you can either stop the other environment or configure DDEV to use different ports. See troubleshooting for more detailed problem-solving. It\u2019s easiest to stop the other environment when you want to use DDEV, and stop DDEV when you want to use the other environment. Web Server Ports Already Occupied \u00b6 DDEV may notify you about port conflicts with this message about port 80 or 443: Failed to start yoursite: Unable to listen on required ports, localhost port 80 is in use DDEV sometimes also has this error message that will alert you to port conflicts: ERROR: for ddev-router Cannot start service ddev-router: Ports are not available: listen tcp 127.0.0.1:XX: bind: An attempt was made to access a socket in a way forbidden by its access permissions. This means there\u2019s another web server listening on the named port(s) and DDEV cannot access the port. The most common conflicts are on ports 80 and 443. In some cases, the conflict could be over phpMyAdmin\u2019s port 8036 or MailHog\u2019s port 8025. To resolve this conflict, choose one of three methods: If you\u2019re using another local development environment (MAMP, WAMP, Lando, etc.) that uses these ports, consider stopping it. Fix port conflicts by configuring your project to use different ports. Fix port conflicts by stopping the competing application. Method 1: Stop the conflicting application \u00b6 Consider lando poweroff for Lando, or fin system stop for Docksal, or stop MAMP using GUI interface or stop.sh . Method 2: Fix port conflicts by configuring your project to use different ports \u00b6 To configure a project to use non-conflicting ports, edit the project\u2019s .ddev/config.yaml to add entries like router_http_port: 8000 and router_https_port: 8443 depending on your needs. Then, use ddev start again. For example, if there was a port conflict with a local Apache HTTP on port 80, add the following to the config.yaml file: router_http_port : 8080 router_https_port : 8443 Then run ddev start . This changes the project\u2019s HTTP URL to http://yoursite.ddev.site:8080 and the HTTPS URL to https://yoursite.ddev.site:8443 . If the conflict is over port 8025, it\u2019s normally a conflict over the default port for MailHog. You can add the following to .ddev/config.yaml : mailhog_port : 8300 If the conflict is over port 8036, it\u2019s normally about phpMyAdmin, and you can add the following to .ddev/config.yaml : phpmyadmin_port : 8302 Method 3: Fix port conflicts by stopping the competing application \u00b6 Alternatively, stop the other application. Probably the most common conflicting application is Apache running locally. It can often be stopped gracefully (but temporarily) with: sudo apachectl stop Common tools that use port 80 and port 443: Here are some of the other common processes that could be using ports 80/443 and methods to stop them. MAMP (macOS): Stop MAMP. Apache: Temporarily stop with sudo apachectl stop , permanent stop depends on your environment. nginx (macOS Homebrew): sudo brew services stop nginx or sudo launchctl stop homebrew.mxcl.nginx . nginx (Ubuntu): sudo service nginx stop . Apache (many environments, often named \u201chttpd\u201d): sudo apachectl stop or on Ubuntu sudo service apache2 stop . VPNKit (macOS): You likely have a Docker container bound to port 80. Do you have containers up for Lando or another Docker-based development environment? If so, stop the other environment. Lando: If you\u2019ve previously used Lando, try running lando poweroff . IIS on Windows (can affect WSL2). You\u2019ll have to disable it in the Windows settings. To dig deeper, you can use a number of tools to find out what process is listening. On macOS and Linux, try the lsof tool on ports 80 or 443 or whatever port you\u2019re having trouble with: $ sudo lsof -i :443 -sTCP:LISTEN COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME nginx 1608 www-data 46u IPv4 13913 0t0 TCP *:http (LISTEN) nginx 5234 root 46u IPv4 13913 0t0 TCP *:http (LISTEN) On Windows CMD, use sysinternals tcpview or try using netstat and tasklist to find the process ID: > netstat -aon | findstr \":80.*LISTENING\" TCP 127.0.0.1:80 0.0.0.0:0 LISTENING 5760 TCP 127.0.0.1:8025 0.0.0.0:0 LISTENING 5760 TCP 127.0.0.1:8036 0.0.0.0:0 LISTENING 5760 > tasklist | findstr \"5760\" com.docker.backend.exe 5760 Services 0 9,536 K The resulting output displays which command is running and its PID. Choose the appropriate method to stop the other server. You may also be able to find what\u2019s using a port using curl . On Linux, macOS, or in Git Bash on Windows, curl -I localhost or curl -I -k https://localhost:443 . The result may give you a hint about which application is at fault. We welcome your suggestions based on other issues you\u2019ve run into and your troubleshooting technique. Debugging Port Issues on WSL2 \u00b6 On WSL2 it\u2019s harder to debug this because the port may be occupied either on the traditional Windows side, or within your WSL2 distro. This means you may have to debug it in both places, perhaps using both the Windows techniques shown above and the Linux techniques shown above. The ports are shared between Windows and WSL2, so they can be broken on either side. Database Container Fails to Start \u00b6 Use ddev logs -s db to see what\u2019s wrong. The most common cause of the database container not coming up is changing the database type or version in the project configuration, so the database server daemon is unable to start using an existing configuration for a different type or version. To solve this: Change the configuration in .ddev/config.yaml back to the original configuration. Export the database with ddev export-db . Delete the project with ddev delete , or stop the project and remove the database volume using docker volume rm <project>-mariadb or docker volume rm <project>-postgres . Update .ddev/config.yaml to use the new database type or version . Start the project and import the database from your export. \u201cweb service unhealthy\u201d or \u201cweb service starting\u201d or Exited \u00b6 Use ddev logs to see what\u2019s wrong. The most common cause of the web container being unhealthy is a user-defined .ddev/nginx-full/nginx-site.conf or .ddev/apache/apache-site.conf . Please rename these to <xxx_site.conf> during testing. To figure out what\u2019s wrong with it after you\u2019ve identified that as the problem, use ddev logs and review the error. Changes to .ddev/nginx-site.conf and .ddev/apache/apache-site.conf take effect only when you do a ddev restart or the equivalent. No Input File Specified (404) or Forbidden (403) \u00b6 If you get a 404 with \u201cNo input file specified\u201d (nginx) or a 403 with \u201cForbidden\u201d (Apache) when you visit your project, it usually means that no index.php or index.html is being found in the docroot. This can result from: Misconfigured docroot: If the docroot isn\u2019t where the web server thinks it is, then the web server won\u2019t find index.php . Look at your .ddev/config.yaml to verify it has a docroot containing index.php . It should be a relative path. Missing index.php : There may not be an index.php or index.html in your project. ddev start Fails and Logs Contain \"failed (28: No space left on device)\" - Docker File Space \u00b6 If ddev start fails, it\u2019s most often because the web or db container fails to start. In this case, the error message from ddev start says something like \u201cFailed to start : db container failed: log=, err=container exited, please use 'ddev logs -s db' to find out why it failed\u201d. You can ddev logs -s db to find out what happened. If you see any variant of \u201cno space left on device\u201d in the logs when using Docker Desktop, it means you have to increase or clean up Docker\u2019s file space. Increase the \u201cDisk image size\u201d setting under \u201cResources\u201d in Docker\u2019s Preferences: If you see \u201cno space left on device\u201d on Linux, it most likely means your filesystem is full. ddev start Fails with \"container failed to become ready\" \u00b6 A container fails to become ready when its health check is failing. This can happen to any of the containers, and you can usually find the issue with a docker inspect command. Tip You may need to install jq for these examples ( brew install jq ), or just remove the | jq from the command and read the raw JSON output. For the web container: docker inspect --format \"{{json .State.Health }}\" ddev-<projectname>-web | jq For ddev-router : docker inspect --format \"{{json .State.Health }}\" ddev-router For ddev-ssh-agent : docker inspect --format \"{{json .State.Health }}\" ddev-ssh-agent Don\u2019t forget to check logs using ddev logs for the web container, and ddev logs -s db for the db container! For ddev-router and ddev-ssh-agent : docker logs ddev-router and docker logs ddev-ssh-agent . Run ddev debug router-nginx-config to print the nginx configuration of the currently running ddev-router . ddev start Fails with \"Failed to start [project name]: No such container: ddev-router\" \u00b6 Deleting the images and re-pulling them generally solves this problem. Try running the following commands from the host machine: ddev poweroff docker rm -f $(docker ps -aq) docker rmi -f $(docker images -q) You should then be able to start your DDEV machine. Trouble Building Dockerfiles \u00b6 The additional .ddev/web-build/Dockerfile capability in DDEV is wonderful, but it can be hard to figure out what to put in there. The best approach for any significant Dockerfile is to ddev ssh and sudo -s and then one at a time, do the things that you plan to do with a RUN command in the Dockerfile. For example, if your Dockerfile were RUN npm install --global forever You could test it with ddev ssh , sudo -s , and then npm install --global forever . The error messages you get will be more informative than messages that come when the Dockerfile is processed. You can also see the full Docker build using ~/.ddev/bin/docker-compose -f .ddev/.ddev-docker-compose-full.yaml build --no-cache --progress=plain . DDEV Starts but Browser Can\u2019t Access URL \u00b6 You may see one of two messages in your browser: [url] server IP address could not be found We can\u2019t connect to the server at [url] Most people use *.ddev.site URLs, which work great most of the time but require internet access. *.ddev.site is a wildcard DNS entry that always returns the IP address 127.0.0.1 (localhost). If you\u2019re not connected to the internet, however, or if various other name resolution issues fail, this name resolution won\u2019t work. While DDEV can create a web server and a Docker network infrastructure for a project, it doesn\u2019t have control of your computer\u2019s name resolution, so its backup technique to make a hostname resolvable by the browser is to add an entry to the hosts file ( /etc/hosts on Linux and macOS, C:\\Windows\\system32\\drivers\\etc\\hosts on traditional Windows). If you\u2019re not connected to the internet, your browser will not be able to look up *.ddev.site hostnames. DDEV works fine offline, but for your browser to look up names they\u2019ll have to be resolved in a different way. DDEV assumes that hostnames can be resolved within 3 seconds. That assumption is not valid on all networks or computers, so you can increase the amount of time it waits for resolution. Increasing to 5 seconds, for example: ddev config global --internet-detection-timeout-ms=5000 . If DDEV detects that it can\u2019t look up one of the hostnames assigned to your project for that or other reasons, it will try to add that to the hosts file on your computer, which requires administrative privileges (sudo or Windows UAC). This technique may not work on Windows WSL2, see below. Only 10 hosts are valid per line on some versions of traditional Windows, see below ; beyond that hostnames are ignored. DNS Rebinding Prohibited \u00b6 You may see one of several messages: Cannot resolve unknown host No address associated with hostname Some DNS servers prevent the use of DNS records that resolve to localhost (127.0.0.1) because in uncontrolled environments this may be used as a form of attack called DNS Rebinding . Since *.ddev.site resolves to 127.0.0.1, they may refuse to resolve, and your browser may be unable to look up a hostname, and give you messages like \u201c server IP address could not be found\u201d or \u201cWe can\u2019t connect to the server at \u201d. You verify this is your problem by running ping dkkd.ddev.site . If you get \u201cNo address associated with hostname\u201d or something of that type, your computer is unable to look up *.ddev.site . In this case, you can take any one of the following approaches: Reconfigure your router to allow DNS Rebinding. Many Fritzbox routers have added default DNS Rebinding disallowal, and they can be reconfigured to allow it. See issue . If you have the local dnsmasq DNS server it may also be configured to disallow DNS rebinding, but it\u2019s a simple change to a configuration directive to allow it. Most computers can use most relaxed DNS resolution if they are not on corporate intranets that have non-internet DNS. So for example, the computer can be set to use 8.8.8.8 (Google) or 1.1.1.1 (Cloudflare) for DNS name resolution. If you have control of the router, you can usually change its DHCP settings to choose a public, relaxed DNS server as in #2 . You can live with DDEV trying to edit the /etc/hosts file, which it only has to do when a new name is added to a project. Windows Hosts File May Be Limited to 10 Hosts Per Line \u00b6 On some Windows systems, there is a limit to the number of hosts that can be placed in one line. But since all DDEV hosts are typically on the same IP address (typically 127.0.0.1, localhost), they can add up. As soon as you have more than 10 entries there, your browser won\u2019t be able to resolve the addresses beyond the 10 th entry. There are two workarounds for this problem: Use ddev stop --all and sudo ddev hostname --remove-inactive to prune the number of hosts. When you start a project, its hostname(s) will be re-added again. Manually edit the hosts file (typically C:\\Windows\\System32\\drivers\\etc\\hosts ) and put some of your hosts on a separate line in the file. Windows WSL2 Network Issues \u00b6 If you\u2019re using a browser on Windows, accessing a project in WSL2, you can end up with confusing results when your project is listening on a port inside WSL2 while a Windows process is listening on that same port. The way to sort this out is to stop your project inside WSL2, verify that nothing is listening on the port there, and then study the port on the Windows side by visiting it with a browser or using other tools as described above. Limitations on Symbolic Links (symlinks) \u00b6 Symbolic links are widely used but have specific limitations in many environments, not just in DDEV. Here are some of the ways those may affect you: Crossing mount boundaries : Symlinks may not generally cross between network mounts. In other words, if you have a relative symlink in the root of your project directory on the host that points to ../somefile.txt , that symlink will not be valid inside the container where ../ is a completely different filesystem (and is typically not mounted). Symlinks to absolute paths : If you have an absolute symlink to something like /Users/xxx/somefile.txt on the host, it will not be resolvable inside the container because /Users is not mounted there. Some tools, especially on Magento 2, may create symlinks to rooted paths, with targets like /var/www/html/path/to/something . These basically can\u2019t make it to the host and may create errors. Windows restrictions on symlinks : Inside the Docker container on Windows, you may not be able to create a symlink that goes outside the container. Mutagen restrictions on Windows symlinks : On macOS and Linux (including WSL2) the default .ddev/mutagen/mutagen.yml chooses the posix-raw type of symlink handling. (See mutagen docs ). This basically means that any symlink created will try to sync, regardless of whether it\u2019s valid in the other environment. However, Mutagen does not support posix-raw on traditional Windows, so DDEV uses the portable symlink mode. So on Windows with Mutagen, symlinks have to be strictly limited to relative links that are inside the Mutagen section of the project. Delete and Re-Download Docker Images \u00b6 In a few unusual cases, the actual downloaded Docker images can somehow get corrupted. Deleting the images will force them to be re-downloaded or rebuilt. This does no harm, as everything is just rebuilt, but a ddev start will take longer while it downloads needed resources: ddev poweroff docker rm -f $( docker ps -aq ) # Stop any other random containers that may be running docker rmi -f $( docker images -q ) # You might have to repeat this to get rid of all images","title":"Troubleshooting"},{"location":"users/basics/troubleshooting/#troubleshooting","text":"Things might go wrong! In addition to this page, consider checking Stack Overflow and the DDEV issue queue and other support options , as well as Docker troubleshooting suggestions .","title":"Troubleshooting"},{"location":"users/basics/troubleshooting/#general-troubleshooting-strategies","text":"Start by running ddev poweroff to make sure all containers can start fresh. Temporarily disable firewalls, VPNs, network proxies, and virus checkers while you\u2019re troubleshooting. Temporarily disable any proxies you\u2019ve established in Docker\u2019s settings. Use ddev debug dockercheck and ddev debug test to help sort out Docker problems. On macOS, check to make sure Docker Desktop or Colima are not out of disk space. In Settings (or Preferences ) \u2192 Resources \u2192 Disk image size there should be ample space left; try not to let usage exceed 80% because the reported number can be unreliable. If it says zero used, something is wrong. If you have customizations like PHP overrides, nginx or Apache overrides, MySQL/PostgreSQL overrides, custom services, or config.yaml changes, please back them out while troubleshooting. It\u2019s important to have the simplest possible environment while troubleshooting. Restart Docker. Consider a Docker factory reset in serious cases, which will destroy any databases you\u2019ve loaded. See Docker Troubleshooting for more. Try the simplest possible DDEV project (just as ddev debug test does): ddev poweroff mkdir ~/tmp/testddev cd ~/tmp/testddev ddev config --auto printf \"<?php\\nphpinfo();\\n\" > index.php ddev start If that starts up fine, there may be an issue specifically with the project you\u2019re trying to start. Using DDEV with Other Development Environments DDEV uses your system\u2019s port 80 and 443 by default when projects are running. If you\u2019re using another local development environment (like Lando or Docksal or a native setup), you can either stop the other environment or configure DDEV to use different ports. See troubleshooting for more detailed problem-solving. It\u2019s easiest to stop the other environment when you want to use DDEV, and stop DDEV when you want to use the other environment.","title":"General Troubleshooting Strategies"},{"location":"users/basics/troubleshooting/#web-server-ports-already-occupied","text":"DDEV may notify you about port conflicts with this message about port 80 or 443: Failed to start yoursite: Unable to listen on required ports, localhost port 80 is in use DDEV sometimes also has this error message that will alert you to port conflicts: ERROR: for ddev-router Cannot start service ddev-router: Ports are not available: listen tcp 127.0.0.1:XX: bind: An attempt was made to access a socket in a way forbidden by its access permissions. This means there\u2019s another web server listening on the named port(s) and DDEV cannot access the port. The most common conflicts are on ports 80 and 443. In some cases, the conflict could be over phpMyAdmin\u2019s port 8036 or MailHog\u2019s port 8025. To resolve this conflict, choose one of three methods: If you\u2019re using another local development environment (MAMP, WAMP, Lando, etc.) that uses these ports, consider stopping it. Fix port conflicts by configuring your project to use different ports. Fix port conflicts by stopping the competing application.","title":"Web Server Ports Already Occupied"},{"location":"users/basics/troubleshooting/#database-container-fails-to-start","text":"Use ddev logs -s db to see what\u2019s wrong. The most common cause of the database container not coming up is changing the database type or version in the project configuration, so the database server daemon is unable to start using an existing configuration for a different type or version. To solve this: Change the configuration in .ddev/config.yaml back to the original configuration. Export the database with ddev export-db . Delete the project with ddev delete , or stop the project and remove the database volume using docker volume rm <project>-mariadb or docker volume rm <project>-postgres . Update .ddev/config.yaml to use the new database type or version . Start the project and import the database from your export.","title":"Database Container Fails to Start"},{"location":"users/basics/troubleshooting/#web-service-unhealthy-or-web-service-starting-or-exited","text":"Use ddev logs to see what\u2019s wrong. The most common cause of the web container being unhealthy is a user-defined .ddev/nginx-full/nginx-site.conf or .ddev/apache/apache-site.conf . Please rename these to <xxx_site.conf> during testing. To figure out what\u2019s wrong with it after you\u2019ve identified that as the problem, use ddev logs and review the error. Changes to .ddev/nginx-site.conf and .ddev/apache/apache-site.conf take effect only when you do a ddev restart or the equivalent.","title":"\u201cweb service unhealthy\u201d or \u201cweb service starting\u201d or Exited"},{"location":"users/basics/troubleshooting/#no-input-file-specified-404-or-forbidden-403","text":"If you get a 404 with \u201cNo input file specified\u201d (nginx) or a 403 with \u201cForbidden\u201d (Apache) when you visit your project, it usually means that no index.php or index.html is being found in the docroot. This can result from: Misconfigured docroot: If the docroot isn\u2019t where the web server thinks it is, then the web server won\u2019t find index.php . Look at your .ddev/config.yaml to verify it has a docroot containing index.php . It should be a relative path. Missing index.php : There may not be an index.php or index.html in your project.","title":"No Input File Specified (404) or Forbidden (403)"},{"location":"users/basics/troubleshooting/#ddev-start-fails-and-logs-contain-failed-28-no-space-left-on-device-docker-file-space","text":"If ddev start fails, it\u2019s most often because the web or db container fails to start. In this case, the error message from ddev start says something like \u201cFailed to start : db container failed: log=, err=container exited, please use 'ddev logs -s db' to find out why it failed\u201d. You can ddev logs -s db to find out what happened. If you see any variant of \u201cno space left on device\u201d in the logs when using Docker Desktop, it means you have to increase or clean up Docker\u2019s file space. Increase the \u201cDisk image size\u201d setting under \u201cResources\u201d in Docker\u2019s Preferences: If you see \u201cno space left on device\u201d on Linux, it most likely means your filesystem is full.","title":"ddev start Fails and Logs Contain \"failed (28: No space left on device)\" - Docker File Space"},{"location":"users/basics/troubleshooting/#ddev-start-fails-with-container-failed-to-become-ready","text":"A container fails to become ready when its health check is failing. This can happen to any of the containers, and you can usually find the issue with a docker inspect command. Tip You may need to install jq for these examples ( brew install jq ), or just remove the | jq from the command and read the raw JSON output. For the web container: docker inspect --format \"{{json .State.Health }}\" ddev-<projectname>-web | jq For ddev-router : docker inspect --format \"{{json .State.Health }}\" ddev-router For ddev-ssh-agent : docker inspect --format \"{{json .State.Health }}\" ddev-ssh-agent Don\u2019t forget to check logs using ddev logs for the web container, and ddev logs -s db for the db container! For ddev-router and ddev-ssh-agent : docker logs ddev-router and docker logs ddev-ssh-agent . Run ddev debug router-nginx-config to print the nginx configuration of the currently running ddev-router .","title":"ddev start Fails with \"container failed to become ready\""},{"location":"users/basics/troubleshooting/#ddev-start-fails-with-failed-to-start-project-name-no-such-container-ddev-router","text":"Deleting the images and re-pulling them generally solves this problem. Try running the following commands from the host machine: ddev poweroff docker rm -f $(docker ps -aq) docker rmi -f $(docker images -q) You should then be able to start your DDEV machine.","title":"ddev start Fails with \"Failed to start [project name]: No such container: ddev-router\""},{"location":"users/basics/troubleshooting/#trouble-building-dockerfiles","text":"The additional .ddev/web-build/Dockerfile capability in DDEV is wonderful, but it can be hard to figure out what to put in there. The best approach for any significant Dockerfile is to ddev ssh and sudo -s and then one at a time, do the things that you plan to do with a RUN command in the Dockerfile. For example, if your Dockerfile were RUN npm install --global forever You could test it with ddev ssh , sudo -s , and then npm install --global forever . The error messages you get will be more informative than messages that come when the Dockerfile is processed. You can also see the full Docker build using ~/.ddev/bin/docker-compose -f .ddev/.ddev-docker-compose-full.yaml build --no-cache --progress=plain .","title":"Trouble Building Dockerfiles"},{"location":"users/basics/troubleshooting/#ddev-starts-but-browser-cant-access-url","text":"You may see one of two messages in your browser: [url] server IP address could not be found We can\u2019t connect to the server at [url] Most people use *.ddev.site URLs, which work great most of the time but require internet access. *.ddev.site is a wildcard DNS entry that always returns the IP address 127.0.0.1 (localhost). If you\u2019re not connected to the internet, however, or if various other name resolution issues fail, this name resolution won\u2019t work. While DDEV can create a web server and a Docker network infrastructure for a project, it doesn\u2019t have control of your computer\u2019s name resolution, so its backup technique to make a hostname resolvable by the browser is to add an entry to the hosts file ( /etc/hosts on Linux and macOS, C:\\Windows\\system32\\drivers\\etc\\hosts on traditional Windows). If you\u2019re not connected to the internet, your browser will not be able to look up *.ddev.site hostnames. DDEV works fine offline, but for your browser to look up names they\u2019ll have to be resolved in a different way. DDEV assumes that hostnames can be resolved within 3 seconds. That assumption is not valid on all networks or computers, so you can increase the amount of time it waits for resolution. Increasing to 5 seconds, for example: ddev config global --internet-detection-timeout-ms=5000 . If DDEV detects that it can\u2019t look up one of the hostnames assigned to your project for that or other reasons, it will try to add that to the hosts file on your computer, which requires administrative privileges (sudo or Windows UAC). This technique may not work on Windows WSL2, see below. Only 10 hosts are valid per line on some versions of traditional Windows, see below ; beyond that hostnames are ignored.","title":"DDEV Starts but Browser Can\u2019t Access URL"},{"location":"users/basics/troubleshooting/#windows-hosts-file-may-be-limited-to-10-hosts-per-line","text":"On some Windows systems, there is a limit to the number of hosts that can be placed in one line. But since all DDEV hosts are typically on the same IP address (typically 127.0.0.1, localhost), they can add up. As soon as you have more than 10 entries there, your browser won\u2019t be able to resolve the addresses beyond the 10 th entry. There are two workarounds for this problem: Use ddev stop --all and sudo ddev hostname --remove-inactive to prune the number of hosts. When you start a project, its hostname(s) will be re-added again. Manually edit the hosts file (typically C:\\Windows\\System32\\drivers\\etc\\hosts ) and put some of your hosts on a separate line in the file.","title":"Windows Hosts File May Be Limited to 10 Hosts Per Line"},{"location":"users/basics/troubleshooting/#windows-wsl2-network-issues","text":"If you\u2019re using a browser on Windows, accessing a project in WSL2, you can end up with confusing results when your project is listening on a port inside WSL2 while a Windows process is listening on that same port. The way to sort this out is to stop your project inside WSL2, verify that nothing is listening on the port there, and then study the port on the Windows side by visiting it with a browser or using other tools as described above.","title":"Windows WSL2 Network Issues"},{"location":"users/basics/troubleshooting/#limitations-on-symbolic-links-symlinks","text":"Symbolic links are widely used but have specific limitations in many environments, not just in DDEV. Here are some of the ways those may affect you: Crossing mount boundaries : Symlinks may not generally cross between network mounts. In other words, if you have a relative symlink in the root of your project directory on the host that points to ../somefile.txt , that symlink will not be valid inside the container where ../ is a completely different filesystem (and is typically not mounted). Symlinks to absolute paths : If you have an absolute symlink to something like /Users/xxx/somefile.txt on the host, it will not be resolvable inside the container because /Users is not mounted there. Some tools, especially on Magento 2, may create symlinks to rooted paths, with targets like /var/www/html/path/to/something . These basically can\u2019t make it to the host and may create errors. Windows restrictions on symlinks : Inside the Docker container on Windows, you may not be able to create a symlink that goes outside the container. Mutagen restrictions on Windows symlinks : On macOS and Linux (including WSL2) the default .ddev/mutagen/mutagen.yml chooses the posix-raw type of symlink handling. (See mutagen docs ). This basically means that any symlink created will try to sync, regardless of whether it\u2019s valid in the other environment. However, Mutagen does not support posix-raw on traditional Windows, so DDEV uses the portable symlink mode. So on Windows with Mutagen, symlinks have to be strictly limited to relative links that are inside the Mutagen section of the project.","title":"Limitations on Symbolic Links (symlinks)"},{"location":"users/basics/uninstall/","text":"Uninstalling DDEV \u00b6 A DDEV installation consists of: The self-contained ddev binary. Each project\u2019s .ddev directory. The global ~/.ddev directory where various global items are stored. The global ~/.ddev_mutagen_data_directory directory where Mutagen sync data may be stored. The associated Docker images and containers DDEV created. Any entries in /etc/hosts . Please use ddev snapshot or ddev export-db to make backups of your databases before deleting projects or uninstalling. You can use ddev clean to uninstall the vast majority of things DDEV has touched. For example, ddev clean <project> or ddev clean --all . To uninstall just a project: ddev delete <project> . This removes any hostnames in /etc/hosts and removes your database. If you don\u2019t want it to make a database backup/snapshot on the way down, include the --omit-snapshot option: ddev delete --omit-snapshot <project> . To remove all DDEV-owned /etc/hosts entries: ddev hostname --remove-inactive . To remove the global .ddev directory: rm -r ~/.ddev . To remove the global .ddev_mutagen_data_directory directory: rm -r ~/.ddev_mutagen_data_directory . If you installed Docker just for DDEV and want to uninstall it with all containers and images, just uninstall it for your version of Docker. Otherwise: Remove Docker images from before the current DDEV release with ddev delete images . Remove all DDEV Docker containers that might still exist: docker rm $(docker ps -a | awk '/ddev/ { print $1 }') . Remove all DDEV Docker images that might exist: docker rmi $(docker images | awk '/ddev/ {print $3}') . Remove all Docker images of any type (does no harm; they\u2019ll be re-downloaded): docker rmi -f $(docker images -q) . Remove any Docker volumes: docker volume rm $(docker volume ls | awk '/ddev|-mariadb/ { print $2 }') . To remove the ddev binary: On macOS or Linux with Homebrew, brew uninstall ddev . For Linux or other simple installs, remove the binary. Example: sudo rm /usr/local/bin/ddev . For Linux installed via apt, sudo apt remove ddev . On Windows, if you used the DDEV Windows installer, use the uninstall on the Start Menu or in the \u201cAdd or Remove Programs\u201d section of Windows Settings.","title":"Uninstalling DDEV"},{"location":"users/basics/uninstall/#uninstalling-ddev","text":"A DDEV installation consists of: The self-contained ddev binary. Each project\u2019s .ddev directory. The global ~/.ddev directory where various global items are stored. The global ~/.ddev_mutagen_data_directory directory where Mutagen sync data may be stored. The associated Docker images and containers DDEV created. Any entries in /etc/hosts . Please use ddev snapshot or ddev export-db to make backups of your databases before deleting projects or uninstalling. You can use ddev clean to uninstall the vast majority of things DDEV has touched. For example, ddev clean <project> or ddev clean --all . To uninstall just a project: ddev delete <project> . This removes any hostnames in /etc/hosts and removes your database. If you don\u2019t want it to make a database backup/snapshot on the way down, include the --omit-snapshot option: ddev delete --omit-snapshot <project> . To remove all DDEV-owned /etc/hosts entries: ddev hostname --remove-inactive . To remove the global .ddev directory: rm -r ~/.ddev . To remove the global .ddev_mutagen_data_directory directory: rm -r ~/.ddev_mutagen_data_directory . If you installed Docker just for DDEV and want to uninstall it with all containers and images, just uninstall it for your version of Docker. Otherwise: Remove Docker images from before the current DDEV release with ddev delete images . Remove all DDEV Docker containers that might still exist: docker rm $(docker ps -a | awk '/ddev/ { print $1 }') . Remove all DDEV Docker images that might exist: docker rmi $(docker images | awk '/ddev/ {print $3}') . Remove all Docker images of any type (does no harm; they\u2019ll be re-downloaded): docker rmi -f $(docker images -q) . Remove any Docker volumes: docker volume rm $(docker volume ls | awk '/ddev|-mariadb/ { print $2 }') . To remove the ddev binary: On macOS or Linux with Homebrew, brew uninstall ddev . For Linux or other simple installs, remove the binary. Example: sudo rm /usr/local/bin/ddev . For Linux installed via apt, sudo apt remove ddev . On Windows, if you used the DDEV Windows installer, use the uninstall on the Start Menu or in the \u201cAdd or Remove Programs\u201d section of Windows Settings.","title":"Uninstalling DDEV"},{"location":"users/configuration/config/","text":"Config Options \u00b6 DDEV configuration is stored in YAML files that come in two flavors: Project .ddev/config.yaml settings, with optional environmental override variants. Global $HOME/.ddev/global_config.yaml settings that can apply to all projects. Most of these settings take effect when you run ddev start . Managing Configuration \u00b6 Setting Options \u00b6 You can hand-edit the YAML files DDEV creates for you after running ddev config , and you can also define most settings with equivalent CLI arguments: config.yaml ddev config php_version : \"8.1\" ddev config --php-version 8 .1 Run ddev help config to see all the available config arguments. Environmental Overrides \u00b6 You can override the per-project config.yaml with files named config.*.yaml , which are gitignored by default and not checked in. Many teams use config.local.yaml for configuration that\u2019s specific to one environment, and not checked into the team\u2019s default config.yaml . You might enable Mutagen or enable NFS for the project, for example, just on your machine. Or maybe use a different database type. For examples, see the Extending and Customizing Environments page. additional_fqdns \u00b6 An array of extra fully-qualified domain names to be used for a project. Type Default Usage project [] Example: additional_fqdns: [\"example.com\", \"sub1.example.com\"] would provide HTTP and HTTPS URLs for example.com and sub1.example.com . Warning Take care with additional_fqdns ; it adds items to your /etc/hosts file which can cause confusion. additional_hostnames \u00b6 An array of extra hostnames to be used for a project. Type Default Usage project [] Example: additional_hostnames: [\"somename\", \"someothername\", \"*.thirdname\"] would provide HTTP and HTTPS URLs for somename.ddev.site , someothername.ddev.site , and one.thirdname.ddev.site + two.thirdname.ddev.site . The wildcard ( * ) setting only works if you\u2019re using DNS to resolve hostnames (default) and connected to the internet. composer_root \u00b6 The relative path, from the project root, to the directory containing composer.json . (This is where all Composer-related commands are executed.) Type Default Usage project composer_version \u00b6 Composer version for the web container and the ddev composer command. Type Default Usage project 2 Can be 2 , 1 , or empty ( \"\" ) for latest major version at container build time. Can also be a minor version like 2.2 for the latest release of that branch, an explicit version like 1.0.22 , or a keyword like stable , preview or snapshot . See Composer documentation. database \u00b6 The type and version of the database engine the project should use. Type Default Usage project MariaDB 10.4 Can be MariaDB 5.5\u201310.7, MySQL 5.5\u20138.0, or PostgreSQL 9\u201315. See Database Server Types for examples and caveats. Note DDEV v1.18 and earlier used mariadb_version and mysql_version , which are now automatically converted to the database format. dbimage_extra_packages \u00b6 Extra Debian packages for the project\u2019s database container. Type Default Usage project [] Example: dbimage_extra_packages: [\"less\"] will add the less package when the database container is built. default_container_timeout \u00b6 Seconds DDEV will wait for all containers to become ready. Type Default Usage project 120 Can be adjusted to avoid timeouts on slower systems or for huge snapshot restores. developer_mode \u00b6 Not currently used. Type Default Usage global false Can true or false . disable_http2 \u00b6 Whether to disable http/2 listen in ddev-router . Type Default Usage global false Can be true or false . When true , nginx will not listen for http/2, but just use http/1.1 SSL. (Some browsers don\u2019t work well with http/2.) disable_settings_management \u00b6 Whether to disable CMS-specific settings file management. Type Default Usage project false Can be true or false . When true , DDEV will not create or update CMS-specific settings files. docroot \u00b6 Relative path to the document root containing index.php or index.html . Type Default Usage project automatic DDEV will attempt to detect this and set it for you, otherwise falling back to the current directory. fail_on_hook_fail \u00b6 Whether ddev start should be interrupted by a failing hook , on a single project or for all projects if used globally. Type Default Usage project global false Can be true or false . hooks \u00b6 DDEV-specific lifecycle hooks to be executed. Type Default Usage project `` host_db_port \u00b6 Port for binding database server to localhost interface. Type Default Usage project automatic Not commonly used. Can be a specific port number for a fixed database port. If unset, the port will be assigned automatically and change each time ddev start is run. Can be a specific port number for a fixed database port, which can be useful for configuration of host-side database clients. (May still be easier to use ddev mysql , ddev psql , ddev sequelpro , etc., which handle changing ports automatically, as does the sample command ddev mysqlworkbench .) host_https_port \u00b6 Specific, persistent HTTPS port for direct binding to localhost interface. Type Default Usage project automatic Not commonly used. Can be a specific port number for a fixed HTTPS URL. If unset, the port will be assigned automatically and change each time ddev start is run. Example: 59001 will have the project always use https://127.0.0.1:59001 for the localhost URL\u2014used less commonly than the named URL which is better to rely on. host_webserver_port \u00b6 Specific, persistent HTTP port for direct binding to localhost interface. Type Default Usage project automatic Not commonly used. Can be a specific port number for a fixed HTTP URL. If unset, the port will be assigned automatically and change each time ddev start is run. Example: 59000 will have the project always use http://127.0.0.1:59000 for the localhost URL\u2014used less commonly than the named URL which is better to rely on. instrumentation_opt_in \u00b6 Whether to allow instrumentation reporting . Type Default Usage global true Can be true or false . When true , anonymous usage information is collected via Segment . internet_detection_timeout_ms \u00b6 Internet detection timeout in milliseconds. Type Default Usage global 1000 (1 second) Can be any integer. DDEV must detect whether the internet is working to determine whether to add hostnames to /etc/hosts . In rare cases, you may need to increase this value if you have slow but working internet. See FAQ and GitHub issue . letsencrypt_email \u00b6 Email associated with Let\u2019s Encrypt feature. (Works in conjunction with use_letsencrypt .) Type Default Usage global `` Set with ddev global --letsencrypt-email=me@example.com . Used with the casual hosting feature. mailhog_https_port \u00b6 Port for project\u2019s MailHog HTTPS URL. Type Default Usage project 8026 Can be changed to avoid a port conflict. mailhog_port \u00b6 Port for project\u2019s MailHog HTTP URL. Type Default Usage project 8025 Can be changed to avoid a port conflict. mutagen_enabled \u00b6 Whether to enable Mutagen asynchronous caching for all projects. Type Default Usage project global false Can be true or false ; only true has any effect. This overrides NFS mounting as it\u2019s incompatible with NFS. name \u00b6 The URL-friendly name DDEV should use to reference the project. Type Default Usage project enclosing directory name Must be unique; no two projects can have the same name. It\u2019s best if this matches the directory name. If this option is omitted, the project will take the name of the enclosing directory. nfs_mount_enabled \u00b6 Whether to use NFS to mount the project into the container for performance. (Mostly superseded by mutagen_enabled .) Type Default Usage project global false Can be true or false ; only true has any effect. Workstation configuration required! See the NFS section on the Performance page. This is typically a global setting. If it\u2019s ever set in both places, the global config will override the project-specific value. ngrok_args \u00b6 Extra flags for configuring ngrok when sharing projects with the ddev share command. Type Default Usage project `` Example: --basic-auth username:pass1234 . no_bind_mounts \u00b6 Whether to not use Docker bind mounts. Type Default Usage global false Can true or false . Some Docker environments (like remote Docker) do not allow bind mounts, so when true this turns those off, turns on Mutagen, and uses volume copies to do what bind mounts would otherwise do. no_project_mount \u00b6 Whether to skip mounting project into web container. Type Default Usage project false Can be true or false . Advanced users only! When true , project will not be mounted by DDEV into the web container. Enables experimentation with alternate file mounting strategies. nodejs_version \u00b6 Node.js version for the web container\u2019s \u201csystem\u201d version. Type Default Usage project current LTS version Can be 14 , 16 , or 18 . nvm is also available inside the container and via ddev nvm , and can be set to any valid version including much older ones. omit_containers \u00b6 Containers that should not be loaded automatically for one or more projects. Type Default Usage project global [] For projects , can include db , dba , and ddev-ssh-agent . Globally , can include dba and ddev-ssh-agent only. Example: omit_containers: [db, dba, ddev-ssh-agent] starts the project without a db container, phpMyAdmin, and SSH agent. Some containers can be omitted globally in ~/.ddev/global_config.yaml and the result is additive; all containers named in both places will be omitted. Warning Omitting the db container will cause database-dependent DDEV features to be unstable. override_config \u00b6 Whether to override config values instead of merging. Type Default Usage project false Can be true or false . When true , the config.*.yaml file with the option will have its settings override rather than merge with others. Allows statements like nfs_mount_enabled: false or additional_hostnames: [] to work. See Extending config.yaml with Custom config.*.yaml Files . php_version \u00b6 The PHP version the project should use. Type Default Usage project 8.0 Can be 5.6 , 7.0 , 7.1 , 7.2 , 7.3 , 7.4 , 8.0 , 8.1 , or 8.2 . You can only specify the major version ( 7.3 ), not a minor version ( 7.3.2 ), from those explicitly available. phpmyadmin_https_port \u00b6 Port for project\u2019s phpMyAdmin HTTPS URL. Type Default Usage project 8037 Can be changed to avoid a port conflict. phpmyadmin_port \u00b6 Port for project\u2019s phpMyAdmin HTTP URL. Type Default Usage project 8036 Can be changed to avoid a port conflict. project_tld \u00b6 Default TLD to be used for a project\u2019s domains, or globally for all project domains. Type Default Usage project global ddev.site Can be changed to any TLD you\u2019d prefer. required_docker_compose_version \u00b6 Specific docker-compose version for download. Type Default Usage global If set to v2.8.0 , for example, it will download and use that version instead of the expected version for docker-compose. Troubleshooting Only! This should only be used in specific cases like troubleshooting. Best avoided otherwise. router_bind_all_interfaces \u00b6 Whether to bind ddev-router 's ports on all network interfaces. Type Default Usage global false Can be true or false . When true , ddev-router will bind on all network interfaces instead of only localhost , exposing DDEV projects to your local network. If you set this to true , consider setting omit_containers: [\"dba\"] so phpMyAdmin is not available. router_http_port \u00b6 Port for DDEV router\u2019s HTTP traffic. Type Default Usage project 80 Usually changed only if there\u2019s a conflicting process using that port. See the Troubleshooting page for more on addressing port conflicts. router_https_port \u00b6 Port for DDEV router\u2019s HTTPS traffic. Type Default Usage project 443 Usually changed only if there\u2019s a conflicting process using that port. See the Troubleshooting page for more on addressing port conflicts. simple-formatting \u00b6 Whether to disable most ddev list and ddev describe table formatting. Type Default Usage global false Can be true or false . When true , turns off most table formatting in ddev list and ddev describe and suppresses colorized text everywhere. table-style \u00b6 Style for ddev list and ddev describe . Type Default Usage global default Can be default , bold , and bright . bright is a pleasant, colorful output some people may prefer. timezone \u00b6 Timezone for container and PHP configuration. Type Default Usage project UTC Can be any valid timezone , like Europe/Dublin or MST7MDT . type \u00b6 The DDEV-specific project type. Type Default Usage project php Can be backdrop , craftcms , drupal6 , drupal7 , drupal8 , drupal9 , drupal10 , laravel , magento , magento2 , php , shopware6 , typo3 , or wordpress . The php type doesn\u2019t attempt CMS configuration or settings file management and can work with any project. upload_dir \u00b6 Path from the project\u2019s docroot to the user-generated files directory targeted by ddev import-files . Type Default Usage project use_dns_when_possible \u00b6 Whether to use DNS instead of editing /etc/hosts . Type Default Usage project true Can be true or false . When false , DDEV will always update the /etc/hosts file with the project hostname instead of using DNS for name resolution. See Using DDEV Offline . use_docker_compose_from_path \u00b6 Whether to use the system-installed docker-compose. You can otherwise use required_docker_compose_version to specify a version for download. Type Default Usage global false Can true or false . When true , DDEV will use the docker-compose found in on your system\u2019s path instead of using its private, known-good, docker-compose version. Troubleshooting Only! This should only be used in specific cases like troubleshooting. Best avoided otherwise. use_hardened_images \u00b6 Whether to use hardened images for internet deployment. Type Default Usage global false Can true or false . When true , more secure hardened images are used for an internet deployment. These do not include sudo in the web container, and the container is run without elevated privileges. Generally used with the casual hosting feature. use_letsencrypt \u00b6 Whether to enable Let\u2019s Encrypt integration. (Works in conjunction with letsencrypt_email .) Type Default Usage global false Can true or false . May also be set via ddev global --use-letsencrypt or ddev global --use-letsencrypt=false . When true , letsencrypt_email must also be set and the system must be available on the internet. Used with the casual hosting feature. web_environment \u00b6 Additional custom environment variables for a project\u2019s web container. (Or for all projects if used globally.) Type Default Usage project global [] web_extra_daemons \u00b6 Additional daemons that should automatically be started in the web container . Type Default Usage project [] web_extra_exposed_ports \u00b6 Additional named sets of ports to expose via ddev-router . Type Default Usage project [] webimage \u00b6 The Docker image to use for the web server. Type Default Usage project drud/ddev-webserver Specify your own image based on drud/ddev-webserver . Proceed with caution It\u2019s unusual to change this, and we don\u2019t recommend it without Docker experience and a good reason. Typically, this means additions to the existing web image using a .ddev/web-build/Dockerfile.* . webimage_extra_packages \u00b6 Extra Debian packages for the project\u2019s web container. Type Default Usage project [] Example: webimage_extra_packages: [php-yaml, php-bcmath] will add the php-yaml and php-bcmath packages when the web container is built. webserver_type \u00b6 Whether Xdebug should be enabled for step debugging or profiling . Type Default Usage project nginx-fpm Can be nginx-fpm or apache-fpm . working_dir \u00b6 Working directories used by ddev exec and ddev ssh . Type Default Usage project Example: working_dir: { web: \"/var/www\", db: \"/etc\" } sets the working directories for the web and db containers. xdebug_enabled \u00b6 Whether Xdebug should be enabled for step debugging or profiling . Type Default Usage project false Please leave this false in most cases. Most people use ddev xdebug and ddev xdebug off commands. xdebug_ide_location \u00b6 Adjust Xdebug listen location for WSL2 or in-container. Type Default Usage global \"\" Can be empty ( \"\" ), \"wsl2\" , \"container\" , or an explicit IP address. For PhpStorm running inside WSL2 (or JetBrains Gateway), use \"wsl2\" . For in-container like VS Code Language Server, set to \"container\" . It can also be set to an explicit IP address.","title":"Config Options"},{"location":"users/configuration/config/#config-options","text":"DDEV configuration is stored in YAML files that come in two flavors: Project .ddev/config.yaml settings, with optional environmental override variants. Global $HOME/.ddev/global_config.yaml settings that can apply to all projects. Most of these settings take effect when you run ddev start .","title":"Config Options"},{"location":"users/configuration/config/#managing-configuration","text":"","title":"Managing Configuration"},{"location":"users/configuration/config/#additional_fqdns","text":"An array of extra fully-qualified domain names to be used for a project. Type Default Usage project [] Example: additional_fqdns: [\"example.com\", \"sub1.example.com\"] would provide HTTP and HTTPS URLs for example.com and sub1.example.com . Warning Take care with additional_fqdns ; it adds items to your /etc/hosts file which can cause confusion.","title":"additional_fqdns"},{"location":"users/configuration/config/#additional_hostnames","text":"An array of extra hostnames to be used for a project. Type Default Usage project [] Example: additional_hostnames: [\"somename\", \"someothername\", \"*.thirdname\"] would provide HTTP and HTTPS URLs for somename.ddev.site , someothername.ddev.site , and one.thirdname.ddev.site + two.thirdname.ddev.site . The wildcard ( * ) setting only works if you\u2019re using DNS to resolve hostnames (default) and connected to the internet.","title":"additional_hostnames"},{"location":"users/configuration/config/#composer_root","text":"The relative path, from the project root, to the directory containing composer.json . (This is where all Composer-related commands are executed.) Type Default Usage project","title":"composer_root"},{"location":"users/configuration/config/#composer_version","text":"Composer version for the web container and the ddev composer command. Type Default Usage project 2 Can be 2 , 1 , or empty ( \"\" ) for latest major version at container build time. Can also be a minor version like 2.2 for the latest release of that branch, an explicit version like 1.0.22 , or a keyword like stable , preview or snapshot . See Composer documentation.","title":"composer_version"},{"location":"users/configuration/config/#database","text":"The type and version of the database engine the project should use. Type Default Usage project MariaDB 10.4 Can be MariaDB 5.5\u201310.7, MySQL 5.5\u20138.0, or PostgreSQL 9\u201315. See Database Server Types for examples and caveats. Note DDEV v1.18 and earlier used mariadb_version and mysql_version , which are now automatically converted to the database format.","title":"database"},{"location":"users/configuration/config/#dbimage_extra_packages","text":"Extra Debian packages for the project\u2019s database container. Type Default Usage project [] Example: dbimage_extra_packages: [\"less\"] will add the less package when the database container is built.","title":"dbimage_extra_packages"},{"location":"users/configuration/config/#default_container_timeout","text":"Seconds DDEV will wait for all containers to become ready. Type Default Usage project 120 Can be adjusted to avoid timeouts on slower systems or for huge snapshot restores.","title":"default_container_timeout"},{"location":"users/configuration/config/#developer_mode","text":"Not currently used. Type Default Usage global false Can true or false .","title":"developer_mode"},{"location":"users/configuration/config/#disable_http2","text":"Whether to disable http/2 listen in ddev-router . Type Default Usage global false Can be true or false . When true , nginx will not listen for http/2, but just use http/1.1 SSL. (Some browsers don\u2019t work well with http/2.)","title":"disable_http2"},{"location":"users/configuration/config/#disable_settings_management","text":"Whether to disable CMS-specific settings file management. Type Default Usage project false Can be true or false . When true , DDEV will not create or update CMS-specific settings files.","title":"disable_settings_management"},{"location":"users/configuration/config/#docroot","text":"Relative path to the document root containing index.php or index.html . Type Default Usage project automatic DDEV will attempt to detect this and set it for you, otherwise falling back to the current directory.","title":"docroot"},{"location":"users/configuration/config/#fail_on_hook_fail","text":"Whether ddev start should be interrupted by a failing hook , on a single project or for all projects if used globally. Type Default Usage project global false Can be true or false .","title":"fail_on_hook_fail"},{"location":"users/configuration/config/#hooks","text":"DDEV-specific lifecycle hooks to be executed. Type Default Usage project ``","title":"hooks"},{"location":"users/configuration/config/#host_db_port","text":"Port for binding database server to localhost interface. Type Default Usage project automatic Not commonly used. Can be a specific port number for a fixed database port. If unset, the port will be assigned automatically and change each time ddev start is run. Can be a specific port number for a fixed database port, which can be useful for configuration of host-side database clients. (May still be easier to use ddev mysql , ddev psql , ddev sequelpro , etc., which handle changing ports automatically, as does the sample command ddev mysqlworkbench .)","title":"host_db_port"},{"location":"users/configuration/config/#host_https_port","text":"Specific, persistent HTTPS port for direct binding to localhost interface. Type Default Usage project automatic Not commonly used. Can be a specific port number for a fixed HTTPS URL. If unset, the port will be assigned automatically and change each time ddev start is run. Example: 59001 will have the project always use https://127.0.0.1:59001 for the localhost URL\u2014used less commonly than the named URL which is better to rely on.","title":"host_https_port"},{"location":"users/configuration/config/#host_webserver_port","text":"Specific, persistent HTTP port for direct binding to localhost interface. Type Default Usage project automatic Not commonly used. Can be a specific port number for a fixed HTTP URL. If unset, the port will be assigned automatically and change each time ddev start is run. Example: 59000 will have the project always use http://127.0.0.1:59000 for the localhost URL\u2014used less commonly than the named URL which is better to rely on.","title":"host_webserver_port"},{"location":"users/configuration/config/#instrumentation_opt_in","text":"Whether to allow instrumentation reporting . Type Default Usage global true Can be true or false . When true , anonymous usage information is collected via Segment .","title":"instrumentation_opt_in"},{"location":"users/configuration/config/#internet_detection_timeout_ms","text":"Internet detection timeout in milliseconds. Type Default Usage global 1000 (1 second) Can be any integer. DDEV must detect whether the internet is working to determine whether to add hostnames to /etc/hosts . In rare cases, you may need to increase this value if you have slow but working internet. See FAQ and GitHub issue .","title":"internet_detection_timeout_ms"},{"location":"users/configuration/config/#letsencrypt_email","text":"Email associated with Let\u2019s Encrypt feature. (Works in conjunction with use_letsencrypt .) Type Default Usage global `` Set with ddev global --letsencrypt-email=me@example.com . Used with the casual hosting feature.","title":"letsencrypt_email"},{"location":"users/configuration/config/#mailhog_https_port","text":"Port for project\u2019s MailHog HTTPS URL. Type Default Usage project 8026 Can be changed to avoid a port conflict.","title":"mailhog_https_port"},{"location":"users/configuration/config/#mailhog_port","text":"Port for project\u2019s MailHog HTTP URL. Type Default Usage project 8025 Can be changed to avoid a port conflict.","title":"mailhog_port"},{"location":"users/configuration/config/#mutagen_enabled","text":"Whether to enable Mutagen asynchronous caching for all projects. Type Default Usage project global false Can be true or false ; only true has any effect. This overrides NFS mounting as it\u2019s incompatible with NFS.","title":"mutagen_enabled"},{"location":"users/configuration/config/#name","text":"The URL-friendly name DDEV should use to reference the project. Type Default Usage project enclosing directory name Must be unique; no two projects can have the same name. It\u2019s best if this matches the directory name. If this option is omitted, the project will take the name of the enclosing directory.","title":"name"},{"location":"users/configuration/config/#nfs_mount_enabled","text":"Whether to use NFS to mount the project into the container for performance. (Mostly superseded by mutagen_enabled .) Type Default Usage project global false Can be true or false ; only true has any effect. Workstation configuration required! See the NFS section on the Performance page. This is typically a global setting. If it\u2019s ever set in both places, the global config will override the project-specific value.","title":"nfs_mount_enabled"},{"location":"users/configuration/config/#ngrok_args","text":"Extra flags for configuring ngrok when sharing projects with the ddev share command. Type Default Usage project `` Example: --basic-auth username:pass1234 .","title":"ngrok_args"},{"location":"users/configuration/config/#no_bind_mounts","text":"Whether to not use Docker bind mounts. Type Default Usage global false Can true or false . Some Docker environments (like remote Docker) do not allow bind mounts, so when true this turns those off, turns on Mutagen, and uses volume copies to do what bind mounts would otherwise do.","title":"no_bind_mounts"},{"location":"users/configuration/config/#no_project_mount","text":"Whether to skip mounting project into web container. Type Default Usage project false Can be true or false . Advanced users only! When true , project will not be mounted by DDEV into the web container. Enables experimentation with alternate file mounting strategies.","title":"no_project_mount"},{"location":"users/configuration/config/#nodejs_version","text":"Node.js version for the web container\u2019s \u201csystem\u201d version. Type Default Usage project current LTS version Can be 14 , 16 , or 18 . nvm is also available inside the container and via ddev nvm , and can be set to any valid version including much older ones.","title":"nodejs_version"},{"location":"users/configuration/config/#omit_containers","text":"Containers that should not be loaded automatically for one or more projects. Type Default Usage project global [] For projects , can include db , dba , and ddev-ssh-agent . Globally , can include dba and ddev-ssh-agent only. Example: omit_containers: [db, dba, ddev-ssh-agent] starts the project without a db container, phpMyAdmin, and SSH agent. Some containers can be omitted globally in ~/.ddev/global_config.yaml and the result is additive; all containers named in both places will be omitted. Warning Omitting the db container will cause database-dependent DDEV features to be unstable.","title":"omit_containers"},{"location":"users/configuration/config/#override_config","text":"Whether to override config values instead of merging. Type Default Usage project false Can be true or false . When true , the config.*.yaml file with the option will have its settings override rather than merge with others. Allows statements like nfs_mount_enabled: false or additional_hostnames: [] to work. See Extending config.yaml with Custom config.*.yaml Files .","title":"override_config"},{"location":"users/configuration/config/#php_version","text":"The PHP version the project should use. Type Default Usage project 8.0 Can be 5.6 , 7.0 , 7.1 , 7.2 , 7.3 , 7.4 , 8.0 , 8.1 , or 8.2 . You can only specify the major version ( 7.3 ), not a minor version ( 7.3.2 ), from those explicitly available.","title":"php_version"},{"location":"users/configuration/config/#phpmyadmin_https_port","text":"Port for project\u2019s phpMyAdmin HTTPS URL. Type Default Usage project 8037 Can be changed to avoid a port conflict.","title":"phpmyadmin_https_port"},{"location":"users/configuration/config/#phpmyadmin_port","text":"Port for project\u2019s phpMyAdmin HTTP URL. Type Default Usage project 8036 Can be changed to avoid a port conflict.","title":"phpmyadmin_port"},{"location":"users/configuration/config/#project_tld","text":"Default TLD to be used for a project\u2019s domains, or globally for all project domains. Type Default Usage project global ddev.site Can be changed to any TLD you\u2019d prefer.","title":"project_tld"},{"location":"users/configuration/config/#required_docker_compose_version","text":"Specific docker-compose version for download. Type Default Usage global If set to v2.8.0 , for example, it will download and use that version instead of the expected version for docker-compose. Troubleshooting Only! This should only be used in specific cases like troubleshooting. Best avoided otherwise.","title":"required_docker_compose_version"},{"location":"users/configuration/config/#router_bind_all_interfaces","text":"Whether to bind ddev-router 's ports on all network interfaces. Type Default Usage global false Can be true or false . When true , ddev-router will bind on all network interfaces instead of only localhost , exposing DDEV projects to your local network. If you set this to true , consider setting omit_containers: [\"dba\"] so phpMyAdmin is not available.","title":"router_bind_all_interfaces"},{"location":"users/configuration/config/#router_http_port","text":"Port for DDEV router\u2019s HTTP traffic. Type Default Usage project 80 Usually changed only if there\u2019s a conflicting process using that port. See the Troubleshooting page for more on addressing port conflicts.","title":"router_http_port"},{"location":"users/configuration/config/#router_https_port","text":"Port for DDEV router\u2019s HTTPS traffic. Type Default Usage project 443 Usually changed only if there\u2019s a conflicting process using that port. See the Troubleshooting page for more on addressing port conflicts.","title":"router_https_port"},{"location":"users/configuration/config/#simple-formatting","text":"Whether to disable most ddev list and ddev describe table formatting. Type Default Usage global false Can be true or false . When true , turns off most table formatting in ddev list and ddev describe and suppresses colorized text everywhere.","title":"simple-formatting"},{"location":"users/configuration/config/#table-style","text":"Style for ddev list and ddev describe . Type Default Usage global default Can be default , bold , and bright . bright is a pleasant, colorful output some people may prefer.","title":"table-style"},{"location":"users/configuration/config/#timezone","text":"Timezone for container and PHP configuration. Type Default Usage project UTC Can be any valid timezone , like Europe/Dublin or MST7MDT .","title":"timezone"},{"location":"users/configuration/config/#type","text":"The DDEV-specific project type. Type Default Usage project php Can be backdrop , craftcms , drupal6 , drupal7 , drupal8 , drupal9 , drupal10 , laravel , magento , magento2 , php , shopware6 , typo3 , or wordpress . The php type doesn\u2019t attempt CMS configuration or settings file management and can work with any project.","title":"type"},{"location":"users/configuration/config/#upload_dir","text":"Path from the project\u2019s docroot to the user-generated files directory targeted by ddev import-files . Type Default Usage project","title":"upload_dir"},{"location":"users/configuration/config/#use_dns_when_possible","text":"Whether to use DNS instead of editing /etc/hosts . Type Default Usage project true Can be true or false . When false , DDEV will always update the /etc/hosts file with the project hostname instead of using DNS for name resolution. See Using DDEV Offline .","title":"use_dns_when_possible"},{"location":"users/configuration/config/#use_docker_compose_from_path","text":"Whether to use the system-installed docker-compose. You can otherwise use required_docker_compose_version to specify a version for download. Type Default Usage global false Can true or false . When true , DDEV will use the docker-compose found in on your system\u2019s path instead of using its private, known-good, docker-compose version. Troubleshooting Only! This should only be used in specific cases like troubleshooting. Best avoided otherwise.","title":"use_docker_compose_from_path"},{"location":"users/configuration/config/#use_hardened_images","text":"Whether to use hardened images for internet deployment. Type Default Usage global false Can true or false . When true , more secure hardened images are used for an internet deployment. These do not include sudo in the web container, and the container is run without elevated privileges. Generally used with the casual hosting feature.","title":"use_hardened_images"},{"location":"users/configuration/config/#use_letsencrypt","text":"Whether to enable Let\u2019s Encrypt integration. (Works in conjunction with letsencrypt_email .) Type Default Usage global false Can true or false . May also be set via ddev global --use-letsencrypt or ddev global --use-letsencrypt=false . When true , letsencrypt_email must also be set and the system must be available on the internet. Used with the casual hosting feature.","title":"use_letsencrypt"},{"location":"users/configuration/config/#web_environment","text":"Additional custom environment variables for a project\u2019s web container. (Or for all projects if used globally.) Type Default Usage project global []","title":"web_environment"},{"location":"users/configuration/config/#web_extra_daemons","text":"Additional daemons that should automatically be started in the web container . Type Default Usage project []","title":"web_extra_daemons"},{"location":"users/configuration/config/#web_extra_exposed_ports","text":"Additional named sets of ports to expose via ddev-router . Type Default Usage project []","title":"web_extra_exposed_ports"},{"location":"users/configuration/config/#webimage","text":"The Docker image to use for the web server. Type Default Usage project drud/ddev-webserver Specify your own image based on drud/ddev-webserver . Proceed with caution It\u2019s unusual to change this, and we don\u2019t recommend it without Docker experience and a good reason. Typically, this means additions to the existing web image using a .ddev/web-build/Dockerfile.* .","title":"webimage"},{"location":"users/configuration/config/#webimage_extra_packages","text":"Extra Debian packages for the project\u2019s web container. Type Default Usage project [] Example: webimage_extra_packages: [php-yaml, php-bcmath] will add the php-yaml and php-bcmath packages when the web container is built.","title":"webimage_extra_packages"},{"location":"users/configuration/config/#webserver_type","text":"Whether Xdebug should be enabled for step debugging or profiling . Type Default Usage project nginx-fpm Can be nginx-fpm or apache-fpm .","title":"webserver_type"},{"location":"users/configuration/config/#working_dir","text":"Working directories used by ddev exec and ddev ssh . Type Default Usage project Example: working_dir: { web: \"/var/www\", db: \"/etc\" } sets the working directories for the web and db containers.","title":"working_dir"},{"location":"users/configuration/config/#xdebug_enabled","text":"Whether Xdebug should be enabled for step debugging or profiling . Type Default Usage project false Please leave this false in most cases. Most people use ddev xdebug and ddev xdebug off commands.","title":"xdebug_enabled"},{"location":"users/configuration/config/#xdebug_ide_location","text":"Adjust Xdebug listen location for WSL2 or in-container. Type Default Usage global \"\" Can be empty ( \"\" ), \"wsl2\" , \"container\" , or an explicit IP address. For PhpStorm running inside WSL2 (or JetBrains Gateway), use \"wsl2\" . For in-container like VS Code Language Server, set to \"container\" . It can also be set to an explicit IP address.","title":"xdebug_ide_location"},{"location":"users/configuration/experimental/","text":"Experimental Configurations \u00b6 Remote Docker Instances \u00b6 You can use remote Docker instances, whether on the internet, inside your network, or running in a virtual machine. On the remote machine, the Docker port must be exposed if it\u2019s not already. See instructions for how to do this on a systemd-based remote server. Be aware that this has serious security implications and must not be done without taking those into consideration. In fact, dockerd will complain: Binding to IP address without --tlsverify is insecure and gives root access on this machine to everyone who has access to your network. host=\"tcp://0.0.0.0:2375\". If you do not already have the Docker client installed (like you would from Docker Desktop), install just the client with brew install docker . Create a Docker context that points to the remote Docker instance. For example, if the remote hostname is debian-11 , then docker context create debian-11 --docker host=tcp://debian-11:2375 && docker use debian-11 . Alternately, you can use the DOCKER_HOST environment variable, e.g. export DOCKER_HOST=tcp://debian-11:2375 . Make sure you can access the remote machine using docker ps . Bind mounts cannot work on a remote Docker setup, so you must use ddev config global --no-bind-mounts . This will cause DDEV to push needed information to and from the remote Docker instance when needed. This also automatically turns on Mutagen caching. You may want to use a FQDN other than *.ddev.site because the DDEV site will not be at 127.0.0.1 . For example, ddev config --fqdns=debian-11 and then use https://debian-11 to access the site. If the Docker host is reachable on the internet, you can actually enable real HTTPS for it using Let\u2019s Encrypt as described in Casual Webhosting . Just make sure port 2375 is not available on the internet. Rancher Desktop on macOS \u00b6 Rancher Desktop is another quickly-maturing Docker Desktop alternative for macOS. You can install it for many target platforms from the release page . Rancher Desktop integration currently has no automated testing for DDEV integration. By default, Rancher Desktop will provide a version of the Docker client if you don\u2019t have one on your machine. Rancher changes over the \u201cdefault\u201d context in Docker, so you\u2019ll want to turn off Docker Desktop if you\u2019re using it. Rancher Desktop does not provide bind mounts, so use ddev config global --no-bind-mounts which also turns on Mutagen. Use a non- ddev.site name, ddev config --additional-fqdns=rancher for example, because the resolution of *.ddev.site seems to make it not work. Rancher Desktop does not seem to currently work with mkcert and https , so turn those off with mkcert -uninstall && rm -r \"$(mkcert -CAROOT)\" . This does no harm and can be undone with just mkcert -install again. Traefik Router \u00b6 DDEV\u2019s router plays an important role in its container architecture , receiving most HTTP and HTTPS traffic for requests like *.ddev.site and delivering them to the relevant project\u2019s web container. ddev-router has been based on a forked, poorly-documented nginx reverse proxy. Versions after DDEV v1.21.3 add a new router based on the popular Traefik Proxy , available as an experimental feature until it becomes the default in a future release. Run the following to enable it: ddev poweroff && ddev config global --use-traefik Most DDEV projects will work fine out of the box, with the benefit of vastly more configuration options and ways to work with the router. (This will likely lead to more features in the future, and we\u2019d love your feedback if you\u2019re trying this out now!) Traefik Configuration \u00b6 You can fully customize the router\u2019s Traefik configuration . All Traefik configuration uses the file provider, not the docker provider. Even though the Traefik daemon itself is running inside the ddev-router container, it uses mounted files for configuration, rather than listening to the Docker socket. Tip Like other DDEV configuration, any file with #ddev-generated will be overwritten unless you choose to \u201ctake over\u201d it yourself. You can do this by removing the #ddev-generated line. DDEV will stop making changes to that file and you\u2019ll be responsible for updating it. Global Traefik Configuration \u00b6 Global configuration is automatically generated in the ~/.ddev/traefik directory: static_config.yaml is the base configuration. certs/default_cert.* files are the default DDEV-generated certificates. config/default_config.yaml contains global dynamic configuration, including pointers to the default certificates. Project Traefik Configuration \u00b6 Project configuration is automatically generated in the project\u2019s .ddev/traefik directory. The certs directory contains the <projectname>.crt and <projectname>.key certificate generated for the project. The config/<projectname>.yaml file contains the configuration for the project, including information about routers, services, and certificates. Debugging Traefik Routing \u00b6 Traefik provides a dynamic description of its configuration you can visit at http://localhost:9999 . When things seem to be going wrong, run ddev poweroff and then start your project again by running ddev start . Examine the router\u2019s logs to see what the Traefik daemon is doing (or failing at) by running docker logs ddev-router or docker logs -f ddev-router .","title":"Experimental Configurations"},{"location":"users/configuration/experimental/#experimental-configurations","text":"","title":"Experimental Configurations"},{"location":"users/configuration/experimental/#remote-docker-instances","text":"You can use remote Docker instances, whether on the internet, inside your network, or running in a virtual machine. On the remote machine, the Docker port must be exposed if it\u2019s not already. See instructions for how to do this on a systemd-based remote server. Be aware that this has serious security implications and must not be done without taking those into consideration. In fact, dockerd will complain: Binding to IP address without --tlsverify is insecure and gives root access on this machine to everyone who has access to your network. host=\"tcp://0.0.0.0:2375\". If you do not already have the Docker client installed (like you would from Docker Desktop), install just the client with brew install docker . Create a Docker context that points to the remote Docker instance. For example, if the remote hostname is debian-11 , then docker context create debian-11 --docker host=tcp://debian-11:2375 && docker use debian-11 . Alternately, you can use the DOCKER_HOST environment variable, e.g. export DOCKER_HOST=tcp://debian-11:2375 . Make sure you can access the remote machine using docker ps . Bind mounts cannot work on a remote Docker setup, so you must use ddev config global --no-bind-mounts . This will cause DDEV to push needed information to and from the remote Docker instance when needed. This also automatically turns on Mutagen caching. You may want to use a FQDN other than *.ddev.site because the DDEV site will not be at 127.0.0.1 . For example, ddev config --fqdns=debian-11 and then use https://debian-11 to access the site. If the Docker host is reachable on the internet, you can actually enable real HTTPS for it using Let\u2019s Encrypt as described in Casual Webhosting . Just make sure port 2375 is not available on the internet.","title":"Remote Docker Instances"},{"location":"users/configuration/experimental/#rancher-desktop-on-macos","text":"Rancher Desktop is another quickly-maturing Docker Desktop alternative for macOS. You can install it for many target platforms from the release page . Rancher Desktop integration currently has no automated testing for DDEV integration. By default, Rancher Desktop will provide a version of the Docker client if you don\u2019t have one on your machine. Rancher changes over the \u201cdefault\u201d context in Docker, so you\u2019ll want to turn off Docker Desktop if you\u2019re using it. Rancher Desktop does not provide bind mounts, so use ddev config global --no-bind-mounts which also turns on Mutagen. Use a non- ddev.site name, ddev config --additional-fqdns=rancher for example, because the resolution of *.ddev.site seems to make it not work. Rancher Desktop does not seem to currently work with mkcert and https , so turn those off with mkcert -uninstall && rm -r \"$(mkcert -CAROOT)\" . This does no harm and can be undone with just mkcert -install again.","title":"Rancher Desktop on macOS"},{"location":"users/configuration/experimental/#traefik-router","text":"DDEV\u2019s router plays an important role in its container architecture , receiving most HTTP and HTTPS traffic for requests like *.ddev.site and delivering them to the relevant project\u2019s web container. ddev-router has been based on a forked, poorly-documented nginx reverse proxy. Versions after DDEV v1.21.3 add a new router based on the popular Traefik Proxy , available as an experimental feature until it becomes the default in a future release. Run the following to enable it: ddev poweroff && ddev config global --use-traefik Most DDEV projects will work fine out of the box, with the benefit of vastly more configuration options and ways to work with the router. (This will likely lead to more features in the future, and we\u2019d love your feedback if you\u2019re trying this out now!)","title":"Traefik Router"},{"location":"users/configuration/hooks/","text":"Hooks \u00b6 Most DDEV commands provide hooks to run tasks before or after the main command executes. To automate setup tasks specific to your project, define them in the project\u2019s config.yaml file. To define command tasks in your configuration, specify the desired command hook as a subfield to hooks , then a list of tasks to run: hooks : post-start : - exec : \"simple command expression\" - exec : \"ls >/dev/null && touch /var/www/html/somefile.txt\" - exec-host : \"simple command expression\" post-import-db : - exec : \"drush uli\" Supported Command Hooks \u00b6 pre-start : Hooks into ddev start . Execute tasks before the project environment starts. Tip Only exec-host tasks can run during pre-start because the containers are not yet running. See Supported Tasks below. post-start : Execute tasks after the project environment has started. pre-import-db and post-import-db : Execute tasks before or after database import. pre-import-files and post-import-files : Execute tasks before or after files are imported. pre-composer and post-composer : Execute tasks before or after the composer command. pre-stop , pre-config , post-config , pre-exec , post-exec , pre-pause , post-pause , pre-pull , post-pull , pre-push , post-push , pre-snapshot , post-snapshot , pre-restore-snapshot , post-restore-snapshot : Execute as the name suggests. post-stop : Hooks into ddev stop . Execute tasks after the project environment stopped. Tip Only exec-host tasks can run during post-stop . See Supported Tasks below. Supported Tasks \u00b6 DDEV currently supports these tasks: exec to execute a command in any service/container. exec-host to execute a command on the host. composer to execute a Composer command in the web container. exec : Execute a shell command in a container (defaults to web container) \u00b6 Value: string providing the command to run. Commands requiring user interaction are not supported. You can also add a \u201cservice\u201d key to the command, specifying to run it on the db container or any other container you use. Example: Use Drush to clear the Drupal cache and get a user login link after database import . hooks : post-import-db : - exec : drush cr - exec : drush uli Example: Use wp-cli to replace the production URL with development URL in a WordPress project\u2019s database . hooks : post-import-db : - exec : wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site Example: Add an extra database before import-db , executing in db container . hooks : pre-import-db : - exec : mysql -uroot -proot -e \"CREATE DATABASE IF NOT EXISTS some_new_database;\" service : db Example: Add the common ll alias into the web container\u2019s .bashrc file . hooks : post-start : - exec : sudo echo alias ll=\\\"ls -lhA\\\" >> ~/.bashrc Tip This could be done more efficiently via .ddev/web-build/Dockerfile as explained in Customizing Images . Advanced usages may require running commands directly with explicit arguments. This approach is useful when Bash interpretation is not required (no environment variables, no redirection, etc.). hooks : post-start : - exec : exec_raw : [ ls , -lR , /var/www/html ] exec-host : Execute a shell command on the host system \u00b6 Value: string providing the command to run. Commands requiring user interaction are not supported. hooks : pre-start : - exec-host : \"command to run\" composer : Execute a Composer command in the web container \u00b6 Value: string providing the Composer command to run. Example: hooks : post-start : - composer : config discard-changes true WordPress Example \u00b6 hooks : post-start : # Install WordPress after start - exec : \"wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db\" - exec : \"wp core install --url=http://mysite.ddev.site --title=MySite --admin_user=admin --admin_email=admin@mail.test\" post-import-db : # Update the URL of your project throughout your database after import - exec : \"wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site\" Drupal 7 Example \u00b6 hooks : post-start : # Install Drupal after start if not installed already - exec : \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=db:db@db/db\" # Generate a one-time login link for the admin account - exec : \"drush uli\" post-import-db : # Set the project name - exec : \"drush vset site_name MyDevSite\" # Enable the environment indicator module - exec : \"drush en -y environment_indicator\" # Clear the cache - exec : \"drush cc all\" Drupal 8 Example \u00b6 hooks : post-start : # Install Composer dependencies from the web container - composer : install # Install Drupal after start if not installed already - exec : \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=mysql://db:db@db/db\" # Generate a one-time login link for the admin account - exec : \"drush uli 1\" post-import-db : # Set the site name - exec : \"drush config-set system.site name MyDevSite\" # Enable the environment indicator module - exec : \"drush en -y environment_indicator\" # Clear the cache - exec : \"drush cr\" TYPO3 Example \u00b6 hooks : post-start : - composer : install Adding Additional Debian Packages (PHP Modules) Example \u00b6 webimage_extra_packages : [ \"php-bcmath\" , \"php7.4-tidy\" ] dbimage_extra_packages : [ \"vim\" ]","title":"Hooks"},{"location":"users/configuration/hooks/#hooks","text":"Most DDEV commands provide hooks to run tasks before or after the main command executes. To automate setup tasks specific to your project, define them in the project\u2019s config.yaml file. To define command tasks in your configuration, specify the desired command hook as a subfield to hooks , then a list of tasks to run: hooks : post-start : - exec : \"simple command expression\" - exec : \"ls >/dev/null && touch /var/www/html/somefile.txt\" - exec-host : \"simple command expression\" post-import-db : - exec : \"drush uli\"","title":"Hooks"},{"location":"users/configuration/hooks/#supported-command-hooks","text":"pre-start : Hooks into ddev start . Execute tasks before the project environment starts. Tip Only exec-host tasks can run during pre-start because the containers are not yet running. See Supported Tasks below. post-start : Execute tasks after the project environment has started. pre-import-db and post-import-db : Execute tasks before or after database import. pre-import-files and post-import-files : Execute tasks before or after files are imported. pre-composer and post-composer : Execute tasks before or after the composer command. pre-stop , pre-config , post-config , pre-exec , post-exec , pre-pause , post-pause , pre-pull , post-pull , pre-push , post-push , pre-snapshot , post-snapshot , pre-restore-snapshot , post-restore-snapshot : Execute as the name suggests. post-stop : Hooks into ddev stop . Execute tasks after the project environment stopped. Tip Only exec-host tasks can run during post-stop . See Supported Tasks below.","title":"Supported Command Hooks"},{"location":"users/configuration/hooks/#supported-tasks","text":"DDEV currently supports these tasks: exec to execute a command in any service/container. exec-host to execute a command on the host. composer to execute a Composer command in the web container.","title":"Supported Tasks"},{"location":"users/configuration/hooks/#wordpress-example","text":"hooks : post-start : # Install WordPress after start - exec : \"wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db\" - exec : \"wp core install --url=http://mysite.ddev.site --title=MySite --admin_user=admin --admin_email=admin@mail.test\" post-import-db : # Update the URL of your project throughout your database after import - exec : \"wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site\"","title":"WordPress Example"},{"location":"users/configuration/hooks/#drupal-7-example","text":"hooks : post-start : # Install Drupal after start if not installed already - exec : \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=db:db@db/db\" # Generate a one-time login link for the admin account - exec : \"drush uli\" post-import-db : # Set the project name - exec : \"drush vset site_name MyDevSite\" # Enable the environment indicator module - exec : \"drush en -y environment_indicator\" # Clear the cache - exec : \"drush cc all\"","title":"Drupal 7 Example"},{"location":"users/configuration/hooks/#drupal-8-example","text":"hooks : post-start : # Install Composer dependencies from the web container - composer : install # Install Drupal after start if not installed already - exec : \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=mysql://db:db@db/db\" # Generate a one-time login link for the admin account - exec : \"drush uli 1\" post-import-db : # Set the site name - exec : \"drush config-set system.site name MyDevSite\" # Enable the environment indicator module - exec : \"drush en -y environment_indicator\" # Clear the cache - exec : \"drush cr\"","title":"Drupal 8 Example"},{"location":"users/configuration/hooks/#typo3-example","text":"hooks : post-start : - composer : install","title":"TYPO3 Example"},{"location":"users/configuration/hooks/#adding-additional-debian-packages-php-modules-example","text":"webimage_extra_packages : [ \"php-bcmath\" , \"php7.4-tidy\" ] dbimage_extra_packages : [ \"vim\" ]","title":"Adding Additional Debian Packages (PHP Modules) Example"},{"location":"users/debugging-profiling/blackfire-profiling/","text":"Blackfire Profiling \u00b6 DDEV has built-in Blackfire integration. Basic Blackfire Usage (Using Browser Plugin) \u00b6 Create a Blackfire account. (Free Blackfire accounts are no longer available; see Blackfire pricing .) Install the Chrome or Firefox browser plugin . From Blackfire\u2019s control panel, get the Server ID, Server Token, Client ID, and Client Token from your Account \u2192 Credentials or environment. Configure DDEV with the credentials, ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=<id>,BLACKFIRE_SERVER_TOKEN=<token>,BLACKFIRE_CLIENT_ID=<id>,BLACKFIRE_CLIENT_TOKEN=<token>\" . It\u2019s easiest to do this globally, but you can do the same thing at the project level using ddev config --web-environment-add . (It may be easier to manually edit the relevant config file, .ddev/config.yaml or ~/.ddev/global_config.yaml .) ddev start . ddev blackfire on to enable, ddev blackfire off to disable, ddev blackfire status to see status. With Blackfire enabled, you can use the browser extension . Profiling with the Blackfire CLI \u00b6 The Blackfire CLI is built into the web container, so you don\u2019t need to install it yourself. Add the BLACKFIRE_SERVER_ID , BLACKFIRE_SERVER_TOKEN , BLACKFIRE_CLIENT_ID , and BLACKFIRE_CLIENT_TOKEN environment variables to ~/.ddev/global_config.yaml via the web_environment key: web_environment : - OTHER_ENV=something - BLACKFIRE_SERVER_ID=dde5f66d-xxxxxx - BLACKFIRE_SERVER_TOKEN=09b0ec-xxxxx - BLACKFIRE_CLIENT_ID=f5e88b7e-xxxxx - BLACKFIRE_CLIENT_TOKEN=00cee15-xxxxx1 You can also do this with ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=<id>,BLACKFIRE_SERVER_TOKEN=<token>,BLACKFIRE_CLIENT_ID=<id>,BLACKFIRE_CLIENT_TOKEN=<token>\" , but any existing environment variables will be deleted. 2. ddev start . 3. ddev blackfire on . 4. Click the \u201cBlackfire\u201d browser extension to profile. Examples of Using the Blackfire CLI \u00b6 ddev blackfire on and ddev blackfire off ddev exec blackfire curl https://<yoursite>.ddev.site ddev exec blackfire drush st ddev exec blackfire curl https://<yoursite>.ddev.site ddev ssh and use the Blackfire CLI as described in Profiling HTTP Requests with the CLI .","title":"Blackfire Profiling"},{"location":"users/debugging-profiling/blackfire-profiling/#blackfire-profiling","text":"DDEV has built-in Blackfire integration.","title":"Blackfire Profiling"},{"location":"users/debugging-profiling/blackfire-profiling/#basic-blackfire-usage-using-browser-plugin","text":"Create a Blackfire account. (Free Blackfire accounts are no longer available; see Blackfire pricing .) Install the Chrome or Firefox browser plugin . From Blackfire\u2019s control panel, get the Server ID, Server Token, Client ID, and Client Token from your Account \u2192 Credentials or environment. Configure DDEV with the credentials, ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=<id>,BLACKFIRE_SERVER_TOKEN=<token>,BLACKFIRE_CLIENT_ID=<id>,BLACKFIRE_CLIENT_TOKEN=<token>\" . It\u2019s easiest to do this globally, but you can do the same thing at the project level using ddev config --web-environment-add . (It may be easier to manually edit the relevant config file, .ddev/config.yaml or ~/.ddev/global_config.yaml .) ddev start . ddev blackfire on to enable, ddev blackfire off to disable, ddev blackfire status to see status. With Blackfire enabled, you can use the browser extension .","title":"Basic Blackfire Usage (Using Browser Plugin)"},{"location":"users/debugging-profiling/blackfire-profiling/#profiling-with-the-blackfire-cli","text":"The Blackfire CLI is built into the web container, so you don\u2019t need to install it yourself. Add the BLACKFIRE_SERVER_ID , BLACKFIRE_SERVER_TOKEN , BLACKFIRE_CLIENT_ID , and BLACKFIRE_CLIENT_TOKEN environment variables to ~/.ddev/global_config.yaml via the web_environment key: web_environment : - OTHER_ENV=something - BLACKFIRE_SERVER_ID=dde5f66d-xxxxxx - BLACKFIRE_SERVER_TOKEN=09b0ec-xxxxx - BLACKFIRE_CLIENT_ID=f5e88b7e-xxxxx - BLACKFIRE_CLIENT_TOKEN=00cee15-xxxxx1 You can also do this with ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=<id>,BLACKFIRE_SERVER_TOKEN=<token>,BLACKFIRE_CLIENT_ID=<id>,BLACKFIRE_CLIENT_TOKEN=<token>\" , but any existing environment variables will be deleted. 2. ddev start . 3. ddev blackfire on . 4. Click the \u201cBlackfire\u201d browser extension to profile.","title":"Profiling with the Blackfire CLI"},{"location":"users/debugging-profiling/blackfire-profiling/#examples-of-using-the-blackfire-cli","text":"ddev blackfire on and ddev blackfire off ddev exec blackfire curl https://<yoursite>.ddev.site ddev exec blackfire drush st ddev exec blackfire curl https://<yoursite>.ddev.site ddev ssh and use the Blackfire CLI as described in Profiling HTTP Requests with the CLI .","title":"Examples of Using the Blackfire CLI"},{"location":"users/debugging-profiling/step-debugging/","text":"Step Debugging with Xdebug \u00b6 Every DDEV project is automatically configured with Xdebug so that popular IDEs can do step debugging of PHP code. Xdebug is a server-side tool, and it\u2019s installed automatically in the container so you don\u2019t have to install or configure it on your workstation. Xdebug is disabled by default for performance reasons, so you\u2019ll need to enable it and configure your IDE before can start debugging. All IDEs basically work the same, listening on a port and reacting when they\u2019re contacted there. IDEs other than those listed here work fine, if they listen on Xdebug\u2019s default port 9003. Tip This was port 9000 through DDEV v1.18, changed in v1.19+ to port 9003. Key facts: Enable Xdebug by running ddev xdebug or ddev xdebug on from your project directory. It will remain enabled until you start or restart the project. Disable Xdebug for better performance when not debugging with ddev xdebug off . ddev xdebug status will show Xdebug\u2019s current status. The IDE\u2019s debug server port must be set to Xdebug\u2019s default 9003, which may already be the case in popular IDEs. If the unusual case that you have a port conflict, see Using Xdebug on a Port Other than the Default 9003 below. In the case of using running your IDE inside WSL2 (using WSLg) or with a proxy setup like JetBrains Gateway, you can set that with ddev config global --xdebug-ide-location=wsl2 . If you're running your IDE with a proxy inside the web container, you can set that with `ddev config global --xdebug-ide-location=container. For more background on Xdebug, see Xdebug documentation . The intention here is that one won\u2019t have to understand Xdebug to do debugging. IDE Setup \u00b6 PhpStorm Visual Studio Code (VS Code) PhpStorm Debugging Setup \u00b6 PhpStorm is a leading PHP development IDE with extensive built-in debugging support. It provides two ways to do debugging: \u201czero-configuration\u201d debugging which requires very little effort in the PhpStorm IDE, and a \u201crun configuration\u201d you can set up just like Netbeans or Eclipse. If you\u2019re using PhpStorm inside WSL2 or Linux Make PhpStorm listen for Xdebug using IPv4 by visiting Help \u2192 Edit Custom VM Options, and adding an additional line: -Djava.net.preferIPv4Stack=true . The Linux version of PhpStorm seems to otherwise default to only using IPv6. If using PhpStorm inside WSL2 or with JetBrains Gateway Make PhpStorm listen to the right IP address with ddev config global --xdebug-ide-location=wsl2 PhpStorm Zero-Configuration Debugging \u00b6 PhpStorm zero-configuration debugging will automatically detect a connection and offer to create a \u201cserver\u201d that maps your workstation files to the container. This means you only have to: Toggle the \u201cStart Listening for PHP Debug Connections\u201d button: Set a breakpoint. Visit a page that should stop in the breakpoint you set. PhpStorm will ask you what mapping to use, so it can figure out how to map the path inside the container to the path on your workstation. The first time you do this with a project, PhpStorm will pop up a \u201cserver\u201d dialog box to set the mapping. The default will work, but it\u2019s best to click the checkbox to map the whole project directory to /var/www/html . When using this zero-configuration option: Use the latest DDEV version. Under Run \u2192 Edit Configurations , check that there are no servers already defined. PhpStorm will create a new server for you if no others exist. You can delete all servers and have PhpStorm create a new one, or you can create/edit an existing server as discussed below. PhpStorm \"Run/Debug Configuration\" Debugging \u00b6 PhpStorm run/debug configurations require more setup but may be easier and more flexible for some people. Under the Run menu select Edit configurations . Click the + in the upper left and choose PHP Web Application to create a configuration. Give it a reasonable name. Create a \u201cserver\u201d for the project. Make sure Name is exactly the same as your host (e.g. my-site.ddev.site ): Add file mappings for the files on the server. Click on the local repo path and add /var/www/html as the Absolute path on the server and your repository root as the path on the host. Set an appropriate breakpoint. Start debugging by clicking the \u201cdebug\u201d button, which will launch a page in your browser: PhpStorm and Command-Line Debugging \u00b6 If you need to debug command-line PHP processes, especially code that\u2019s outside the docroot, the environment variable PHP_IDE_CONFIG is already set inside the web container, so you don\u2019t have to do much more. However, if you\u2019ve not yet used PhpStorm with Xdebug for a regular web request, do that to automatically create the PhpStorm \u201cserver\u201d with the same name as your primary URL ( Languages and Frameworks \u2192 PHP \u2192 Servers ). The key job of the server is to map filesystem locations on the workstation (your computer) to filesystem locations on the remote server\u2014in this case the ddev-webserver container. Often, PhpStorm automatically sets up a mapping that doesn\u2019t include the entire project, meaning things like the vendor directory may not be mapped. You can fix this by mapping the top-level directory of your project to /var/www/html in the container: Visual Studio Code (VS Code) Debugging Setup \u00b6 Install the PHP Debug extension. Update the project\u2019s .vscode/launch.json to add the \u201cListen for Xdebug\u201d configuration from this config snippet . For more on customizing launch.json , see the VS Code docs . Set a breakpoint in your index.php . If it isn\u2019t solid red, restart. In the menu, choose Run \u2192 Start Debugging . You may have to select \u201cListen for Xdebug\u201d by the green arrowhead at the top left. The bottom pane of VS Code should now be orange (live) and should say \u201cListen for Xdebug\u201d. Enable Xdebug with ddev xdebug on . In a browser, visit your project and confirm you hit the breakpoint. If you\u2019re using VS Code on Windows with WSL2 VS Code should suggest two extensions if you have WSL2 enabled along with a PHP project: \u201cPHP Debug\u201d and \u201cRemote - WSL\u201d. You\u2019ll need to enable both of these extensions in your distro (e.g. Ubuntu). Using Xdebug on a Port Other than the Default 9003 \u00b6 By default, DDEV is set up to contact the default port, port 9003 on your IDE. However, if you have something else listening on that port or your IDE does not yet default to 9003, you\u2019ll need to change the port. (PhpStorm and VS Code have switch to supporting 9003 instead of 9000 for some time now.) To override the port, add an override file in the project\u2019s .ddev/php directory . For example, a file .ddev/php/xdebug_client_port.ini would change to use the legacy port 9000: [PHP] xdebug.client_port = 9000 Then change your IDE\u2019s configuration to listen on the new port. Tip If you\u2019re using a PHP version below 7.2, you\u2019ll be using Xdebug version 2.x instead of 3.x and your port config should be xdebug.remote_port instead. Troubleshooting Xdebug \u00b6 The basic thing to understand about Xdebug is that it\u2019s a network protocol. Your IDE (like PhpStorm) will listen on the Xdebug port (9003 by default in v1.19+, previously 9000). If Xdebug is enabled in the DDEV web container ( ddev xdebug on ), PHP inside that container will try to open a TCP connection to the IDE. Docker\u2019s networking places the host-side listening IDE at host.docker.internal:9003 , so you have to make sure the network connection is clear and can be made and everything should work. Here are basic steps to take to sort out any difficulty: Remember the port in play is port 9003. Reboot your computer. If you're running WSL2 and have PhpStorm running inside WSL2 (the Linux version of PhpStorm) then ddev config global --xdebug-ide-location=wsl2 . Temporarily disable any firewall or VPN if you\u2019re having trouble. Xdebug is a network protocol, and the PHP process inside the web container must be able to establish a TCP connection to the listening IDE (PhpStorm, for example). Use ddev xdebug on to enable Xdebug when you want it, and ddev xdebug off when you\u2019re done with it. Set a breakpoint at the first executable line of your index.php . Tell your IDE to start listening. (PhpStorm: click the telephone button, VS Code: run the debugger.) Use curl or a browser to create a web request. For example, curl https://d9.ddev.site . If the IDE doesn\u2019t respond, take a look at ddev logs . A message like this means Xdebug inside the container can\u2019t make a connection to port 9003: PHP message: Xdebug: [Step Debug] Could not connect to debugging client. Tried: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port) ddev ssh into the web container. Can you run telnet host.docker.internal 9003 and have it connect? If not, you might have an over-aggressive firewall. Disable it, or add a rule that would allow the connection to pass through. For example, on Debian/Ubuntu that would be sudo ufw allow 9003/tcp . In PhpStorm, disable the \u201clisten for connections\u201d button so it won\u2019t listen. Or just exit PhpStorm. With another IDE like VS Code, stop the debugger from listening. ddev ssh into the web container. Can you run telnet host.docker.internal 9003 and have it connect? If so, you have something else running on port 9003. On the host, use sudo lsof -i :9003 -sTCP:LISTEN to find out what\u2019s there and stop it. Don\u2019t continue debugging until your telnet command does not connect. (On Windows WSL2 you may have to look for listeners both inside WSL2 and on the Windows side.) Now click the \u201clisten\u201d button on PhpStorm to start listening for connections. ddev ssh and try the telnet host.docker.internal 9003 again. It should connect. If not, maybe PhpStorm is not listening, or not configured to listen on port 9003? Check to make sure that Xdebug is enabled. You can use php -i | grep -i xdebug inside the container, or use any other technique you want that gives the output of phpinfo() , including Drupal\u2019s admin/reports/status/php . You should see with Xdebug v3 and php -i | grep xdebug.mode should give you xdebug.mode => debug,develop => debug,develop\" . Set a breakpoint in the first relevant line of your index.php and then visit the site in a browser. It should stop at that first line. If you\u2019re using PhpStorm inside WSL2 (or perhaps other Linux configurations), go to Help \u2192 Edit Custom VM Options and add an additional line: -Djava.net.preferIPv4Stack=true This makes PhpStorm listen for Xdebug using IPv4; the Linux version of PhpStorm seems to default to using only IPv6. If you\u2019re on WSL2 using Docker Desktop, make sure that the docker command is the one provided by Docker Desktop. ls -l $(which docker) should show a link to /mnt/wsl/docker-desktop... . If you\u2019re on WSL2 using Docker installed inside WSL2, make sure that ls -l $(which docker) is not a link to /mnt/wsl .","title":"Step Debugging with Xdebug"},{"location":"users/debugging-profiling/step-debugging/#step-debugging-with-xdebug","text":"Every DDEV project is automatically configured with Xdebug so that popular IDEs can do step debugging of PHP code. Xdebug is a server-side tool, and it\u2019s installed automatically in the container so you don\u2019t have to install or configure it on your workstation. Xdebug is disabled by default for performance reasons, so you\u2019ll need to enable it and configure your IDE before can start debugging. All IDEs basically work the same, listening on a port and reacting when they\u2019re contacted there. IDEs other than those listed here work fine, if they listen on Xdebug\u2019s default port 9003. Tip This was port 9000 through DDEV v1.18, changed in v1.19+ to port 9003. Key facts: Enable Xdebug by running ddev xdebug or ddev xdebug on from your project directory. It will remain enabled until you start or restart the project. Disable Xdebug for better performance when not debugging with ddev xdebug off . ddev xdebug status will show Xdebug\u2019s current status. The IDE\u2019s debug server port must be set to Xdebug\u2019s default 9003, which may already be the case in popular IDEs. If the unusual case that you have a port conflict, see Using Xdebug on a Port Other than the Default 9003 below. In the case of using running your IDE inside WSL2 (using WSLg) or with a proxy setup like JetBrains Gateway, you can set that with ddev config global --xdebug-ide-location=wsl2 . If you're running your IDE with a proxy inside the web container, you can set that with `ddev config global --xdebug-ide-location=container. For more background on Xdebug, see Xdebug documentation . The intention here is that one won\u2019t have to understand Xdebug to do debugging.","title":"Step Debugging with Xdebug"},{"location":"users/debugging-profiling/step-debugging/#ide-setup","text":"PhpStorm Visual Studio Code (VS Code)","title":"IDE Setup"},{"location":"users/debugging-profiling/step-debugging/#using-xdebug-on-a-port-other-than-the-default-9003","text":"By default, DDEV is set up to contact the default port, port 9003 on your IDE. However, if you have something else listening on that port or your IDE does not yet default to 9003, you\u2019ll need to change the port. (PhpStorm and VS Code have switch to supporting 9003 instead of 9000 for some time now.) To override the port, add an override file in the project\u2019s .ddev/php directory . For example, a file .ddev/php/xdebug_client_port.ini would change to use the legacy port 9000: [PHP] xdebug.client_port = 9000 Then change your IDE\u2019s configuration to listen on the new port. Tip If you\u2019re using a PHP version below 7.2, you\u2019ll be using Xdebug version 2.x instead of 3.x and your port config should be xdebug.remote_port instead.","title":"Using Xdebug on a Port Other than the Default 9003"},{"location":"users/debugging-profiling/step-debugging/#troubleshooting-xdebug","text":"The basic thing to understand about Xdebug is that it\u2019s a network protocol. Your IDE (like PhpStorm) will listen on the Xdebug port (9003 by default in v1.19+, previously 9000). If Xdebug is enabled in the DDEV web container ( ddev xdebug on ), PHP inside that container will try to open a TCP connection to the IDE. Docker\u2019s networking places the host-side listening IDE at host.docker.internal:9003 , so you have to make sure the network connection is clear and can be made and everything should work. Here are basic steps to take to sort out any difficulty: Remember the port in play is port 9003. Reboot your computer. If you're running WSL2 and have PhpStorm running inside WSL2 (the Linux version of PhpStorm) then ddev config global --xdebug-ide-location=wsl2 . Temporarily disable any firewall or VPN if you\u2019re having trouble. Xdebug is a network protocol, and the PHP process inside the web container must be able to establish a TCP connection to the listening IDE (PhpStorm, for example). Use ddev xdebug on to enable Xdebug when you want it, and ddev xdebug off when you\u2019re done with it. Set a breakpoint at the first executable line of your index.php . Tell your IDE to start listening. (PhpStorm: click the telephone button, VS Code: run the debugger.) Use curl or a browser to create a web request. For example, curl https://d9.ddev.site . If the IDE doesn\u2019t respond, take a look at ddev logs . A message like this means Xdebug inside the container can\u2019t make a connection to port 9003: PHP message: Xdebug: [Step Debug] Could not connect to debugging client. Tried: host.docker.internal:9003 (through xdebug.client_host/xdebug.client_port) ddev ssh into the web container. Can you run telnet host.docker.internal 9003 and have it connect? If not, you might have an over-aggressive firewall. Disable it, or add a rule that would allow the connection to pass through. For example, on Debian/Ubuntu that would be sudo ufw allow 9003/tcp . In PhpStorm, disable the \u201clisten for connections\u201d button so it won\u2019t listen. Or just exit PhpStorm. With another IDE like VS Code, stop the debugger from listening. ddev ssh into the web container. Can you run telnet host.docker.internal 9003 and have it connect? If so, you have something else running on port 9003. On the host, use sudo lsof -i :9003 -sTCP:LISTEN to find out what\u2019s there and stop it. Don\u2019t continue debugging until your telnet command does not connect. (On Windows WSL2 you may have to look for listeners both inside WSL2 and on the Windows side.) Now click the \u201clisten\u201d button on PhpStorm to start listening for connections. ddev ssh and try the telnet host.docker.internal 9003 again. It should connect. If not, maybe PhpStorm is not listening, or not configured to listen on port 9003? Check to make sure that Xdebug is enabled. You can use php -i | grep -i xdebug inside the container, or use any other technique you want that gives the output of phpinfo() , including Drupal\u2019s admin/reports/status/php . You should see with Xdebug v3 and php -i | grep xdebug.mode should give you xdebug.mode => debug,develop => debug,develop\" . Set a breakpoint in the first relevant line of your index.php and then visit the site in a browser. It should stop at that first line. If you\u2019re using PhpStorm inside WSL2 (or perhaps other Linux configurations), go to Help \u2192 Edit Custom VM Options and add an additional line: -Djava.net.preferIPv4Stack=true This makes PhpStorm listen for Xdebug using IPv4; the Linux version of PhpStorm seems to default to using only IPv6. If you\u2019re on WSL2 using Docker Desktop, make sure that the docker command is the one provided by Docker Desktop. ls -l $(which docker) should show a link to /mnt/wsl/docker-desktop... . If you\u2019re on WSL2 using Docker installed inside WSL2, make sure that ls -l $(which docker) is not a link to /mnt/wsl .","title":"Troubleshooting Xdebug"},{"location":"users/debugging-profiling/xdebug-profiling/","text":"Xdebug Profiling \u00b6 Although DDEV has more sophisticated profiling capabilities with xhprof and Blackfire , it also has built-in support for Xdebug profiling . Basic usage \u00b6 Create the directory .ddev/xdebug , which is where the output files will be dumped. Switch Xdebug to profiling mode by adding this in .ddev/php/xdebug.ini : xdebug.mode = profile xdebug.start_with_request = yes xdebug.output_dir = /var/www/html/.ddev/xdebug xdebug.profiler_output_name = trace.%c%p%r%u.out Enable Xdebug with ddev xdebug on . Make an HTTP request to the DDEV project and the profile will be located in .ddev/xdebug directory. Analyze it with any call graph viewer, for example kcachegrind . When you\u2019re done, execute ddev xdebug off to avoid generating unneeded profile files. Information Links \u00b6 Xdebug profiling docs kcachegrind","title":"Xdebug Profiling"},{"location":"users/debugging-profiling/xdebug-profiling/#xdebug-profiling","text":"Although DDEV has more sophisticated profiling capabilities with xhprof and Blackfire , it also has built-in support for Xdebug profiling .","title":"Xdebug Profiling"},{"location":"users/debugging-profiling/xdebug-profiling/#basic-usage","text":"Create the directory .ddev/xdebug , which is where the output files will be dumped. Switch Xdebug to profiling mode by adding this in .ddev/php/xdebug.ini : xdebug.mode = profile xdebug.start_with_request = yes xdebug.output_dir = /var/www/html/.ddev/xdebug xdebug.profiler_output_name = trace.%c%p%r%u.out Enable Xdebug with ddev xdebug on . Make an HTTP request to the DDEV project and the profile will be located in .ddev/xdebug directory. Analyze it with any call graph viewer, for example kcachegrind . When you\u2019re done, execute ddev xdebug off to avoid generating unneeded profile files.","title":"Basic usage"},{"location":"users/debugging-profiling/xdebug-profiling/#information-links","text":"Xdebug profiling docs kcachegrind","title":"Information Links"},{"location":"users/debugging-profiling/xhprof-profiling/","text":"xhprof Profiling \u00b6 DDEV has built-in support for xhprof . The official PECL xhprof extension only supports PHP >=7.x. Basic xhprof Usage \u00b6 Enable xhprof with ddev xhprof on (or ddev xhprof or ddev xhprof enable ) and check its status with ddev xhprof status . ddev xhprof on will show you the URL you can use to see the xhprof analysis, https://<projectname>.ddev.site/xhprof shows recent runs. (It\u2019s often useful to keep a tab or window open with this URL and refresh as needed.) Use a web browser or other technique to visit a page whose performance you want to study. To eliminate first-time cache-building issues, you may want to hit it twice. Visit one of the links provided by ddev xhprof on and study the results. On the profiler output page, you can drill down to the function that you want to study, or use the graphical \u201cView Full Callgraph\u201d link. Click the column headers to sort by number of runs and inclusive or exclusive wall time, then drill down into the function you want to study and do the same. The runs are erased on ddev restart . If you\u2019re using Apache with a custom .ddev/apache/apache-site.conf , you\u2019ll need to make sure it includes Alias \"/xhprof\" \"/var/xhprof/xhprof_html\" from DDEV\u2019s default apache-site.conf . For a tutorial on how to study the various xhprof reports, see the section \u201cHow to use XHPROF UI\u201d in A Guide to Profiling with XHPROF . It takes a little time to get your eyes used to the reporting. (You don\u2019t need to do any of the installation described in that article!) Advanced xhprof Configuration \u00b6 You can change the contents of the xhprof_prepend function in .ddev/xhprof/xhprof_prepend.php . For example, you may want to add a link to the profile run to the bottom of the profiled web page. The provided xhprof_prepend.php has comments and a sample function to do that, which works with Drupal 7. If you change it, remove the #ddev-generated line from the top, and check it in ( git add -f .ddev/xhprof/xhprof_prepend.php ). Another example: you could exclude memory profiling so there are fewer columns to study. Change xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY); to just xhprof_enable(XHPROF_FLAGS_CPU); in .ddev/xhprof/xhprof_prepend.php and remove the #ddev-generated at the top of the file. See the docs on xhprof_enable() . Information Links \u00b6 php.net xhprof Old facebook xhprof docs rfay screencast on xhprof and blackfire.io pecl.php.net docs Upstream GitHub repo lonngxhinH/xhprof","title":"xhprof Profiling"},{"location":"users/debugging-profiling/xhprof-profiling/#xhprof-profiling","text":"DDEV has built-in support for xhprof . The official PECL xhprof extension only supports PHP >=7.x.","title":"xhprof Profiling"},{"location":"users/debugging-profiling/xhprof-profiling/#basic-xhprof-usage","text":"Enable xhprof with ddev xhprof on (or ddev xhprof or ddev xhprof enable ) and check its status with ddev xhprof status . ddev xhprof on will show you the URL you can use to see the xhprof analysis, https://<projectname>.ddev.site/xhprof shows recent runs. (It\u2019s often useful to keep a tab or window open with this URL and refresh as needed.) Use a web browser or other technique to visit a page whose performance you want to study. To eliminate first-time cache-building issues, you may want to hit it twice. Visit one of the links provided by ddev xhprof on and study the results. On the profiler output page, you can drill down to the function that you want to study, or use the graphical \u201cView Full Callgraph\u201d link. Click the column headers to sort by number of runs and inclusive or exclusive wall time, then drill down into the function you want to study and do the same. The runs are erased on ddev restart . If you\u2019re using Apache with a custom .ddev/apache/apache-site.conf , you\u2019ll need to make sure it includes Alias \"/xhprof\" \"/var/xhprof/xhprof_html\" from DDEV\u2019s default apache-site.conf . For a tutorial on how to study the various xhprof reports, see the section \u201cHow to use XHPROF UI\u201d in A Guide to Profiling with XHPROF . It takes a little time to get your eyes used to the reporting. (You don\u2019t need to do any of the installation described in that article!)","title":"Basic xhprof Usage"},{"location":"users/debugging-profiling/xhprof-profiling/#advanced-xhprof-configuration","text":"You can change the contents of the xhprof_prepend function in .ddev/xhprof/xhprof_prepend.php . For example, you may want to add a link to the profile run to the bottom of the profiled web page. The provided xhprof_prepend.php has comments and a sample function to do that, which works with Drupal 7. If you change it, remove the #ddev-generated line from the top, and check it in ( git add -f .ddev/xhprof/xhprof_prepend.php ). Another example: you could exclude memory profiling so there are fewer columns to study. Change xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY); to just xhprof_enable(XHPROF_FLAGS_CPU); in .ddev/xhprof/xhprof_prepend.php and remove the #ddev-generated at the top of the file. See the docs on xhprof_enable() .","title":"Advanced xhprof Configuration"},{"location":"users/debugging-profiling/xhprof-profiling/#information-links","text":"php.net xhprof Old facebook xhprof docs rfay screencast on xhprof and blackfire.io pecl.php.net docs Upstream GitHub repo lonngxhinH/xhprof","title":"Information Links"},{"location":"users/details/alternate-uses/","text":"Alternate DDEV Uses \u00b6 Continuous Integration (CI) \u00b6 A number of people have found it easy to test their projects using DDEV on a CI system like GitHub Actions , Travis CI , or CircleCI . Instead of setting up a hosting environment for testing, they start the project using DDEV and run their tests. Examples of this approach are demonstrated in Codeception Tests in Travis CI with DDEV and Selenium and a DDEV Setup GitHub Action . Integration of DDEV Docker Images Into Other Projects \u00b6 You can use DDEV Docker images outside the context of the DDEV environment. People have used the ddev-webserver image for running tests in PhpStorm, for example. Casual Hosting \u00b6 Experimental Feature! This is not a replacement for scalable, managed hosting. It\u2019s unknown how much traffic it can handle in a given environment. One of DDEV\u2019s experimental features is lightweight hosting with Let\u2019s Encrypt for HTTPS support. You can run DDEV on a public web server, point DNS to it, and use it as a limited hosting environment. This may be appropriate for small or abandoned sites that have special requirements like old versions of PHP that aren\u2019t supported elsewhere. Here\u2019s how to try it for yourself: Install DDEV on an internet-connected Linux server. (You\u2019re responsible for your firewall and maintenance of the server!) On Debian/Ubuntu, you can set up a simple firewall with ufw allow 80 && ufw allow 443 && ufw allow 22 && ufw enable . Point DNS for the site you\u2019re going to host to the server. Before proceeding, your system and your project must be accessible on the internet on port 80 and your project DNS name ( myproject.example.com ) must resolve to the appropriate server. Configure your project with ddev config . Import your database and files using ddev import-db and ddev import-files . Tell DDEV to listen on all network interfaces, omit phpMyAdmin and its SSH agent, use hardened images, and enable Let\u2019s Encrypt: ddev config global --router-bind-all-interfaces --omit-containers=dba,ddev-ssh-agent --use-hardened-images --use-letsencrypt --letsencrypt-email=you@example.com` Create your DDEV project as you normally would, but ddev config --project-name=<yourproject> --project-tld=<your-top-level-domain> . If your website responds to multiple hostnames (e.g., with and without www ), you\u2019ll need to add additional_hostnames . Redirect HTTP to HTTPS. If you\u2019re using nginx-fpm , for example, create .ddev/nginx/redirect.conf : if ($http_x_forwarded_proto = \"http\") { return 301 https://$host$request_uri; } Run ddev start and visit your site. With some CMSes, you may also need to clear your cache. You may have to restart DDEV with ddev poweroff && ddev start --all if Let\u2019s Encrypt has failed because port 80 is not open, or the DNS name is not yet resolving. (Use docker logs ddev-router to see Let\u2019s Encrypt activity.) Additional Server Setup \u00b6 Depending on how you\u2019re using this, you may want to set up automated database and file backups\u2014ideally off-site\u2014like you would on any production system. Many CMSes have modules/plugins to allow this, and you can use ddev export-db or ddev snapshot as you see fit and do the backup on the host. You may want to allow your host system to send email. On Debian/Ubuntu sudo apt-get install postfix . Typically you\u2019ll need to set up reverse DNS for your system, and perhaps SPF and/or DKIM records to for more reliable delivery to other mail systems. You may want to generally tailor your PHP settings for hosting rather than local development. Error-reporting defaults in php.ini , for example, may be too verbose and expose to much information publicly. You may want something less: ; Error handling and logging ; error_reporting = E_ALL display_errors = On display_startup_errors = On log_errors = On To make DDEV start sites on system boot, you\u2019ll want to set up a systemd unit on systems like Debian/Ubuntu and Fedora. For example, a file named /etc/systemd/system/ddev.service containing: # Start DDEV when system starts (after Docker) # Stop DDEV when Docker shuts down # Start with `sudo systemctl start ddev` # Enable on boot with `sudo systemctl enable ddev` # Make sure to edit the User= for your user and the # full path to `ddev` on your system. # Optionally give a list of sites instead of --all [Unit] Description=DDEV sites After=network.target Requires=docker.service PartOf=docker.service [Service] User=rfay Type=oneshot ExecStart=/usr/local/bin/ddev start --all RemainAfterExit=true ExecStop=/usr/local/bin/ddev poweroff [Install] WantedBy=multi-user.target You\u2019ll need to regularly renew the Let\u2019s Encrypt certificates. This is often done on a system reboot, but that may not be soon enough. A cron with the command docker exec ddev-router bash -c \"certbot renew && nginx -s reload\" will do the renewals. You\u2019ll likely want to turn off PHP errors to screen in a .ddev/php/noerrors.ini : display_errors = Off display_startup_errors = Off Caveats: It\u2019s unknown how much traffic a given server and Docker setup can sustain, or what the results will be if the traffic is more than the server can handle. DDEV does not provide outgoing SMTP mail handling service, and the development-focused MailHog feature is disabled if you\u2019re using use_hardened_images . You can provide SMTP service a number of ways, but the recommended way is to use SMTP in your application via a third-party transactional email service such as SendGrid , Postmark , or Mailgun . This is the best way to ensure mail is actually delivered. You may need an external cron trigger for some CMSes. Debugging Let\u2019s Encrypt failures requires viewing the ddev-router logs with docker logs ddev-router . A malicious attack on a website hosted with use_hardened_images will likely not be able to do anything significant to the host, but it can certainly change your code, which is mounted on the host. When use_hardened_images is enabled, Docker runs the web image as an unprivileged user, and the container does not have sudo. However, any Docker server hosted on the internet is a potential vulnerability. Keep your packages up to date and make sure your firewall does not allow access to ports other than (normally) 22, 80, and 443. There are no warranties implied or expressed.","title":"Alternate DDEV Uses"},{"location":"users/details/alternate-uses/#alternate-ddev-uses","text":"","title":"Alternate DDEV Uses"},{"location":"users/details/alternate-uses/#continuous-integration-ci","text":"A number of people have found it easy to test their projects using DDEV on a CI system like GitHub Actions , Travis CI , or CircleCI . Instead of setting up a hosting environment for testing, they start the project using DDEV and run their tests. Examples of this approach are demonstrated in Codeception Tests in Travis CI with DDEV and Selenium and a DDEV Setup GitHub Action .","title":"Continuous Integration (CI)"},{"location":"users/details/alternate-uses/#integration-of-ddev-docker-images-into-other-projects","text":"You can use DDEV Docker images outside the context of the DDEV environment. People have used the ddev-webserver image for running tests in PhpStorm, for example.","title":"Integration of DDEV Docker Images Into Other Projects"},{"location":"users/details/alternate-uses/#casual-hosting","text":"Experimental Feature! This is not a replacement for scalable, managed hosting. It\u2019s unknown how much traffic it can handle in a given environment. One of DDEV\u2019s experimental features is lightweight hosting with Let\u2019s Encrypt for HTTPS support. You can run DDEV on a public web server, point DNS to it, and use it as a limited hosting environment. This may be appropriate for small or abandoned sites that have special requirements like old versions of PHP that aren\u2019t supported elsewhere. Here\u2019s how to try it for yourself: Install DDEV on an internet-connected Linux server. (You\u2019re responsible for your firewall and maintenance of the server!) On Debian/Ubuntu, you can set up a simple firewall with ufw allow 80 && ufw allow 443 && ufw allow 22 && ufw enable . Point DNS for the site you\u2019re going to host to the server. Before proceeding, your system and your project must be accessible on the internet on port 80 and your project DNS name ( myproject.example.com ) must resolve to the appropriate server. Configure your project with ddev config . Import your database and files using ddev import-db and ddev import-files . Tell DDEV to listen on all network interfaces, omit phpMyAdmin and its SSH agent, use hardened images, and enable Let\u2019s Encrypt: ddev config global --router-bind-all-interfaces --omit-containers=dba,ddev-ssh-agent --use-hardened-images --use-letsencrypt --letsencrypt-email=you@example.com` Create your DDEV project as you normally would, but ddev config --project-name=<yourproject> --project-tld=<your-top-level-domain> . If your website responds to multiple hostnames (e.g., with and without www ), you\u2019ll need to add additional_hostnames . Redirect HTTP to HTTPS. If you\u2019re using nginx-fpm , for example, create .ddev/nginx/redirect.conf : if ($http_x_forwarded_proto = \"http\") { return 301 https://$host$request_uri; } Run ddev start and visit your site. With some CMSes, you may also need to clear your cache. You may have to restart DDEV with ddev poweroff && ddev start --all if Let\u2019s Encrypt has failed because port 80 is not open, or the DNS name is not yet resolving. (Use docker logs ddev-router to see Let\u2019s Encrypt activity.)","title":"Casual Hosting"},{"location":"users/details/offline-usage/","text":"Using DDEV Offline \u00b6 DDEV attempts to work smoothly offline, and you shouldn\u2019t have to do anything to make it work: It doesn\u2019t attempt instrumentation or update reporting if offline It falls back to using /etc/hosts entries DNS resolution fails However, it does not (yet) attempt to prevent Docker pulls if a new Docker image is required, so you\u2019ll want to make sure that you try a ddev start before going offline to make sure everything has been pulled. If you have a project running when you\u2019re online (using DNS for name resolution) and you then go offline, you\u2019ll want to do a ddev restart to get the hostname added into /etc/hosts for name resolution. You have general options as well: In .ddev/config.yaml , use_dns_when_possible: false will make DDEV never try to use DNS for resolution, instead adding hostnames to /etc/hosts . You can also use ddev config --use-dns-when-possible=false to set this configuration option. In .ddev/config.yaml , you can use project_tld: example.com to have DDEV use a project TLD that won\u2019t be looked up via DNS. You can do the equivalent with ddev config --project-tld=example.com . This also works as a global option in ~/.ddev/global_config.yaml or running ddev config global --project-tld=example.com . You can also set up a local DNS server like dnsmasq (Linux and macOS, brew install dnsmasq ) or ( unbound or many others on Windows) in your own host environment that serves the project_tld that you choose, and DNS resolution will work fine. You\u2019ll likely want a wildcard A record pointing to 127.0.0.1 on most DDEV installations. If you use dnsmasq, you must configure it to allow DNS rebinding. If you\u2019re using a browser on Windows and accessing a DDEV project in WSL2, Windows will attempt to resolve the site name via DNS. This will fail if you don\u2019t have an internet connection. To resolve this, update your C:\\Windows\\System32\\drivers\\etc\\hosts file manually: 127.0.0.1 example.ddev.site Administrative Privileges Required You must have administrative privileges to save the Windows hosts file. If you\u2019re on Windows with a growing number of hostnames, be aware of the 10-hosts-per-line limitation .","title":"Using DDEV Offline"},{"location":"users/details/offline-usage/#using-ddev-offline","text":"DDEV attempts to work smoothly offline, and you shouldn\u2019t have to do anything to make it work: It doesn\u2019t attempt instrumentation or update reporting if offline It falls back to using /etc/hosts entries DNS resolution fails However, it does not (yet) attempt to prevent Docker pulls if a new Docker image is required, so you\u2019ll want to make sure that you try a ddev start before going offline to make sure everything has been pulled. If you have a project running when you\u2019re online (using DNS for name resolution) and you then go offline, you\u2019ll want to do a ddev restart to get the hostname added into /etc/hosts for name resolution. You have general options as well: In .ddev/config.yaml , use_dns_when_possible: false will make DDEV never try to use DNS for resolution, instead adding hostnames to /etc/hosts . You can also use ddev config --use-dns-when-possible=false to set this configuration option. In .ddev/config.yaml , you can use project_tld: example.com to have DDEV use a project TLD that won\u2019t be looked up via DNS. You can do the equivalent with ddev config --project-tld=example.com . This also works as a global option in ~/.ddev/global_config.yaml or running ddev config global --project-tld=example.com . You can also set up a local DNS server like dnsmasq (Linux and macOS, brew install dnsmasq ) or ( unbound or many others on Windows) in your own host environment that serves the project_tld that you choose, and DNS resolution will work fine. You\u2019ll likely want a wildcard A record pointing to 127.0.0.1 on most DDEV installations. If you use dnsmasq, you must configure it to allow DNS rebinding. If you\u2019re using a browser on Windows and accessing a DDEV project in WSL2, Windows will attempt to resolve the site name via DNS. This will fail if you don\u2019t have an internet connection. To resolve this, update your C:\\Windows\\System32\\drivers\\etc\\hosts file manually: 127.0.0.1 example.ddev.site Administrative Privileges Required You must have administrative privileges to save the Windows hosts file. If you\u2019re on Windows with a growing number of hostnames, be aware of the 10-hosts-per-line limitation .","title":"Using DDEV Offline"},{"location":"users/details/opting-in/","text":"Opt-In Usage Information \u00b6 When you start DDEV for the first time or install a new release, you\u2019ll be asked whether to send usage and error information to DDEV\u2019s developers. Regardless of your choice, you can change this at any time by editing ~/.ddev/global_config.yaml and setting instrumentation_opt_in: true or instrumentation_opt_in: false . If you choose to share diagnostics, it helps us tremendously in our effort to improve the tool. Here\u2019s an example of what we might see: If you have any reservations about this, please opt out ( ddev config global --instrumentation-opt-in=false ). If you have any issues or concerns with it, we\u2019d like to know.","title":"Opting in"},{"location":"users/details/opting-in/#opt-in-usage-information","text":"When you start DDEV for the first time or install a new release, you\u2019ll be asked whether to send usage and error information to DDEV\u2019s developers. Regardless of your choice, you can change this at any time by editing ~/.ddev/global_config.yaml and setting instrumentation_opt_in: true or instrumentation_opt_in: false . If you choose to share diagnostics, it helps us tremendously in our effort to improve the tool. Here\u2019s an example of what we might see: If you have any reservations about this, please opt out ( ddev config global --instrumentation-opt-in=false ). If you have any issues or concerns with it, we\u2019d like to know.","title":"Opt-In Usage Information"},{"location":"users/extend/additional-hostnames/","text":"Additional Project Hostnames \u00b6 Add additional hostnames to a project in its .ddev/config.yaml : name: mysite additional_hostnames: - \"extraname\" - \"fr.mysite\" - \"es.mysite\" - \"it.mysite\" - \"\\*.lotsofnames\" This configuration would result in working hostnames of mysite.ddev.site , extraname.ddev.site , fr.mysite.ddev.site , es.mysite.ddev.site , and it.mysite.ddev.site \u2014with full HTTP and HTTPS URLs for each. In addition, the wildcard *.lotsofnames will result in anything *.lotsofnames.ddev.site being recognized by the project. This works only if you\u2019re connected to the internet, using ddev.site for your top-level-domain, and using DNS for name lookups. (These are all the defaults.) Although we recommend extreme care with this feature , you can also provide additional_fqdn entries, which don't use the .ddev.site top-level domain. This feature populates your hosts file with entries which may hide the real DNS entries on the internet, causing way too much head-scratching. If you use a FQDN which is resolvable on the internet, you must use use_dns_when_possible: false or configure that with ddev config --use-dns-when-possible=false . name: somename additional_fqdns: - example.com - somesite.example.com - anothersite.example.com This configuration would result in working FQDNs of somename.ddev.site , example.com , somesite.example.com , and anothersite.example.com . Don\u2019t use the same additional_fqdns or additional_hostnames in two different projects. If you see ddev-router status become unhealthy in ddev list , it\u2019s most often a result of trying to use conflicting FQDNs in more than one project. example.com can only be assigned to one project, or it will break ddev-router . May not work predictably everywhere. This may not work predictably on all systems. There are operating systems and machines where /etc/hosts may not be the first or only resolution technique, especially if the additional_fqdn you use is also in DNS. Don\u2019t override a real domain name! If you use an additional_fqdn that exists on the internet (like www.google.com ), your hosts file will override access to the original (internet) site, and you\u2019ll be sad and confused that you can\u2019t get to it.","title":"Additional Project Hostnames"},{"location":"users/extend/additional-hostnames/#additional-project-hostnames","text":"Add additional hostnames to a project in its .ddev/config.yaml : name: mysite additional_hostnames: - \"extraname\" - \"fr.mysite\" - \"es.mysite\" - \"it.mysite\" - \"\\*.lotsofnames\" This configuration would result in working hostnames of mysite.ddev.site , extraname.ddev.site , fr.mysite.ddev.site , es.mysite.ddev.site , and it.mysite.ddev.site \u2014with full HTTP and HTTPS URLs for each. In addition, the wildcard *.lotsofnames will result in anything *.lotsofnames.ddev.site being recognized by the project. This works only if you\u2019re connected to the internet, using ddev.site for your top-level-domain, and using DNS for name lookups. (These are all the defaults.) Although we recommend extreme care with this feature , you can also provide additional_fqdn entries, which don't use the .ddev.site top-level domain. This feature populates your hosts file with entries which may hide the real DNS entries on the internet, causing way too much head-scratching. If you use a FQDN which is resolvable on the internet, you must use use_dns_when_possible: false or configure that with ddev config --use-dns-when-possible=false . name: somename additional_fqdns: - example.com - somesite.example.com - anothersite.example.com This configuration would result in working FQDNs of somename.ddev.site , example.com , somesite.example.com , and anothersite.example.com . Don\u2019t use the same additional_fqdns or additional_hostnames in two different projects. If you see ddev-router status become unhealthy in ddev list , it\u2019s most often a result of trying to use conflicting FQDNs in more than one project. example.com can only be assigned to one project, or it will break ddev-router . May not work predictably everywhere. This may not work predictably on all systems. There are operating systems and machines where /etc/hosts may not be the first or only resolution technique, especially if the additional_fqdn you use is also in DNS. Don\u2019t override a real domain name! If you use an additional_fqdn that exists on the internet (like www.google.com ), your hosts file will override access to the original (internet) site, and you\u2019ll be sad and confused that you can\u2019t get to it.","title":"Additional Project Hostnames"},{"location":"users/extend/additional-services/","text":"Additional Service Configurations & Add-ons \u00b6 DDEV projects can be extended to provide additional add-ons, including services. You can define these add-ons using docker-compose files in the project\u2019s .ddev directory. Anyone can create their own services with a .ddev/docker-compose.*.yaml file, and a growing number of popular services are supported and tested, and can be installed using the ddev get command. Use ddev get --list to see available add-ons. To see all possible add-ons (not necessarily supported or tested), use ddev get --list --all . For example, \u2192 ddev get --list \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ADD-ON \u2502 DESCRIPTION \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-adminer \u2502 Adminer service for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-beanstalkd \u2502 Beanstalkd for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-browsersync \u2502 Auto-refresh HTTPS page on changes with DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-cron \u2502 Schedule commands to execute within DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-drupal9-solr \u2502 Drupal 9 Apache Solr installation for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-elasticsearch \u2502 Elasticsearch add-on for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-memcached \u2502 Install Memcached as an extra service in DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-mongo \u2502 MongoDB add-on for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-pdfreactor \u2502 PDFreactor service for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-proxy-support \u2502 Support HTTP/HTTPS proxies with DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-redis \u2502 Redis service for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-redis-commander \u2502 Redis Commander for use with DDEV Redis service* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-selenium-standalone-chrome \u2502 A DDEV service for running standalone Chrome* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-varnish \u2502 Varnish reverse proxy add-on for DDEV* \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Add-ons marked with '*' are official, maintained DDEV add-ons. Tip If you need a service not provided here, see Defining an Additional Service with Docker Compose . Officially-supported add-ons: Adminer : ddev get drud/ddev-adminer . Apache Solr for Drupal 9 : ddev get drud/ddev-drupal9-solr . Beanstalkd : ddev get drud/ddev-beanstalkd . Browsersync : ddev get drud/ddev-browsersync . cron : ddev get drud/ddev-cron . Elasticsearch : ddev get drud/ddev-elasticsearch . Memcached : ddev get drud/ddev-memcached . MongoDB : ddev get drud/ddev-mongo . PDFreactor : ddev get drud/ddev-pdfreactor Proxy Support : ddev get drud/ddev-proxy-support . Redis Commander : ddev get drud/ddev-redis-commander . Redis : ddev get drud/ddev-redis . Selenium Standalone Chrome : ddev get drud/ddev-selenium-standalone-chrome . Varnish : ddev get drud/ddev-varnish . Creating an Additional Service for ddev get \u00b6 Anyone can create an add-on for ddev get . See this screencast and instructions in ddev-addon-template : Click \u201cUse this template\u201d on ddev-addon-template . Create a new repository. Test it and preferably make sure it has valid tests in tests.bats . When it\u2019s working and tested, create a release. Add the ddev-get label and a good short description to the GitHub repository. When you\u2019re ready for the add-on to become official, open an issue in the DDEV issue queue requesting upgrade to official. You\u2019ll be expected to maintain it, and subscribe to all activity and be responsive to questions. Sections and Features of ddev-get Add-On install.yaml \u00b6 The install.yaml is a simple YAML file with a few main sections: pre_install_actions : an array of Bash statements or scripts to be executed before project_files are installed. The actions are executed in the context of the target project\u2019s root directory. project_files : an array of files or directories to be copied from the add-on into the target project\u2019s .ddev directory. global_files : is an array of files or directories to be copied from the add-on into the target system\u2019s global .ddev directory ( ~/.ddev/ ). post_install_actions : an array of Bash statements or scripts to be executed after project_files and global_files are installed. The actions are executed in the context of the target project\u2019s root directory. yaml_read_files : a map of name: file of YAML files to be read from the target project\u2019s root directory. The contents of these YAML files may be used as templated actions within pre_install_actions and post_install_actions . In any stanza of pre_install_actions and post_install_actions you can: Use #ddev-nodisplay on a line to suppress any output. Use #ddev-description:<some description of what stanza is doing> to instruct DDEV to output a description of the action it's taking. You can see a simple install.yaml in ddev-addon-template \u2019s install.yaml . Environment Variable Replacements \u00b6 Simple environment variables will be replaced in install.yaml as part of filenames. This can include environment variables in the context where DDEV run, as well as the standard environment variables provided to custom host commands, like DDEV_APPROOT , DDEV_DOCROOT , etc. For example, if a file in project_files is listed as somefile.${DDEV_PROJECT}.txt with a project named d10 , the file named somefile.d10.txt will be copied from the add-on into the project. Template Action Replacements (Advanced) \u00b6 A number of additional replacements can be made using Go template replacement techniques, using the format {{ .some-gotemplate-action }} . These are mostly for use of YAML information pulled into yaml_read_files . A map of values from each YAML file is placed in a map headed by the name of the YAML file. For example, if a YAML file named example_yaml.yaml : value1 : xxx is referenced using yaml_read_files : example : example_yaml.yaml then value1 can be used throughout the install.yaml as {{ example.value1 }} and it will be replaced with the value xxx . More exotic template-based replacements can be seen in an advanced test example . Go templating resources: Official Go template docs Lots of intro to Golang templates masterminds/sprig extra functions. Additional services in ddev-contrib (MongoDB, Elasticsearch, etc) \u00b6 Commonly-used services will be migrated from the ddev-contrib repository to individual, tested, supported repositories, but the repository already has a wealth of additional examples and instructions: Headless Chrome : See Headless Chrome for Behat Testing Old PHP Versions to Run Old Sites : See Old PHP Versions RabbitMQ : See RabbitMQ TYPO3 Solr Integration : See TYPO3 Solr Your pull requests to integrate other services are welcome at ddev-contrib .","title":"Additional Service Configurations & Add-ons"},{"location":"users/extend/additional-services/#additional-service-configurations-add-ons","text":"DDEV projects can be extended to provide additional add-ons, including services. You can define these add-ons using docker-compose files in the project\u2019s .ddev directory. Anyone can create their own services with a .ddev/docker-compose.*.yaml file, and a growing number of popular services are supported and tested, and can be installed using the ddev get command. Use ddev get --list to see available add-ons. To see all possible add-ons (not necessarily supported or tested), use ddev get --list --all . For example, \u2192 ddev get --list \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ADD-ON \u2502 DESCRIPTION \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-adminer \u2502 Adminer service for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-beanstalkd \u2502 Beanstalkd for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-browsersync \u2502 Auto-refresh HTTPS page on changes with DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-cron \u2502 Schedule commands to execute within DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-drupal9-solr \u2502 Drupal 9 Apache Solr installation for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-elasticsearch \u2502 Elasticsearch add-on for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-memcached \u2502 Install Memcached as an extra service in DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-mongo \u2502 MongoDB add-on for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-pdfreactor \u2502 PDFreactor service for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-proxy-support \u2502 Support HTTP/HTTPS proxies with DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-redis \u2502 Redis service for DDEV* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-redis-commander \u2502 Redis Commander for use with DDEV Redis service* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-selenium-standalone-chrome \u2502 A DDEV service for running standalone Chrome* \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 drud/ddev-varnish \u2502 Varnish reverse proxy add-on for DDEV* \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Add-ons marked with '*' are official, maintained DDEV add-ons. Tip If you need a service not provided here, see Defining an Additional Service with Docker Compose . Officially-supported add-ons: Adminer : ddev get drud/ddev-adminer . Apache Solr for Drupal 9 : ddev get drud/ddev-drupal9-solr . Beanstalkd : ddev get drud/ddev-beanstalkd . Browsersync : ddev get drud/ddev-browsersync . cron : ddev get drud/ddev-cron . Elasticsearch : ddev get drud/ddev-elasticsearch . Memcached : ddev get drud/ddev-memcached . MongoDB : ddev get drud/ddev-mongo . PDFreactor : ddev get drud/ddev-pdfreactor Proxy Support : ddev get drud/ddev-proxy-support . Redis Commander : ddev get drud/ddev-redis-commander . Redis : ddev get drud/ddev-redis . Selenium Standalone Chrome : ddev get drud/ddev-selenium-standalone-chrome . Varnish : ddev get drud/ddev-varnish .","title":"Additional Service Configurations &amp; Add-ons"},{"location":"users/extend/additional-services/#creating-an-additional-service-for-ddev-get","text":"Anyone can create an add-on for ddev get . See this screencast and instructions in ddev-addon-template : Click \u201cUse this template\u201d on ddev-addon-template . Create a new repository. Test it and preferably make sure it has valid tests in tests.bats . When it\u2019s working and tested, create a release. Add the ddev-get label and a good short description to the GitHub repository. When you\u2019re ready for the add-on to become official, open an issue in the DDEV issue queue requesting upgrade to official. You\u2019ll be expected to maintain it, and subscribe to all activity and be responsive to questions.","title":"Creating an Additional Service for ddev get"},{"location":"users/extend/additional-services/#additional-services-in-ddev-contrib-mongodb-elasticsearch-etc","text":"Commonly-used services will be migrated from the ddev-contrib repository to individual, tested, supported repositories, but the repository already has a wealth of additional examples and instructions: Headless Chrome : See Headless Chrome for Behat Testing Old PHP Versions to Run Old Sites : See Old PHP Versions RabbitMQ : See RabbitMQ TYPO3 Solr Integration : See TYPO3 Solr Your pull requests to integrate other services are welcome at ddev-contrib .","title":"Additional services in ddev-contrib (MongoDB, Elasticsearch, etc)"},{"location":"users/extend/custom-commands/","text":"Custom Commands \u00b6 Custom commands can easily be added to DDEV, to be executed on the host or in containers. This involves adding a Bash script to the project in .ddev/commands/host , a specific container in .ddev/commands/<containername> , or globally in ~/.ddev/commands . Example commands in ddev/commands/*/*.example can be copied, moved, or symlinked. For example, .ddev/commands/host/mysqlworkbench.example can be used to add a ddev mysqlworkbench command. Rename it from mysqlworkbench.example to mysqlworkbench . If you\u2019re on macOS or Linux (or some configurations of Windows) you can cd .ddev/commands/host && ln -s mysqlworkbench.example mysqlworkbench . The ddev mysql runs the mysql client inside the db container command using this technique. See the ddev mysql command . Notes for All Command Types \u00b6 The command filename is not what determines the name of the command. That comes from the \u201cUsage\u201d doc line ( ## Usage: commandname ). To confirm that your custom command is available, run ddev -h and look for it in the list. Host Commands \u00b6 To provide host commands, place a Bash script in .ddev/commands/host . For example, a PhpStorm launcher to make the ddev phpstorm command might go in .ddev/commands/host/phpstorm with these contents: #!/usr/bin/env bash ## Description: Open PhpStorm with the current project ## Usage: phpstorm ## Example: \"ddev phpstorm\" # Example is macOS-specific, but easy to adapt to any OS open -a PhpStorm.app ${ DDEV_APPROOT } Container Commands \u00b6 To provide a command which will execute in a container, add a Bash script to .ddev/commands/<container_name> , for example, .ddev/commands/web/mycommand . The Bash script will be executed inside the named container. For example, see the several standard DDEV script-based web container commands . You can run commands in custom containers as well as standard DDEV web and db containers. Use the service name, like .ddev/commands/solr/<command> . The only catch with a custom container is that your service must mount /mnt/ddev_config like the web and db containers do; the volumes section of docker-compose.<servicename>.yaml needs: volumes: - \".:/mnt/ddev_config\" For example, to add a solrtail command that runs in a Solr service, add .ddev/commands/solr/solrtail with: #!/bin/bash ## Description: Tail the main solr log ## Usage: solrtail ## Example: ddev solrtail tail -f /opt/solr/server/logs/solr.log Global Commands \u00b6 Global commands work exactly the same as project-level commands, they just need to go in your global .ddev directory. Your home directory has a .ddev/commands in it, where you can add host, web, or db commands. Shell Command Examples \u00b6 There are many examples of global and project-level custom/shell commands that ship with DDEV you can adapt for your own use. They can be found in your ~/.ddev/commands/* directories and in your project\u2019s .ddev/commands/* directories. There you\u2019ll see how to provide usage, examples, and how to use arguments provided to the commands. For example, the xdebug command shows simple argument processing and the launch command demonstrates flag processing. Environment Variables Provided \u00b6 A number of environment variables are provided to these command scripts. These are generally supported, but please avoid using undocumented environment variables. Useful variables for host scripts are: DDEV_APPROOT : file system location of the project on the host DDEV_DATABASE : database in use, in format type:version (example: mariadb:10.5 ) DDEV_DOCROOT : relative path from approot to docroot DDEV_HOSTNAME : comma-separated list of FQDN hostnames DDEV_HOST_DB_PORT : localhost port of the database server DDEV_HOST_HTTPS_PORT : localhost port for HTTPS on web server DDEV_HOST_WEBSERVER_PORT : localhost port of the web server DDEV_PHP_VERSION : current PHP version DDEV_PRIMARY_URL : primary project URL DDEV_PROJECT : project name, like d8composer DDEV_PROJECT_TYPE : drupal8 , typo3 , backdrop , wordpress , etc. DDEV_ROUTER_HTTP_PORT : router port for HTTP DDEV_ROUTER_HTTPS_PORT : router port for HTTPS DDEV_SITENAME : project name, like d8composer DDEV_TLD : top-level project domain, like ddev.site DDEV_WEBSERVER_TYPE : nginx-fpm or apache-fpm GOARCH : architecture ( arm64 , amd64 ) GOOS : operating system ( windows , darwin , linux ) Useful variables for container scripts are: DDEV_DOCROOT : relative path from approot to docroot DDEV_FILES_DIR : directory of user-uploaded files DDEV_HOSTNAME : comma-separated list of FQDN hostnames DDEV_PHP_VERSION : current PHP version DDEV_PRIMARY_URL : primary URL for the project DDEV_PROJECT : project name, like d8composer DDEV_PROJECT_TYPE : drupal8 , typo3 , backdrop , wordpress , etc. DDEV_ROUTER_HTTP_PORT : router port for HTTP DDEV_ROUTER_HTTPS_PORT : router port for HTTPS DDEV_SITENAME : project name, like d8composer DDEV_TLD : top-level project domain, like ddev.site DDEV_WEBSERVER_TYPE : nginx-fpm or apache-fpm IS_DDEV_PROJECT : if true , PHP is running under DDEV Annotations Supported \u00b6 Custom commands support various annotations in the header for providing additional information to the user. \u201cDescription\u201d Annotation \u00b6 Description should briefly describe the command in its help message. Usage: ## Description: <command-description> Example: ## Description: my great custom command \u201cUsage\u201d Annotation \u00b6 Usage should explain how to use the command in its help message. Usage: ## Usage: <command-usage> Example: ## Usage: commandname [flags] [args] \u201cExample\u201d Annotation \u00b6 Example should demonstrate how the command might be used. Use \\n to force a line break. Usage: ## Example: <command-example> Example: ## Example: commandname\\ncommandname -h \u201cFlags\u201d Annotation \u00b6 Flags should explain any available flags, including their shorthand when relevant, for the help message. It has to be encoded according the following definition: If no flags are specified, the command will have its flags parsing disabled. Global flags like --help will not work unless the command supports them. You can still do ddev help <command> to see the command's provided usage help. Usage: ## Flags: <json-definition> This is the minimal usage of a flags definition: Example: ## Flags: [{\"Name\":\"flag\",\"Usage\":\"sets the flag option\"}] Output: Flags: -h, --help help for ddev -f, --flag sets the flag option Multiple flags are separated by a comma: Example: ## Flags: [{\"Name\":\"flag1\",\"Shorthand\":\"f\",\"Usage\":\"flag1 usage\"},{\"Name\":\"flag2\",\"Usage\":\"flag2 usage\"}] Output: Flags: -h, --help help for ddev -f, --flag1 flag1 usage --flag2 flag2 usage The following fields can be used for a flag definition: Name : the name as it appears on command line Shorthand : one-letter abbreviated flag Usage : help message Type : possible values are bool , string , int , uint (defaults to bool ) DefValue : default value for usage message NoOptDefVal : default value, if the flag is on the command line without any options Annotations : used by cobra.Command Bash autocomplete code (see https://github.com/spf13/cobra/blob/master/bash_completions.md ) \u201cProjectTypes\u201d Annotation \u00b6 If your command should only be visible for a specific project type, ProjectTypes will allow you to define the supported types. This is especially useful for global custom commands. See Quickstart for many CMSes for more information about the supported project types. Multiple types are separated by a comma. Usage: ## ProjectTypes: <list-of-project-types> Example: ## ProjectTypes: drupal7,drupal8,drupal9,backdrop \u201cOSTypes\u201d Annotation (Host Commands Only) \u00b6 If your host command should only run on one or more operating systems, add the OSTypes annotation. Multiple types are separated by a comma. Valid types are: darwin for macOS windows for Windows linux for Linux Usage: ## OSTypes: <list-of-os-types> Example: ## OSTypes: darwin,linux \u201cHostBinaryExists\u201d Annotation (Host Commands Only) \u00b6 If your host command should only run if a particular file exists, add the HostBinaryExists annotation. Usage: ## HostBinaryExists: <path/to/file> Example: ## HostBinaryExists: /Applications/Sequel ace.app \u201cDBTypes\u201d Annotation \u00b6 If your command should only be available for a particular database type, add the DBTypes annotation. Multiple types are separated by a comma. Valid types the available database types. Usage: ## DBTypes: <type> Example: ## DBTypes: postgres \u201cHostWorkingDir\u201d Annotation (Container Commands Only) \u00b6 If your container command should run from the directory you are running the command in the host, add the HostWorkingDir annotation. Example: ## HostWorkingDir: true Known Windows Issues \u00b6 Line Endings \u00b6 If you\u2019re editing a custom command to be run in a container, it must have LF line endings and not traditional Windows CRLF line endings. Remember that a custom command in a container is a script that must execute in a Linux environment. Bash \u00b6 Commands can\u2019t be executed if DDEV can\u2019t find bash . If you\u2019re running inside Git Bash in most any terminal, this shouldn\u2019t be an issue, and DDEV should be able to find git-bash if it\u2019s in C:\\Program Files\\Git\\bin as well. But if neither of those is true, add the directory of bash.exe to your PATH environment variable.","title":"Custom Commands"},{"location":"users/extend/custom-commands/#custom-commands","text":"Custom commands can easily be added to DDEV, to be executed on the host or in containers. This involves adding a Bash script to the project in .ddev/commands/host , a specific container in .ddev/commands/<containername> , or globally in ~/.ddev/commands . Example commands in ddev/commands/*/*.example can be copied, moved, or symlinked. For example, .ddev/commands/host/mysqlworkbench.example can be used to add a ddev mysqlworkbench command. Rename it from mysqlworkbench.example to mysqlworkbench . If you\u2019re on macOS or Linux (or some configurations of Windows) you can cd .ddev/commands/host && ln -s mysqlworkbench.example mysqlworkbench . The ddev mysql runs the mysql client inside the db container command using this technique. See the ddev mysql command .","title":"Custom Commands"},{"location":"users/extend/custom-commands/#notes-for-all-command-types","text":"The command filename is not what determines the name of the command. That comes from the \u201cUsage\u201d doc line ( ## Usage: commandname ). To confirm that your custom command is available, run ddev -h and look for it in the list.","title":"Notes for All Command Types"},{"location":"users/extend/custom-commands/#host-commands","text":"To provide host commands, place a Bash script in .ddev/commands/host . For example, a PhpStorm launcher to make the ddev phpstorm command might go in .ddev/commands/host/phpstorm with these contents: #!/usr/bin/env bash ## Description: Open PhpStorm with the current project ## Usage: phpstorm ## Example: \"ddev phpstorm\" # Example is macOS-specific, but easy to adapt to any OS open -a PhpStorm.app ${ DDEV_APPROOT }","title":"Host Commands"},{"location":"users/extend/custom-commands/#container-commands","text":"To provide a command which will execute in a container, add a Bash script to .ddev/commands/<container_name> , for example, .ddev/commands/web/mycommand . The Bash script will be executed inside the named container. For example, see the several standard DDEV script-based web container commands . You can run commands in custom containers as well as standard DDEV web and db containers. Use the service name, like .ddev/commands/solr/<command> . The only catch with a custom container is that your service must mount /mnt/ddev_config like the web and db containers do; the volumes section of docker-compose.<servicename>.yaml needs: volumes: - \".:/mnt/ddev_config\" For example, to add a solrtail command that runs in a Solr service, add .ddev/commands/solr/solrtail with: #!/bin/bash ## Description: Tail the main solr log ## Usage: solrtail ## Example: ddev solrtail tail -f /opt/solr/server/logs/solr.log","title":"Container Commands"},{"location":"users/extend/custom-commands/#global-commands","text":"Global commands work exactly the same as project-level commands, they just need to go in your global .ddev directory. Your home directory has a .ddev/commands in it, where you can add host, web, or db commands.","title":"Global Commands"},{"location":"users/extend/custom-commands/#shell-command-examples","text":"There are many examples of global and project-level custom/shell commands that ship with DDEV you can adapt for your own use. They can be found in your ~/.ddev/commands/* directories and in your project\u2019s .ddev/commands/* directories. There you\u2019ll see how to provide usage, examples, and how to use arguments provided to the commands. For example, the xdebug command shows simple argument processing and the launch command demonstrates flag processing.","title":"Shell Command Examples"},{"location":"users/extend/custom-commands/#environment-variables-provided","text":"A number of environment variables are provided to these command scripts. These are generally supported, but please avoid using undocumented environment variables. Useful variables for host scripts are: DDEV_APPROOT : file system location of the project on the host DDEV_DATABASE : database in use, in format type:version (example: mariadb:10.5 ) DDEV_DOCROOT : relative path from approot to docroot DDEV_HOSTNAME : comma-separated list of FQDN hostnames DDEV_HOST_DB_PORT : localhost port of the database server DDEV_HOST_HTTPS_PORT : localhost port for HTTPS on web server DDEV_HOST_WEBSERVER_PORT : localhost port of the web server DDEV_PHP_VERSION : current PHP version DDEV_PRIMARY_URL : primary project URL DDEV_PROJECT : project name, like d8composer DDEV_PROJECT_TYPE : drupal8 , typo3 , backdrop , wordpress , etc. DDEV_ROUTER_HTTP_PORT : router port for HTTP DDEV_ROUTER_HTTPS_PORT : router port for HTTPS DDEV_SITENAME : project name, like d8composer DDEV_TLD : top-level project domain, like ddev.site DDEV_WEBSERVER_TYPE : nginx-fpm or apache-fpm GOARCH : architecture ( arm64 , amd64 ) GOOS : operating system ( windows , darwin , linux ) Useful variables for container scripts are: DDEV_DOCROOT : relative path from approot to docroot DDEV_FILES_DIR : directory of user-uploaded files DDEV_HOSTNAME : comma-separated list of FQDN hostnames DDEV_PHP_VERSION : current PHP version DDEV_PRIMARY_URL : primary URL for the project DDEV_PROJECT : project name, like d8composer DDEV_PROJECT_TYPE : drupal8 , typo3 , backdrop , wordpress , etc. DDEV_ROUTER_HTTP_PORT : router port for HTTP DDEV_ROUTER_HTTPS_PORT : router port for HTTPS DDEV_SITENAME : project name, like d8composer DDEV_TLD : top-level project domain, like ddev.site DDEV_WEBSERVER_TYPE : nginx-fpm or apache-fpm IS_DDEV_PROJECT : if true , PHP is running under DDEV","title":"Environment Variables Provided"},{"location":"users/extend/custom-commands/#annotations-supported","text":"Custom commands support various annotations in the header for providing additional information to the user.","title":"Annotations Supported"},{"location":"users/extend/custom-commands/#known-windows-issues","text":"","title":"Known Windows Issues"},{"location":"users/extend/custom-compose-files/","text":"Defining Additional Services with Docker Compose \u00b6 Prerequisite \u00b6 Much of DDEV\u2019s customization ability and extensibility comes from leveraging features and functionality provided by Docker and Docker Compose . Some working knowledge of these tools is required in order to customize or extend the environment DDEV provides. There are many examples of custom docker-compose files available on ddev-contrib . Background \u00b6 Under the hood, DDEV uses a private copy of docker-compose to define and run the multiple containers that make up the local environment for a project. docker-compose supports defining multiple compose files to facilitate sharing Compose configurations between files and projects , and DDEV is designed to leverage this ability. To add custom configuration or additional services to your project, create docker-compose files in the .ddev directory. DDEV will process any files with the docker-compose.[servicename].yaml naming convention and include them in executing docker-compose functionality. You can optionally create a docker-compose.override.yaml to override any configurations from the main .ddev/.ddev-docker-compose-base.yaml or any additional docker-compose files added to your project. Don\u2019t modify .ddev-docker-compose-base.yaml or .ddev-docker-compose-full.yaml ! The main docker-compose file is .ddev/.ddev-docker-compose-base.yaml , reserved exclusively for DDEV\u2019s use. It\u2019s overwritten every time a project is started, so any edits will be lost. If you need to override configuration provided by .ddev/.ddev-docker-compose-base.yaml , use an additional docker-compose.<whatever>.yaml file instead. docker-compose.*.yaml Examples \u00b6 Expose an additional port 9999 to host port 9999, in a file perhaps called docker-compose.ports.yaml : services : someservice : ports : - \"9999:9999\" That approach usually isn\u2019t sustainable because two projects might want to use the same port, so we expose the additional port to the Docker network and then use ddev-router to bind it to the host. This works only for services with an HTTP API, but results in having both HTTP and HTTPS ports (9998 and 9999). services : someservice : container_name : \"ddev-${DDEV_SITENAME}-someservice\" labels : com.ddev.site-name : ${DDEV_SITENAME} com.ddev.approot : ${DDEV_APPROOT} expose : - \"9999\" environment : - VIRTUAL_HOST=$DDEV_HOSTNAME - HTTP_EXPOSE=9998:9999 - HTTPS_EXPOSE=9999:9999 Confirming docker-compose Configurations \u00b6 To better understand how DDEV parses your custom docker-compose files, run ddev debug compose-config . This prints the final, DDEV-generated docker-compose configuration when starting your project. Conventions for Defining Additional Services \u00b6 When defining additional services for your project, we recommended following these conventions to ensure DDEV handles your service the same way DDEV handles default services. The container name should be ddev-${DDEV_SITENAME}-<servicename> . Provide containers with required labels: labels : com.ddev.site-name : ${DDEV_SITENAME} com.ddev.approot : ${DDEV_APPROOT} Exposing ports for service: you can expose the port for a service to be accessible as projectname.ddev.site:portNum while your project is running. This is achieved by the following configurations for the container(s) being added: Define only the internal port in the expose section for docker-compose; use ports: only if the port will be bound directly to localhost , as may be required for non-HTTP services. To expose a web interface to be accessible over HTTP, define the following environment variables in the environment section for docker-compose: VIRTUAL_HOST=$DDEV_HOSTNAME HTTP_EXPOSE=portNum The hostPort:containerPort convention may be used here to expose a container\u2019s port to a different external port. To expose multiple ports for a single container, define the ports as comma-separated values. HTTPS_EXPOSE=<exposedPortNumber>:portNum This will expose an HTTPS interface on <exposedPortNumber> to the host (and to the web container) as https://<project>.ddev.site:exposedPortNumber . To expose multiple ports for a single container, use comma-separated definitions, as in HTTPS_EXPOSE=9998:80,9999:81 , which would expose HTTP port 80 from the container as https://<project>.ddev.site:9998 and HTTP port 81 from the container as https://<project>.ddev.site:9999 . Interacting with Additional Services \u00b6 ddev exec , ddev ssh , and ddev logs interact with containers on an individual basis. By default, these commands interact with the web container for a project. All of these commands, however, provide a --service or -s flag allowing you to specify the service name of the container to interact with. For example, if you added a service to provide Apache Solr, and the service was named solr , you would be able to run ddev logs --service solr to retrieve the Solr container\u2019s logs.","title":"Defining Additional Services with Docker Compose"},{"location":"users/extend/custom-compose-files/#defining-additional-services-with-docker-compose","text":"","title":"Defining Additional Services with Docker Compose"},{"location":"users/extend/custom-compose-files/#prerequisite","text":"Much of DDEV\u2019s customization ability and extensibility comes from leveraging features and functionality provided by Docker and Docker Compose . Some working knowledge of these tools is required in order to customize or extend the environment DDEV provides. There are many examples of custom docker-compose files available on ddev-contrib .","title":"Prerequisite"},{"location":"users/extend/custom-compose-files/#background","text":"Under the hood, DDEV uses a private copy of docker-compose to define and run the multiple containers that make up the local environment for a project. docker-compose supports defining multiple compose files to facilitate sharing Compose configurations between files and projects , and DDEV is designed to leverage this ability. To add custom configuration or additional services to your project, create docker-compose files in the .ddev directory. DDEV will process any files with the docker-compose.[servicename].yaml naming convention and include them in executing docker-compose functionality. You can optionally create a docker-compose.override.yaml to override any configurations from the main .ddev/.ddev-docker-compose-base.yaml or any additional docker-compose files added to your project. Don\u2019t modify .ddev-docker-compose-base.yaml or .ddev-docker-compose-full.yaml ! The main docker-compose file is .ddev/.ddev-docker-compose-base.yaml , reserved exclusively for DDEV\u2019s use. It\u2019s overwritten every time a project is started, so any edits will be lost. If you need to override configuration provided by .ddev/.ddev-docker-compose-base.yaml , use an additional docker-compose.<whatever>.yaml file instead.","title":"Background"},{"location":"users/extend/custom-compose-files/#docker-composeyaml-examples","text":"Expose an additional port 9999 to host port 9999, in a file perhaps called docker-compose.ports.yaml : services : someservice : ports : - \"9999:9999\" That approach usually isn\u2019t sustainable because two projects might want to use the same port, so we expose the additional port to the Docker network and then use ddev-router to bind it to the host. This works only for services with an HTTP API, but results in having both HTTP and HTTPS ports (9998 and 9999). services : someservice : container_name : \"ddev-${DDEV_SITENAME}-someservice\" labels : com.ddev.site-name : ${DDEV_SITENAME} com.ddev.approot : ${DDEV_APPROOT} expose : - \"9999\" environment : - VIRTUAL_HOST=$DDEV_HOSTNAME - HTTP_EXPOSE=9998:9999 - HTTPS_EXPOSE=9999:9999","title":"docker-compose.*.yaml Examples"},{"location":"users/extend/custom-compose-files/#confirming-docker-compose-configurations","text":"To better understand how DDEV parses your custom docker-compose files, run ddev debug compose-config . This prints the final, DDEV-generated docker-compose configuration when starting your project.","title":"Confirming docker-compose Configurations"},{"location":"users/extend/custom-compose-files/#conventions-for-defining-additional-services","text":"When defining additional services for your project, we recommended following these conventions to ensure DDEV handles your service the same way DDEV handles default services. The container name should be ddev-${DDEV_SITENAME}-<servicename> . Provide containers with required labels: labels : com.ddev.site-name : ${DDEV_SITENAME} com.ddev.approot : ${DDEV_APPROOT} Exposing ports for service: you can expose the port for a service to be accessible as projectname.ddev.site:portNum while your project is running. This is achieved by the following configurations for the container(s) being added: Define only the internal port in the expose section for docker-compose; use ports: only if the port will be bound directly to localhost , as may be required for non-HTTP services. To expose a web interface to be accessible over HTTP, define the following environment variables in the environment section for docker-compose: VIRTUAL_HOST=$DDEV_HOSTNAME HTTP_EXPOSE=portNum The hostPort:containerPort convention may be used here to expose a container\u2019s port to a different external port. To expose multiple ports for a single container, define the ports as comma-separated values. HTTPS_EXPOSE=<exposedPortNumber>:portNum This will expose an HTTPS interface on <exposedPortNumber> to the host (and to the web container) as https://<project>.ddev.site:exposedPortNumber . To expose multiple ports for a single container, use comma-separated definitions, as in HTTPS_EXPOSE=9998:80,9999:81 , which would expose HTTP port 80 from the container as https://<project>.ddev.site:9998 and HTTP port 81 from the container as https://<project>.ddev.site:9999 .","title":"Conventions for Defining Additional Services"},{"location":"users/extend/custom-compose-files/#interacting-with-additional-services","text":"ddev exec , ddev ssh , and ddev logs interact with containers on an individual basis. By default, these commands interact with the web container for a project. All of these commands, however, provide a --service or -s flag allowing you to specify the service name of the container to interact with. For example, if you added a service to provide Apache Solr, and the service was named solr , you would be able to run ddev logs --service solr to retrieve the Solr container\u2019s logs.","title":"Interacting with Additional Services"},{"location":"users/extend/custom-tls-certificates/","text":"Custom TLS Certificates \u00b6 It\u2019s possible to use \u201creal\u201d TLS certificates issued by a CA rather than the local-development-oriented mkcert command. Obtain a certificate and key from Let\u2019s Encrypt or another source. Install the certificate and key in your project\u2019s .ddev/custom_certs directory. If you\u2019re using the default router, each certificate must be named with the pattern fqdn.crt and fqdn.key . A project named example.ddev.site , for example, would need example.ddev.site.crt and example.ddev.site.key in .ddev/custom_certs . There must be one cert-set for each FQDN handled by the project. If you\u2019re using Traefik , the files should be named <projectname>.crt and <projectname>.key , for example exampleproj.crt and exampleproj.key . Run ddev start and verify using a browser that you\u2019re using the right certificate.","title":"Custom TLS Certificates"},{"location":"users/extend/custom-tls-certificates/#custom-tls-certificates","text":"It\u2019s possible to use \u201creal\u201d TLS certificates issued by a CA rather than the local-development-oriented mkcert command. Obtain a certificate and key from Let\u2019s Encrypt or another source. Install the certificate and key in your project\u2019s .ddev/custom_certs directory. If you\u2019re using the default router, each certificate must be named with the pattern fqdn.crt and fqdn.key . A project named example.ddev.site , for example, would need example.ddev.site.crt and example.ddev.site.key in .ddev/custom_certs . There must be one cert-set for each FQDN handled by the project. If you\u2019re using Traefik , the files should be named <projectname>.crt and <projectname>.key , for example exampleproj.crt and exampleproj.key . Run ddev start and verify using a browser that you\u2019re using the right certificate.","title":"Custom TLS Certificates"},{"location":"users/extend/customization-extendibility/","text":"Extending and Customizing Environments \u00b6 DDEV provides several ways to customize and extend project environments. Changing PHP Version \u00b6 The project's .ddev/config.yaml file defines the PHP version to use. The php_version can be changed to 5.6 , 7.0 , 7.1 , 7.2 , 7.3 , 7.4 , 8.0 , 8.1 , or 8.2 . The current default is 8.0 . Older Versions of PHP \u00b6 Support for older versions of PHP is available on ddev-contrib via custom docker-compose files . Changing Web Server Type \u00b6 DDEV supports nginx with php-fpm by default ( nginx-fpm ), and Apache with php-fpm ( apache-fpm ). These can be changed using webserver_type in .ddev/config.yaml , for example webserver_type: apache-fpm , then ddev restart . Adding Services to a Project \u00b6 DDEV provides everything you need to build a modern PHP application on your local machine. More complex web applications, however, often require integration with services beyond the usual requirements of a web and database server\u2014maybe Apache Solr, Redis, Varnish, or many others. While DDEV likely won\u2019t ever provide all of these additional services out of the box, it\u2019s designed to provide simple ways to customize the environment and meet your project\u2019s needs without reinventing the wheel. A collection of vetted service configurations is available in the Additional Services Documentation . If you need to create a service configuration for your project, see Defining Additional Services with Docker Compose . Using Node.js with DDEV \u00b6 There are many ways to deploy Node.js in any project, so DDEV tries to let you set up any possibility you can come up with. You can choose the Node.js version you want to use in .ddev/config.yaml with nodejs_version . ddev nvm gives you the full capabilities of Node Version Manager . ddev npm and ddev yarn provide shortcuts to the npm and yarn commands inside the container, and their caches are persistent. You can run Node.js daemons using web_extra_daemons . You can expose Node.js ports via ddev-router by using web_extra_exposed_ports . You can manually run Node.js scripts using ddev exec <script> or ddev exec nodejs <script> . Please share your techniques! There are several ways to share your favorite Node.js tips and techniques. Best are ddev-get add-ons , Stack Overflow , and ddev-contrib . Running Extra Daemons in the Web Container \u00b6 There are several ways to run processes inside the web container. Manually execute them as needed, with ddev exec , for example. Run them with a post-start hook . Run them automatically using web_extra_daemons . Running Extra Daemons with post-start Hook \u00b6 Daemons can be run with a post-start exec hook or automatically started using supervisord . A simple post-start exec hook in .ddev/config.yaml might look like: hooks : post-start : - exec : \"nohup php --docroot=/var/www/html/something -S 0.0.0.0:6666 &\" Running Extra Daemons Using web_extra_daemons \u00b6 If you need extra daemons to start up automatically inside the web container, you can easily add them using web_extra_daemons in .ddev/config.yaml . You might be running Node.js daemons that serve a particular purpose, like browsersync , or more general daemons like a cron daemon. For example, you could use this configuration to run two instances of the Node.js HTTP server for different directories: web_extra_daemons : - name : \"http-1\" command : \"/var/www/html/node_modules/.bin/http-server -p 3000\" directory : /var/www/html - name : \"http-2\" command : \"/var/www/html/node_modules/.bin/http-server /var/www/html/sub -p 3000\" directory : /var/www/html directory should be the absolute path inside the container to the directory where the daemon should run. command is best as a simple binary with its arguments, but Bash features like cd or && work. If the program to be run is not in the ddev-webserver $PATH then it should have the absolute in-container path to the program to be run, like /var/www/html/node_modules/.bin/http-server . web_extra_daemons is a shortcut for adding a configuration to supervisord , which organizes daemons inside the web container. If the default settings are inadequate for your use, you can write a complete config file for your daemon . Your daemon is expected to run in the foreground, not to daemonize itself, supervisord will take care of that. To see the results of the attempt to start your daemon, see ddev logs or docker logs ddev-<project>-web . Exposing Extra Ports via ddev-router \u00b6 If your web container has additional HTTP servers running inside it on different ports, those can be exposed using web_extra_exposed_ports in .ddev/config.yaml . For example, this configuration would expose a node-vite HTTP server running on port 3000 inside the web container, via ddev-router , to ports 9998 (HTTP) and 9999 (HTTPS), so it could be accessed via https://<project>.ddev.site:9999 : web_extra_exposed_ports : - name : node-vite container_port : 3000 http_port : 9998 https_port : 9999 The configuration below would expose a Node.js server running in the web container on port 3000 as https://<project>.ddev.site:4000 and a \u201csomething\u201d server running in the web container on port 4000 as https://<project>.ddev.site:4000 : web_extra_exposed_ports : - name : nodejs container_port : 3000 http_port : 2999 https_port : 3000 - name : something container_port : 4000 https_port : 4000 http_port : 3999 Fill in all three fields even if you don\u2019t intend to use the https_port ! If you don\u2019t add https_port , then it default to 0 and ddev-router will fail to start. Providing Custom Environment Variables to a Container \u00b6 You can set custom environment variables in several places: The project\u2019s web_environment setting in .ddev/config.yaml or .ddev/config.*.yaml : web_environment : - MY_ENV_VAR=someval - MY_OTHER_ENV_VAR=someotherval The global web_environment setting in .ddev/global_config.yaml . An optional, project-level .ddev/.env file, which could look something like this: MY_ENV_VAR='someval' MY_OTHER_ENV_VAR='someotherval' If you\u2019d rather use the CLI to set the project or global web_environment value, you can use the ddev config command: # Set MY_ENV_VAR for the project ddev config --web-environment-add = \"MY_ENV_VAR=someval\" # Set MY_ENV_VAR globally ddev config global --web-environment-add = \"MY_ENV_VAR=someval You can use the --web-environment flag to overwrite existing values rather than adding them. Don\u2019t check in sensitive values! Sensitive variables like API keys should not be checked in with your project. Typically you might use an .env file and not check that in, but offer .env.example with expected keys that don\u2019t have values. Some use global configuration for sensitive values, as that\u2019s not normally checked in either. Altering the In-Container $PATH \u00b6 Sometimes it\u2019s easiest to put the command you need into the existing $PATH using a symbolic link rather than changing the in-container $PATH . For example, the project bin directory is already included the $PATH . So if you have a command you want to run that\u2019s not already in the $PATH , you can just add a symlink. Examples: On Craft CMS, the craft script is often in the project root, which is not in the $PATH . But if you mkdir bin && ln -s craft bin/craft you should be able to use ddev exec craft just fine. (Note however that ddev craft takes care of this for you.) On projects where the vendor directory is not in the project root (Acquia projects, for example, have composer.json and vendor in the docroot directory), you can mkdir bin && ln -s docroot/vendor/bin/drush bin/drush to put drush in your $PATH . (With projects like this, make sure to set composer_root: docroot so that ddev composer works properly.) You can also modify the PATH environment variable by adding a script to <project>/.ddev/homeadditions/.bashrc.d/ or (global) ~/.ddev/homeadditions/.bashrc.d/ . For example, if your project vendor directory is not in the expected place ( /var/www/html/vendor/bin ) you can add a <project>/.ddev/homeadditions/.bashrc.d/path.sh : export PATH = $PATH :/var/www/html/somewhereelse/vendor/bin Custom nginx Configuration \u00b6 When you ddev restart using nginx-fpm , DDEV creates a configuration customized to your project type in .ddev/nginx_full/nginx-site.conf . You can edit and override the configuration by removing the #ddev-generated line and doing whatever you need with it. After each change, ddev restart . You can also have more than one config file in the .ddev/nginx_full directory, they will all get loaded when DDEV starts. This can be used for serving multiple docroots and other techniques. Troubleshooting nginx Configuration \u00b6 Any errors in your configuration may cause the web container to fail and try to restart. If you see that behavior, use ddev logs to diagnose. You can run ddev exec nginx -t to test whether your configuration is valid. (Or run ddev ssh and run nginx -t .) You can reload the nginx configuration either with ddev restart or ddev exec nginx -s reload . The alias Alias \"/phpstatus\" \"/var/www/phpstatus.php\" is required for the health check script to work. Important! Changes to configuration take place on a ddev restart , when the container is rebuilt for another reason, or when the nginx server receives the reload signal. Multiple Docroots in nginx (Advanced) \u00b6 It\u2019s easiest to have different web servers in different DDEV projects, and DDEV projects can easily communicate with each other , but some sites require more than one docroot for a single project codebase. Sometimes this is because there\u2019s an API built in the same codebase but using different code, or different code for different languages, etc. The generated .ddev/nginx_full/seconddocroot.conf.example demonstrates how to do this. You can create as many of these as you want: change the servername and the root and customize as needed. nginx Snippets \u00b6 To add an nginx snippet to the default config, add an nginx config file as .ddev/nginx/<something>.conf . For example, to make all HTTP URLs redirect to their HTTPS equivalents you might add .ddev/nginx/redirect.conf with this stanza: if ($http_x_forwarded_proto = \"http\") { return 301 https://$host$request_uri; } After adding a snippet, ddev restart to make it take effect. Custom Apache Configuration \u00b6 If you\u2019re using webserver_type: apache-fpm in your .ddev/config.yaml , you can override the default site configuration by editing or replacing the DDEV-provided .ddev/apache/apache-site.conf configuration. Edit the .ddev/apache/apache-site.conf . Add your configuration changes. Save your configuration file and run ddev restart . If you encounter issues with your configuration or the project fails to start, use ddev logs to inspect the logs for possible Apache configuration errors. Use ddev exec apachectl -t to do a general Apache syntax check. The alias Alias \"/phpstatus\" \"/var/www/phpstatus.php\" is required for the health check script to work. Any errors in your configuration may cause the web container to fail. If you see that behavior, use ddev logs to diagnose. Important! Changes to .ddev/apache/apache-site.conf take place on a ddev restart . You can also ddev exec apachectl -k graceful to reload the Apache configuration. Custom PHP Configuration ( php.ini ) \u00b6 You can provide additional PHP configuration for a project by creating a directory called .ddev/php/ and adding any number of *.ini PHP configuration files. You should generally limit your override to any specific option(s) you need to customize. Every file in .ddev/php/ will be copied into /etc/php/[version]/(cli|fpm)/conf.d , so it\u2019s possible to replace files that already exist in the container. Common usage is to put custom overrides in a file called my-php.ini . Make sure you include the section header that goes with each item (like [PHP] ). One interesting implication of this behavior is that it\u2019s possible to disable extensions by replacing the configuration file that loads them. For instance, if you were to create an empty file at .ddev/php/20-xdebug.ini , it would replace the configuration that loads Xdebug, which would cause Xdebug to not be loaded! To load the new configuration, run ddev restart . An example file in .ddev/php/my-php.ini might look like this: [PHP] max_execution_time = 240; Custom MySQL/MariaDB configuration ( my.cnf ) \u00b6 You can provide additional MySQL/MariaDB configuration for a project by creating a directory called .ddev/mysql/ and adding any number of *.cnf MySQL configuration files. These files will be automatically included when MySQL is started. Make sure that the section header is included in the file. An example file in .ddev/mysql/no_utf8mb4.cnf might be: [mysqld] collation-server = utf8_general_ci character-set-server = utf8 innodb_large_prefix=false To load the new configuration, run ddev restart . Custom PostgreSQL Configuration \u00b6 If you\u2019re using PostgreSQL, a default posgresql.conf is provided in .ddev/postgres/postgresql.conf . If you need to alter it, remove the #ddev-generated line and ddev restart . Extending config.yaml with Custom config.*.yaml Files \u00b6 You may add additional config.*.yaml files to organize additional commands as you see fit for your project and team. For example, many teams commit their config.yaml and share it throughout the team, but some team members may require overrides to the checked-in version specifically for their environment and not checked in. For example, a team member may want to use a router_http_port other than the team default due to a conflict in their development environment. In this case they could add .ddev/config.ports.yaml : # My machine can\u2019t use port 80 so override with port 8080, but don\u2019t check this in! router_http_port : 8080 config.*.yaml is by default omitted from Git by the .ddev/.gitignore file. You can commit it by using git add -f .ddev/config.<something>.yaml . Extra config.*.yaml files are loaded in lexicographic order, so config.a.yaml will be overridden by config.b.yaml . Teams may choose to use config.local.yaml or config.override.yaml for all local non-committed config changes, for example. config.*.yaml update configuration according to these rules: Simple fields like router_http_port or webserver_type are overwritten. Lists of strings like additional_hostnames or additional_fqdns are merged. The list of environment variables in web_environment are \u201csmart merged\u201d: if you add the same environment variable with a different value, the value in the override file will replace the value from config.yaml . Hook specifications in the hooks variable are merged. If you need to override existing values, set override_config: true in the config.*.yaml where the override behavior should take place. Since config.*.yaml files are normally merged into the configuration, some things can\u2019t be overridden normally. For example, if you have nfs_mount_enabled: true you can\u2019t override it with a merge and you can\u2019t erase existing hooks or all environment variables. However, with override_config: true in a particular config.*.yaml file, override_config : true nfs_mount_enabled : false can override the existing values, and override_config : true hooks : post-start : [] or override_config : true additional_hostnames : [] can have their intended affect. override_config affects only behavior of the config.*.yaml file it exists in. To experiment with the behavior of a set of config.*.yaml files, use the ddev debug configyaml file; it\u2019s especially valuable with the yq command, for example ddev debug configyaml | yq . Explicit supervisord Configuration for Additional Daemons \u00b6 Although most extra daemons (like Node.js daemons, etc) can be configured easily using web_extra_daemons , there may be situations where you want complete control of the supervisord configuration. In these case you can create a .ddev/web-build/<daemonname>.conf with configuration like: [program:daemonname] command=/var/www/html/path/to/daemon directory=/var/www/html/ autorestart=true startretries=10 stdout_logfile=/proc/self/fd/2 stdout_logfile_maxbytes=0 redirect_stderr=true And create a .ddev/web-build/Dockerfile.<daemonname> to install the config file: ADD daemonname.conf /etc/supervisor/conf.d Full details for advanced configuration possibilities are in supervisor docs .","title":"Extending and Customizing Environments"},{"location":"users/extend/customization-extendibility/#extending-and-customizing-environments","text":"DDEV provides several ways to customize and extend project environments.","title":"Extending and Customizing Environments"},{"location":"users/extend/customization-extendibility/#changing-php-version","text":"The project's .ddev/config.yaml file defines the PHP version to use. The php_version can be changed to 5.6 , 7.0 , 7.1 , 7.2 , 7.3 , 7.4 , 8.0 , 8.1 , or 8.2 . The current default is 8.0 .","title":"Changing PHP Version"},{"location":"users/extend/customization-extendibility/#changing-web-server-type","text":"DDEV supports nginx with php-fpm by default ( nginx-fpm ), and Apache with php-fpm ( apache-fpm ). These can be changed using webserver_type in .ddev/config.yaml , for example webserver_type: apache-fpm , then ddev restart .","title":"Changing Web Server Type"},{"location":"users/extend/customization-extendibility/#adding-services-to-a-project","text":"DDEV provides everything you need to build a modern PHP application on your local machine. More complex web applications, however, often require integration with services beyond the usual requirements of a web and database server\u2014maybe Apache Solr, Redis, Varnish, or many others. While DDEV likely won\u2019t ever provide all of these additional services out of the box, it\u2019s designed to provide simple ways to customize the environment and meet your project\u2019s needs without reinventing the wheel. A collection of vetted service configurations is available in the Additional Services Documentation . If you need to create a service configuration for your project, see Defining Additional Services with Docker Compose .","title":"Adding Services to a Project"},{"location":"users/extend/customization-extendibility/#using-nodejs-with-ddev","text":"There are many ways to deploy Node.js in any project, so DDEV tries to let you set up any possibility you can come up with. You can choose the Node.js version you want to use in .ddev/config.yaml with nodejs_version . ddev nvm gives you the full capabilities of Node Version Manager . ddev npm and ddev yarn provide shortcuts to the npm and yarn commands inside the container, and their caches are persistent. You can run Node.js daemons using web_extra_daemons . You can expose Node.js ports via ddev-router by using web_extra_exposed_ports . You can manually run Node.js scripts using ddev exec <script> or ddev exec nodejs <script> . Please share your techniques! There are several ways to share your favorite Node.js tips and techniques. Best are ddev-get add-ons , Stack Overflow , and ddev-contrib .","title":"Using Node.js with DDEV"},{"location":"users/extend/customization-extendibility/#running-extra-daemons-in-the-web-container","text":"There are several ways to run processes inside the web container. Manually execute them as needed, with ddev exec , for example. Run them with a post-start hook . Run them automatically using web_extra_daemons .","title":"Running Extra Daemons in the Web Container"},{"location":"users/extend/customization-extendibility/#exposing-extra-ports-via-ddev-router","text":"If your web container has additional HTTP servers running inside it on different ports, those can be exposed using web_extra_exposed_ports in .ddev/config.yaml . For example, this configuration would expose a node-vite HTTP server running on port 3000 inside the web container, via ddev-router , to ports 9998 (HTTP) and 9999 (HTTPS), so it could be accessed via https://<project>.ddev.site:9999 : web_extra_exposed_ports : - name : node-vite container_port : 3000 http_port : 9998 https_port : 9999 The configuration below would expose a Node.js server running in the web container on port 3000 as https://<project>.ddev.site:4000 and a \u201csomething\u201d server running in the web container on port 4000 as https://<project>.ddev.site:4000 : web_extra_exposed_ports : - name : nodejs container_port : 3000 http_port : 2999 https_port : 3000 - name : something container_port : 4000 https_port : 4000 http_port : 3999 Fill in all three fields even if you don\u2019t intend to use the https_port ! If you don\u2019t add https_port , then it default to 0 and ddev-router will fail to start.","title":"Exposing Extra Ports via ddev-router"},{"location":"users/extend/customization-extendibility/#providing-custom-environment-variables-to-a-container","text":"You can set custom environment variables in several places: The project\u2019s web_environment setting in .ddev/config.yaml or .ddev/config.*.yaml : web_environment : - MY_ENV_VAR=someval - MY_OTHER_ENV_VAR=someotherval The global web_environment setting in .ddev/global_config.yaml . An optional, project-level .ddev/.env file, which could look something like this: MY_ENV_VAR='someval' MY_OTHER_ENV_VAR='someotherval' If you\u2019d rather use the CLI to set the project or global web_environment value, you can use the ddev config command: # Set MY_ENV_VAR for the project ddev config --web-environment-add = \"MY_ENV_VAR=someval\" # Set MY_ENV_VAR globally ddev config global --web-environment-add = \"MY_ENV_VAR=someval You can use the --web-environment flag to overwrite existing values rather than adding them. Don\u2019t check in sensitive values! Sensitive variables like API keys should not be checked in with your project. Typically you might use an .env file and not check that in, but offer .env.example with expected keys that don\u2019t have values. Some use global configuration for sensitive values, as that\u2019s not normally checked in either.","title":"Providing Custom Environment Variables to a Container"},{"location":"users/extend/customization-extendibility/#custom-nginx-configuration","text":"When you ddev restart using nginx-fpm , DDEV creates a configuration customized to your project type in .ddev/nginx_full/nginx-site.conf . You can edit and override the configuration by removing the #ddev-generated line and doing whatever you need with it. After each change, ddev restart . You can also have more than one config file in the .ddev/nginx_full directory, they will all get loaded when DDEV starts. This can be used for serving multiple docroots and other techniques.","title":"Custom nginx Configuration"},{"location":"users/extend/customization-extendibility/#custom-apache-configuration","text":"If you\u2019re using webserver_type: apache-fpm in your .ddev/config.yaml , you can override the default site configuration by editing or replacing the DDEV-provided .ddev/apache/apache-site.conf configuration. Edit the .ddev/apache/apache-site.conf . Add your configuration changes. Save your configuration file and run ddev restart . If you encounter issues with your configuration or the project fails to start, use ddev logs to inspect the logs for possible Apache configuration errors. Use ddev exec apachectl -t to do a general Apache syntax check. The alias Alias \"/phpstatus\" \"/var/www/phpstatus.php\" is required for the health check script to work. Any errors in your configuration may cause the web container to fail. If you see that behavior, use ddev logs to diagnose. Important! Changes to .ddev/apache/apache-site.conf take place on a ddev restart . You can also ddev exec apachectl -k graceful to reload the Apache configuration.","title":"Custom Apache Configuration"},{"location":"users/extend/customization-extendibility/#custom-php-configuration-phpini","text":"You can provide additional PHP configuration for a project by creating a directory called .ddev/php/ and adding any number of *.ini PHP configuration files. You should generally limit your override to any specific option(s) you need to customize. Every file in .ddev/php/ will be copied into /etc/php/[version]/(cli|fpm)/conf.d , so it\u2019s possible to replace files that already exist in the container. Common usage is to put custom overrides in a file called my-php.ini . Make sure you include the section header that goes with each item (like [PHP] ). One interesting implication of this behavior is that it\u2019s possible to disable extensions by replacing the configuration file that loads them. For instance, if you were to create an empty file at .ddev/php/20-xdebug.ini , it would replace the configuration that loads Xdebug, which would cause Xdebug to not be loaded! To load the new configuration, run ddev restart . An example file in .ddev/php/my-php.ini might look like this: [PHP] max_execution_time = 240;","title":"Custom PHP Configuration (php.ini)"},{"location":"users/extend/customization-extendibility/#custom-mysqlmariadb-configuration-mycnf","text":"You can provide additional MySQL/MariaDB configuration for a project by creating a directory called .ddev/mysql/ and adding any number of *.cnf MySQL configuration files. These files will be automatically included when MySQL is started. Make sure that the section header is included in the file. An example file in .ddev/mysql/no_utf8mb4.cnf might be: [mysqld] collation-server = utf8_general_ci character-set-server = utf8 innodb_large_prefix=false To load the new configuration, run ddev restart .","title":"Custom MySQL/MariaDB configuration (my.cnf)"},{"location":"users/extend/customization-extendibility/#custom-postgresql-configuration","text":"If you\u2019re using PostgreSQL, a default posgresql.conf is provided in .ddev/postgres/postgresql.conf . If you need to alter it, remove the #ddev-generated line and ddev restart .","title":"Custom PostgreSQL Configuration"},{"location":"users/extend/customization-extendibility/#extending-configyaml-with-custom-configyaml-files","text":"You may add additional config.*.yaml files to organize additional commands as you see fit for your project and team. For example, many teams commit their config.yaml and share it throughout the team, but some team members may require overrides to the checked-in version specifically for their environment and not checked in. For example, a team member may want to use a router_http_port other than the team default due to a conflict in their development environment. In this case they could add .ddev/config.ports.yaml : # My machine can\u2019t use port 80 so override with port 8080, but don\u2019t check this in! router_http_port : 8080 config.*.yaml is by default omitted from Git by the .ddev/.gitignore file. You can commit it by using git add -f .ddev/config.<something>.yaml . Extra config.*.yaml files are loaded in lexicographic order, so config.a.yaml will be overridden by config.b.yaml . Teams may choose to use config.local.yaml or config.override.yaml for all local non-committed config changes, for example. config.*.yaml update configuration according to these rules: Simple fields like router_http_port or webserver_type are overwritten. Lists of strings like additional_hostnames or additional_fqdns are merged. The list of environment variables in web_environment are \u201csmart merged\u201d: if you add the same environment variable with a different value, the value in the override file will replace the value from config.yaml . Hook specifications in the hooks variable are merged. If you need to override existing values, set override_config: true in the config.*.yaml where the override behavior should take place. Since config.*.yaml files are normally merged into the configuration, some things can\u2019t be overridden normally. For example, if you have nfs_mount_enabled: true you can\u2019t override it with a merge and you can\u2019t erase existing hooks or all environment variables. However, with override_config: true in a particular config.*.yaml file, override_config : true nfs_mount_enabled : false can override the existing values, and override_config : true hooks : post-start : [] or override_config : true additional_hostnames : [] can have their intended affect. override_config affects only behavior of the config.*.yaml file it exists in. To experiment with the behavior of a set of config.*.yaml files, use the ddev debug configyaml file; it\u2019s especially valuable with the yq command, for example ddev debug configyaml | yq .","title":"Extending config.yaml with Custom config.*.yaml Files"},{"location":"users/extend/customization-extendibility/#explicit-supervisord-configuration-for-additional-daemons","text":"Although most extra daemons (like Node.js daemons, etc) can be configured easily using web_extra_daemons , there may be situations where you want complete control of the supervisord configuration. In these case you can create a .ddev/web-build/<daemonname>.conf with configuration like: [program:daemonname] command=/var/www/html/path/to/daemon directory=/var/www/html/ autorestart=true startretries=10 stdout_logfile=/proc/self/fd/2 stdout_logfile_maxbytes=0 redirect_stderr=true And create a .ddev/web-build/Dockerfile.<daemonname> to install the config file: ADD daemonname.conf /etc/supervisor/conf.d Full details for advanced configuration possibilities are in supervisor docs .","title":"Explicit supervisord Configuration for Additional Daemons"},{"location":"users/extend/customizing-images/","text":"Customizing Docker Images \u00b6 It\u2019s common to have a requirement for the web or db images which isn\u2019t bundled with them by default. There are two ways to extend these Docker images: webimage_extra_packages and dbimage_extra_packages in .ddev/config.yaml . An add-on Dockerfile in your project\u2019s .ddev/web-build or .ddev/db-build . Adding Extra Debian Packages with webimage_extra_packages and dbimage_extra_packages \u00b6 You can add extra Debian packages with lines like this in .ddev/config.yaml : webimage_extra_packages : [ php-yaml , php7.3-tidy ] dbimage_extra_packages : [ telnet , netcat ] Then the additional packages will be built into the containers during ddev start . Determining What Packages You Need \u00b6 The web container is a Debian image, and its PHP distributions are packaged (thank you!) by deb.sury.org . Most PHP extensions are built in the deb.sury.org distribution. You can Google the extension you want, or download and search the Packages list from the sury distribution. For example, the bcmath PHP extension is provided by php-bcmath . Many packages have version-specific names, like php7.3-tidy . If you need a package that is not a PHP package, you can view and search standard Debian packages at packages.debian.org/stable , or just use Google. To test that a package will do what you want, you can ddev ssh and sudo apt-get update && sudo apt-get install <package> to verify that you can install it and you get what you need. A PHP extension may require killall -USR2 php-fpm to take effect. After you\u2019ve tried that, you can add the package to webimage_extra_packages . Adding Extra Dockerfiles for webimage and dbimage \u00b6 For more complex requirements, you can add: .ddev/web-build/Dockerfile .ddev/web-build/Dockerfile.* .ddev/db-build/Dockerfile .ddev/db-build/Dockerfile.* These files\u2019 content will be inserted into the constructed Dockerfile for each image. They are inserted after most of the rest of the things that are done to build the image, and are done in alphabetical order, so Dockerfile is inserted first, followed by Dockerfile.* in alphabetical order. For certain use cases, you might need to add directives very early on the Dockerfile like proxy settings or SSL termination. You can use pre. variants for this that are inserted before everything else: .ddev/web-build/pre.Dockerfile.* .ddev/db-build/pre.Dockerfile.* Examine the resultant generated Dockerfile (which you will never edit directly), at .ddev/.webimageBuild/Dockerfile . You can force a rebuild with ddev debug refresh . Examples of possible Dockerfiles are .ddev/web-build/Dockerfile.example and .ddev/db-build/Dockerfile.example , created in your project when you run ddev config . You can use the .ddev/*-build directory as the Docker \u201ccontext\u201d directory as well. So for example, if a file named README.txt exists in .ddev/web-build , you can use ADD README.txt / in the Dockerfile. An example web image .ddev/web-build/Dockerfile might be: RUN npm install -g gatsby-cli Another example would be installing phpcs globally (see Stack Overflow answer ): ENV COMPOSER_HOME = /usr/local/composer # We try to avoid relying on Composer to download global, so in `phpcs` case we can use the PHAR. RUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o /usr/local/bin/phpcs && chmod +x /usr/local/bin/phpcs RUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf && chmod +x /usr/local/bin/phpcbf # If however we need to download a package, we use `cgr` for that. RUN composer global require consolidation/cgr RUN $COMPOSER_HOME /vendor/bin/cgr drupal/coder:^8.3.1 RUN $COMPOSER_HOME /vendor/bin/cgr dealerdirect/phpcodesniffer-composer-installer # Register Drupal\u2019s code sniffer rules. RUN phpcs --config-set installed_paths $COMPOSER_HOME /global/drupal/coder/vendor/drupal/coder/coder_sniffer --verbose # Make Codesniffer config file writable for ordinary users in container. RUN chmod 666 /usr/local/bin/CodeSniffer.conf # Make `COMPOSER_HOME` writable if regular users need to use it. RUN chmod -R ugo+rw $COMPOSER_HOME # Now turn it off, because ordinary users will want to be using the default. ENV COMPOSER_HOME = \"\" Remember that the Dockerfile is building a Docker image that will be used later with DDEV. At the time the Dockerfile is executing, your code is not mounted and the container is not running, it\u2019s just being built. So for example, an npm install in /var/www/html will not do anything useful because the code is not there at image building time. Debugging the Dockerfile Build \u00b6 It can be complicated to figure out what\u2019s going on when building a Dockerfile, and even more complicated when you\u2019re seeing it go by as part of ddev start . Use ddev ssh first of all to pioneer the steps you want to take. You can do all the things you need to do there and see if it works. If you\u2019re doing something that affects PHP, you may need to sudo killall -USR2 php-fpm for it to take effect. Put the steps you pioneered into .ddev/web-build/Dockerfile as above. If you can\u2019t figure out what\u2019s failing or why, then ~/.ddev/bin/docker-compose -f .ddev/.ddev-docker-compose-full.yaml build web --no-cache --progress=plain to see what\u2019s happening during the Dockerfile build.","title":"Customizing Docker Images"},{"location":"users/extend/customizing-images/#customizing-docker-images","text":"It\u2019s common to have a requirement for the web or db images which isn\u2019t bundled with them by default. There are two ways to extend these Docker images: webimage_extra_packages and dbimage_extra_packages in .ddev/config.yaml . An add-on Dockerfile in your project\u2019s .ddev/web-build or .ddev/db-build .","title":"Customizing Docker Images"},{"location":"users/extend/customizing-images/#adding-extra-debian-packages-with-webimage_extra_packages-and-dbimage_extra_packages","text":"You can add extra Debian packages with lines like this in .ddev/config.yaml : webimage_extra_packages : [ php-yaml , php7.3-tidy ] dbimage_extra_packages : [ telnet , netcat ] Then the additional packages will be built into the containers during ddev start .","title":"Adding Extra Debian Packages with webimage_extra_packages and dbimage_extra_packages"},{"location":"users/extend/customizing-images/#determining-what-packages-you-need","text":"The web container is a Debian image, and its PHP distributions are packaged (thank you!) by deb.sury.org . Most PHP extensions are built in the deb.sury.org distribution. You can Google the extension you want, or download and search the Packages list from the sury distribution. For example, the bcmath PHP extension is provided by php-bcmath . Many packages have version-specific names, like php7.3-tidy . If you need a package that is not a PHP package, you can view and search standard Debian packages at packages.debian.org/stable , or just use Google. To test that a package will do what you want, you can ddev ssh and sudo apt-get update && sudo apt-get install <package> to verify that you can install it and you get what you need. A PHP extension may require killall -USR2 php-fpm to take effect. After you\u2019ve tried that, you can add the package to webimage_extra_packages .","title":"Determining What Packages You Need"},{"location":"users/extend/customizing-images/#adding-extra-dockerfiles-for-webimage-and-dbimage","text":"For more complex requirements, you can add: .ddev/web-build/Dockerfile .ddev/web-build/Dockerfile.* .ddev/db-build/Dockerfile .ddev/db-build/Dockerfile.* These files\u2019 content will be inserted into the constructed Dockerfile for each image. They are inserted after most of the rest of the things that are done to build the image, and are done in alphabetical order, so Dockerfile is inserted first, followed by Dockerfile.* in alphabetical order. For certain use cases, you might need to add directives very early on the Dockerfile like proxy settings or SSL termination. You can use pre. variants for this that are inserted before everything else: .ddev/web-build/pre.Dockerfile.* .ddev/db-build/pre.Dockerfile.* Examine the resultant generated Dockerfile (which you will never edit directly), at .ddev/.webimageBuild/Dockerfile . You can force a rebuild with ddev debug refresh . Examples of possible Dockerfiles are .ddev/web-build/Dockerfile.example and .ddev/db-build/Dockerfile.example , created in your project when you run ddev config . You can use the .ddev/*-build directory as the Docker \u201ccontext\u201d directory as well. So for example, if a file named README.txt exists in .ddev/web-build , you can use ADD README.txt / in the Dockerfile. An example web image .ddev/web-build/Dockerfile might be: RUN npm install -g gatsby-cli Another example would be installing phpcs globally (see Stack Overflow answer ): ENV COMPOSER_HOME = /usr/local/composer # We try to avoid relying on Composer to download global, so in `phpcs` case we can use the PHAR. RUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o /usr/local/bin/phpcs && chmod +x /usr/local/bin/phpcs RUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf && chmod +x /usr/local/bin/phpcbf # If however we need to download a package, we use `cgr` for that. RUN composer global require consolidation/cgr RUN $COMPOSER_HOME /vendor/bin/cgr drupal/coder:^8.3.1 RUN $COMPOSER_HOME /vendor/bin/cgr dealerdirect/phpcodesniffer-composer-installer # Register Drupal\u2019s code sniffer rules. RUN phpcs --config-set installed_paths $COMPOSER_HOME /global/drupal/coder/vendor/drupal/coder/coder_sniffer --verbose # Make Codesniffer config file writable for ordinary users in container. RUN chmod 666 /usr/local/bin/CodeSniffer.conf # Make `COMPOSER_HOME` writable if regular users need to use it. RUN chmod -R ugo+rw $COMPOSER_HOME # Now turn it off, because ordinary users will want to be using the default. ENV COMPOSER_HOME = \"\" Remember that the Dockerfile is building a Docker image that will be used later with DDEV. At the time the Dockerfile is executing, your code is not mounted and the container is not running, it\u2019s just being built. So for example, an npm install in /var/www/html will not do anything useful because the code is not there at image building time.","title":"Adding Extra Dockerfiles for webimage and dbimage"},{"location":"users/extend/database-types/","text":"Database Server Types \u00b6 DDEV supports most versions of MariaDB, MySQL, and PostgreSQL database servers. The default database type is MariaDB, and the default version is currently 10.4, but you can use nearly any MariaDB versions 5.5-10.8, MySQL 5.5-8.0, and Postgres 9-15. You could set these using the ddev config command like this: ddev config --database=mysql:5.7 ddev config --database=mariadb:10.6 ddev config --database=postgres:14 . Or by editing the database setting in .ddev/config.yaml : database : type : mysql version : 5.7 database : type : mariadb version : 10.6 database : type : postgres version : 14 Checking the Existing Database and/or Migrating \u00b6 Since the existing binary database may not be compatible with changes to your configuration, you need to check and/or migrate your database. ddev debug get-volume-db-version will show the current binary database type. ddev debug check-db-match will show if your configured project matches the binary database type. ddev debug migrate-database allows an automated attempt at migrating your database to a different type/version. This only works with databases of type mysql or mariadb . MySQL 8.0 has diverged in syntax from most of its predecessors, including earlier MySQL and all MariaDB versions. As a result, you may not be able to migrated from databases of type mysql:8.0 because dumps from MySQL 8.0 often have keywords or other features not supported elsewhere. Examples: ddev debug migrate-database mariadb:10.7 , ddev debug migrate-database mysql:8.0 . Caveats \u00b6 If you change the database type or version in an existing project, the existing database will not be compatible with your change, so you\u2019ll want to use ddev export-db to save a dump first. When you change database type, destroy the existing database using ddev delete --omit-snapshot before changing, then after ddev start use ddev import-db to import the dump you saved. Snapshots are always per database type and database version. So if you have snapshots from MariaDB 10.2 and you switch to MariaDB 10.5, don\u2019t expect to be able to restore the old snapshot.","title":"Database Server Types"},{"location":"users/extend/database-types/#database-server-types","text":"DDEV supports most versions of MariaDB, MySQL, and PostgreSQL database servers. The default database type is MariaDB, and the default version is currently 10.4, but you can use nearly any MariaDB versions 5.5-10.8, MySQL 5.5-8.0, and Postgres 9-15. You could set these using the ddev config command like this: ddev config --database=mysql:5.7 ddev config --database=mariadb:10.6 ddev config --database=postgres:14 . Or by editing the database setting in .ddev/config.yaml : database : type : mysql version : 5.7 database : type : mariadb version : 10.6 database : type : postgres version : 14","title":"Database Server Types"},{"location":"users/extend/database-types/#checking-the-existing-database-andor-migrating","text":"Since the existing binary database may not be compatible with changes to your configuration, you need to check and/or migrate your database. ddev debug get-volume-db-version will show the current binary database type. ddev debug check-db-match will show if your configured project matches the binary database type. ddev debug migrate-database allows an automated attempt at migrating your database to a different type/version. This only works with databases of type mysql or mariadb . MySQL 8.0 has diverged in syntax from most of its predecessors, including earlier MySQL and all MariaDB versions. As a result, you may not be able to migrated from databases of type mysql:8.0 because dumps from MySQL 8.0 often have keywords or other features not supported elsewhere. Examples: ddev debug migrate-database mariadb:10.7 , ddev debug migrate-database mysql:8.0 .","title":"Checking the Existing Database and/or Migrating"},{"location":"users/extend/database-types/#caveats","text":"If you change the database type or version in an existing project, the existing database will not be compatible with your change, so you\u2019ll want to use ddev export-db to save a dump first. When you change database type, destroy the existing database using ddev delete --omit-snapshot before changing, then after ddev start use ddev import-db to import the dump you saved. Snapshots are always per database type and database version. So if you have snapshots from MariaDB 10.2 and you switch to MariaDB 10.5, don\u2019t expect to be able to restore the old snapshot.","title":"Caveats"},{"location":"users/extend/in-container-configuration/","text":"In-Container Home Directory and Shell Configuration \u00b6 Custom shell configuration (Bash or your preferred shell), your usual Git configuration, a Composer auth.json and more can be achieved within your containers. Place all your dotfiles in your global ~/.ddev/homeadditions or your project\u2019s .ddev/homeadditions directory and DDEV will use these in your project\u2019s web containers. Ignore .ddev/.homeadditions ! A hidden/transient .ddev/.homeadditions \u2014emphasis on the leading . \u2014is used for processing global homeadditions and should be ignored. On ddev start , DDEV attempts to create a user inside the web and db containers with the same name and user ID as the one you have on the host machine. DDEV looks for the homeadditions directory both in the global ~/.ddev/homeadditions directory and the project-level .ddev/homeadditions directory, and will copy their contents recursively into the in-container home directory during ddev start . Project homeadditions contents override the global homeadditions . Usage examples: If you use Git inside the container, you may want to symlink your ~/.gitconfig into ~/.ddev/homeadditions or the project\u2019s .ddev/homeadditions so that in-container git commands use whatever username and email you\u2019ve configured on your host machine. For example, ln -s ~/.gitconfig ~/.ddev/homeadditions/.gitconfig . If you use SSH inside the container and want to use your .ssh/config , consider mkdir -p ~/.ddev/homeadditions/.ssh && ln -s ~/.ssh/config ~/.ddev/homeadditions/.ssh/config . Some people will be able to symlink their entire .ssh directory, ln -s ~/.ssh ~/.ddev/homeadditions/ssh . If you provide your own .ssh/config though, please make sure it includes these lines: UserKnownHostsFile=/home/.ssh-agent/known_hosts StrictHostKeyChecking=no If you need to add a script or other executable component into the project (or global configuration), you can put it in the project or global .ddev/homeadditions/bin directory and ~/bin/<script will be created inside the container. This is useful for adding a script to one project or every project, or for overriding standard scripts, as ~/bin is first in the $PATH in the web container. If you use private, password-protected Composer repositories with Satis , for example, and use a global auth.json , you might want to mkdir -p ~/.ddev/homeadditions/.composer && ln -s ~/.composer/auth.json ~/.ddev/homeadditions/.composer/auth.json , but be careful that you exclude it from getting checked in by using a .gitignore or equivalent. You can add small scripts to the .bashrc.d directory and they will be executed on ddev ssh . For example, add a ~/.ddev/homeadditions/.bashrc.d/whereami containing echo \"I am in the $(hostname) container\" and (after ddev restart ) when you ddev ssh that will be executed. If you have a favorite .bashrc , copy it into either the global or project homeadditions . If you like the traditional ll bash alias for ls -l , add a .ddev/homeadditions/.bash_aliases with these contents: alias ll=\"ls -lhA\"","title":"In-Container Home Directory and Shell Configuration"},{"location":"users/extend/in-container-configuration/#in-container-home-directory-and-shell-configuration","text":"Custom shell configuration (Bash or your preferred shell), your usual Git configuration, a Composer auth.json and more can be achieved within your containers. Place all your dotfiles in your global ~/.ddev/homeadditions or your project\u2019s .ddev/homeadditions directory and DDEV will use these in your project\u2019s web containers. Ignore .ddev/.homeadditions ! A hidden/transient .ddev/.homeadditions \u2014emphasis on the leading . \u2014is used for processing global homeadditions and should be ignored. On ddev start , DDEV attempts to create a user inside the web and db containers with the same name and user ID as the one you have on the host machine. DDEV looks for the homeadditions directory both in the global ~/.ddev/homeadditions directory and the project-level .ddev/homeadditions directory, and will copy their contents recursively into the in-container home directory during ddev start . Project homeadditions contents override the global homeadditions . Usage examples: If you use Git inside the container, you may want to symlink your ~/.gitconfig into ~/.ddev/homeadditions or the project\u2019s .ddev/homeadditions so that in-container git commands use whatever username and email you\u2019ve configured on your host machine. For example, ln -s ~/.gitconfig ~/.ddev/homeadditions/.gitconfig . If you use SSH inside the container and want to use your .ssh/config , consider mkdir -p ~/.ddev/homeadditions/.ssh && ln -s ~/.ssh/config ~/.ddev/homeadditions/.ssh/config . Some people will be able to symlink their entire .ssh directory, ln -s ~/.ssh ~/.ddev/homeadditions/ssh . If you provide your own .ssh/config though, please make sure it includes these lines: UserKnownHostsFile=/home/.ssh-agent/known_hosts StrictHostKeyChecking=no If you need to add a script or other executable component into the project (or global configuration), you can put it in the project or global .ddev/homeadditions/bin directory and ~/bin/<script will be created inside the container. This is useful for adding a script to one project or every project, or for overriding standard scripts, as ~/bin is first in the $PATH in the web container. If you use private, password-protected Composer repositories with Satis , for example, and use a global auth.json , you might want to mkdir -p ~/.ddev/homeadditions/.composer && ln -s ~/.composer/auth.json ~/.ddev/homeadditions/.composer/auth.json , but be careful that you exclude it from getting checked in by using a .gitignore or equivalent. You can add small scripts to the .bashrc.d directory and they will be executed on ddev ssh . For example, add a ~/.ddev/homeadditions/.bashrc.d/whereami containing echo \"I am in the $(hostname) container\" and (after ddev restart ) when you ddev ssh that will be executed. If you have a favorite .bashrc , copy it into either the global or project homeadditions . If you like the traditional ll bash alias for ls -l , add a .ddev/homeadditions/.bash_aliases with these contents: alias ll=\"ls -lhA\"","title":"In-Container Home Directory and Shell Configuration"},{"location":"users/install/","text":"Installation \u00b6 Whatever system you\u2019re on, you\u2019ll first need to Install Docker or Colima , then Install DDEV . For the best experience, consider performance tuning and enabling shell completion .","title":"Installation"},{"location":"users/install/#installation","text":"Whatever system you\u2019re on, you\u2019ll first need to Install Docker or Colima , then Install DDEV . For the best experience, consider performance tuning and enabling shell completion .","title":"Installation"},{"location":"users/install/ddev-installation/","text":"DDEV Installation \u00b6 Once you\u2019ve installed a Docker provider , you\u2019re ready to install DDEV! Installing and upgrading DDEV are nearly the same thing, because you're upgrading the ddev binary that talks with Docker. You can update this file like other software on your system, whether it\u2019s with a package manager or traditional installer. macOS Linux Windows WSL2 Traditional Windows Gitpod Manual macOS \u00b6 Homebrew \u00b6 Homebrew is the easiest way to install and upgrade DDEV: brew install drud/ddev/ddev brew upgrade ddev As a one-time initialization, run mkcert -install Install Script \u00b6 Tip The install script works on macOS, Linux, and Windows WSL2. Run the install script to install or update DDEV. It downloads, verifies, and sets up the ddev binary: curl -fsSL https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash You can include a -s <version> argument to install a specific release or a prerelease version: curl -fsSL https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev.sh | bash -s v1.19.5 Linux \u00b6 Debian/Ubuntu \u00b6 DDEV\u2019s Debian and RPM packages work with apt and yum repositories and most variants that use them, including Windows WSL2: curl -fsSL https://apt.fury.io/drud/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ddev.gpg > /dev/null echo \"deb [signed-by=/etc/apt/trusted.gpg.d/ddev.gpg] https://apt.fury.io/drud/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list sudo apt update && sudo apt install -y ddev Update with your usual commands: sudo apt update && sudo apt upgrade Removing Previous Install Methods If you previously used DDEV\u2019s install script , you can remove that version: sudo rm -f /usr/local/bin/ddev /usr/local/bin/mkcert /usr/local/bin/*ddev_nfs_setup.sh If you previously installed DDEV with Homebrew , you can run brew unlink ddev to get rid of the Homebrew version. Fedora, Red Hat, etc. \u00b6 echo '[ddev] name=DDEV Repo baseurl=https://yum.fury.io/drud/ enabled=1 gpgcheck=0' | sudo tee -a /etc/yum.repos.d/ddev.repo sudo dnf install --refresh ddev In the future you can update as usual using sudo dnf upgrade ddev . (Signed repository support will be added in the near future.) Arch Linux \u00b6 For Arch-based systems including Arch Linux , EndeavourOS and Manjaro we maintain the ddev-bin package in AUR. To install use yay -S ddev or whatever other AUR tool you use; to upgrade yay -Syu ddev . As a one-time initialization, run mkcert -install . Alternate Linux Install Methods \u00b6 You can also use two macOS install methods to install or update DDEV on Linux: Homebrew (only on AMD64 computers) and the standalone install script . Windows WSL2 \u00b6 Windows WSL2 is a fantastic way to run DDEV and your web components. It\u2019s Linux, which means a different experience for many Windows users. It\u2019s Ubuntu Linux by default as described here, so it\u2019s worth taking a little time to explore how Ubuntu and Bash work, including standard system commands and installation and upgrade procedures. WSL2 is the recommended installation method for all Windows users . Using WSL2 to install and run DDEV is not the same as using Docker Desktop's WSL2 engine, which itself runs in WSL2, but can serve applications running in both traditional WIndows and inside WSL2. All Windows 10/11 editions (including Windows 10 Home) support WSL2 . If you\u2019re already familiar with DDEV on Windows, you might have been using NFS for better filesystem performance. You won't need NFS anymore once you switch to WSL2 , since it provides awesome filesystem performance out of the box. The WSL2 install process involves: Installing Chocolatey package manager (optional). One time initialization of mkcert. Installing WSL2 and installing a distro like Ubuntu. Installing Docker Desktop for Windows and enabling WSL2 integration with the distro (optional, do this if you're using the Docker Desktop approach). Installing DDEV inside your distro. WSL2 + Docker CE Inside Install Script \u00b6 This scripted installation prepares your default WSL2 Ubuntu distro and has no dependency on Docker Desktop. The provided PowerShell.exe (original PowerShell 5) script can do most of the work for you, or you can handle these things manually. In all cases: Install WSL2 with an Ubuntu distro. On a system without WSL2, run: wsl - -install Verify that you have an Ubuntu distro set to default by running wsl -l -v . If you already have WSL2 but don't have an Ubuntu distro, install one by running wsl --install Ubuntu . If that doesn't work for you, see the manual installation and linked troubleshooting . If you prefer to use another Ubuntu distro, install it and set it as default. For example, wsl --set-default Ubuntu-22.04 . In an administrative PowerShell (5) run this PowerShell script by executing: Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev_wsl2_docker_inside.ps1' )) Now you can use the \"Ubuntu\" terminal app or Windows Terminal to access your Ubuntu distro, which has DDEV and Docker working inside it. WSL2 + Docker Desktop Install Script \u00b6 This scripted installation prepares your default WSL2 Ubuntu distro for use with Docker Desktop. You can do these things manually, or you can do most of it with the provided PowerShell (5) script. In all cases: Install WSL2 with an Ubuntu distro. On a system without WSL2, just run: wsl - -install Verify that you have an Ubuntu distro set as the default default with wsl -l -v . If you already have WSL2 but don't have an Ubuntu distro, install one with wsl --install Ubuntu . If that doesn't work for you, see the manual installation and linked troubleshooting . If you prefer to use another Ubuntu distro, just install it and set it as default. For example, wsl --set-default Ubuntu-22.04 . Install Docker Desktop. If you already have chocolatey, choco install -y docker-desktop or download Docker Desktop from Docker . Start Docker Desktop. You should now be able to do docker ps in PowerShell or Git Bash. In Docker Desktop -> Settings -> Resources -> WSL2 Integration verify that Docker Desktop is integrated with your distro. In an administrative PowerShell (5) run this PowerShell script by executing: Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://raw.githubusercontent.com/drud/ddev/master/scripts/install_ddev_wsl2_docker_desktop.ps1' )) Now you can use the \"Ubuntu\" terminal app or Windows Terminal to access your Ubuntu distro, which has DDEV and Docker Desktop integrated with it. WSL2/Docker Desktop Manual Installation \u00b6 You can do all of the steps manually of course: Install Chocolatey : Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://chocolatey.org/install.ps1' ))` In an administrative PowerShell: choco install -y ddev mkcert In an administrative PowerShell, run mkcert -install and answer the prompt allowing the installation of the Certificate Authority. In an administrative PowerShell, run the command $env:CAROOT=\"$(mkcert -CAROOT)\"; setx CAROOT $env:CAROOT; If ($Env:WSLENV -notlike \"*CAROOT/up:*\") { $env:WSLENV=\"CAROOT/up:$env:WSLENV\"; setx WSLENV $Env:WSLENV } . This will set WSL2 to use the Certificate Authority installed on the Windows side. In some cases it takes a reboot to work correctly. In administrative PowerShell, run the command wsl --install . This will install WSL2 and Ubuntu for you. Reboot when this is done. Docker Desktop for Windows: If you already have the latest Docker Desktop, configure it in the General Settings to use the WSL2-based engine. Otherwise install the latest Docker Desktop for Windows and select the WSL2-based engine (not legacy Hyper-V) when installing. Install via Chocolatey with choco install docker-desktop or it can be downloaded from desktop.docker.com . Start Docker. It may prompt you to log out and log in again, or reboot. Go to Docker Desktop\u2019s Settings \u2192 Resources \u2192 WSL integration \u2192 enable integration for your distro . Now docker commands will be available from within your WSL2 distro. Double-check in PowerShell: wsl -l -v should show three distros, and your Ubuntu should be the default. All three should be WSL version 2. Double-check in Ubuntu (or your distro): echo $CAROOT should show something like /mnt/c/Users/<you>/AppData/Local/mkcert Check that Docker is working inside Ubuntu (or your distro): docker ps Open the WSL2 terminal, for example Ubuntu from the Windows start menu. Install DDEV using curl https://apt.fury.io/drud/gpg.key | sudo apt-key add - echo \"deb https://apt.fury.io/drud/ * *\" | sudo tee -a /etc/apt/sources.list.d/ddev.list sudo apt update && sudo apt install -y ddev In WSL2 run mkcert -install . You have now installed DDEV on WSL2. If you\u2019re using WSL2 for DDEV (recommended), remember to run all ddev commands inside the WSL2 distro. To upgrade DDEV in WSL2 Ubuntu, use apt upgrade ddev as described in the Linux installation section . Projects go in /home , not on the Windows filesystem Make sure you put your projects in the Linux filesystem (e.g. /home/<your_username> ), not in the Windows filesystem ( /mnt/c ), because you\u2019ll get vastly superior performance on the Linux filesystem. You will be very unhappy if you put your project in /mnt/c . WSL2 hostname management DDEV attempts to manage custom hostnames via the Windows-side hosts file (usually C:\\Windows\\system32\\drivers\\etc\\hosts') rather than the hosts file inside WSL2. It can only do this if DDEV (with sudo.exe) is installed and in the $PATH on the Windows side. (DDEV inside WSL2 uses ddev.exe on the Windows side as a proxy to update the Windows hosts file.) If ddev.exe --version gives you a reasonable result you're all set up. Otherwise, install DDEV on Windows using choco install -y ddev or by downloading and running the Windows installer. In general, the ddev.exe on the Windows side does not have to be the exact same version as the ddev` used in WSL2. Path to certificates If you get the prompt Installing to the system store is not yet supported on this Linux , you may just need to add /usr/sbin to the $PATH so that /usr/sbin/update-ca-certificates can be found. Traditional Windows \u00b6 DDEV works fine on the Windows side, but it\u2019s slower than WSL2 by default. Enable either Mutagen or NFS for the best performance. If you use Chocolatey (recommended), you can run choco install ddev git from an administrative shell. Upgrades are just ddev poweroff && choco upgrade ddev . A Windows installer is provided in each DDEV release ( ddev_windows_installer.<version>.exe ). Run that and it will do the full installation for you. Open a new Git Bash or PowerShell or cmd window and start using DDEV. Most people interact with DDEV on Windows using Git Bash, part of the Windows Git suite . Although DDEV does work with cmd and PowerShell, it's more at home in Bash. You can install it with Chocolatey using choco install -y git . For performance, many users enable Mutagen, ddev config global --mutagen-enabled (global) or ddev config --mutagen-enabled just for one project. Windows Firefox Trusted CA The mkcert -install step on Windows isn\u2019t enough for Firefox. You need to add the created root certificate authority to the security configuration yourself: Run mkcert -install (you can use the shortcut from the Start Menu for that) Run mkcert -CAROOT to see the local folder used for the newly-created root certificate authority Open Firefox Preferences ( about:preferences#privacy ) Enter \u201ccertificates\u201d into the search box on the top Click View Certificates... Select Authorities tab Click to Import... Navigate to the folder where your root certificate authority was stored Select the rootCA.pem file Click to Open You should now see your CA under mkcert development CA . Gitpod \u00b6 DDEV is fully supported in Gitpod , where you don\u2019t have to install anything at all. Choose any of the following methods to launch your project: Open any repository using Gitpod, run brew install drud/ddev/ddev , and use DDEV! You can install your web app there, or import a database. You may want to implement one of the ddev pull provider integrations to pull from a hosting provider or an upstream source. Use the ddev-gitpod-launcher form to launch a repository. You\u2019ll provide a source repository and click a button to open a newly-established environment. You can specify a companion artifacts repository and automatically load db.sql.gz and files.tgz from it. (More details in the repository\u2019s README .) Save the following link to your bookmark bar: Open in ddev-gitpod . It\u2019s easiest to drag the link into your bookmarks. When you\u2019re on a Git repository, click the bookmark to open it with DDEV in Gitpod. It does the same thing as the second option, but it works on non-Chrome browsers and you can use native browser keyboard shortcuts. It can be complicated to get private databases and files into Gitpod, so in addition to the launchers, the git provider example demonstrates pulling a database and files without complex setup or permissions. This was created explicitly for Gitpod integration, because in Gitpod you typically already have access to private Git repositories, which are a fine place to put a starter database and files. Although ddev-gitpod-launcher and the web extension provide the capability, you may want to integrate a Git provider\u2014or one of the other providers \u2014for each project. Manual \u00b6 DDEV is a single executable, so installation on any OS is a matter of copying the a ddev binary for your architecture into the appropriate system path on your machine. Download and extract the latest DDEV release for your architecture. Move ddev to /usr/local/bin with mv ddev /usr/local/bin/ (may require sudo ), or another directory in your $PATH as preferred. Run ddev to test your installation. You should see DDEV\u2019s command usage output. As a one-time initialization, run mkcert -install , which may require your sudo password. If you don\u2019t have mkcert installed, download the latest release for your architecture and sudo mv <downloaded_file> /usr/local/bin/mkcert && sudo chmod +x /usr/local/bin/mkcert .","title":"DDEV Installation"},{"location":"users/install/ddev-installation/#ddev-installation","text":"Once you\u2019ve installed a Docker provider , you\u2019re ready to install DDEV! Installing and upgrading DDEV are nearly the same thing, because you're upgrading the ddev binary that talks with Docker. You can update this file like other software on your system, whether it\u2019s with a package manager or traditional installer. macOS Linux Windows WSL2 Traditional Windows Gitpod Manual","title":"DDEV Installation"},{"location":"users/install/ddev-installation/#macos","text":"","title":"macOS"},{"location":"users/install/ddev-installation/#linux","text":"","title":"Linux"},{"location":"users/install/ddev-installation/#windows-wsl2","text":"Windows WSL2 is a fantastic way to run DDEV and your web components. It\u2019s Linux, which means a different experience for many Windows users. It\u2019s Ubuntu Linux by default as described here, so it\u2019s worth taking a little time to explore how Ubuntu and Bash work, including standard system commands and installation and upgrade procedures. WSL2 is the recommended installation method for all Windows users . Using WSL2 to install and run DDEV is not the same as using Docker Desktop's WSL2 engine, which itself runs in WSL2, but can serve applications running in both traditional WIndows and inside WSL2. All Windows 10/11 editions (including Windows 10 Home) support WSL2 . If you\u2019re already familiar with DDEV on Windows, you might have been using NFS for better filesystem performance. You won't need NFS anymore once you switch to WSL2 , since it provides awesome filesystem performance out of the box. The WSL2 install process involves: Installing Chocolatey package manager (optional). One time initialization of mkcert. Installing WSL2 and installing a distro like Ubuntu. Installing Docker Desktop for Windows and enabling WSL2 integration with the distro (optional, do this if you're using the Docker Desktop approach). Installing DDEV inside your distro.","title":"Windows WSL2"},{"location":"users/install/ddev-installation/#traditional-windows","text":"DDEV works fine on the Windows side, but it\u2019s slower than WSL2 by default. Enable either Mutagen or NFS for the best performance. If you use Chocolatey (recommended), you can run choco install ddev git from an administrative shell. Upgrades are just ddev poweroff && choco upgrade ddev . A Windows installer is provided in each DDEV release ( ddev_windows_installer.<version>.exe ). Run that and it will do the full installation for you. Open a new Git Bash or PowerShell or cmd window and start using DDEV. Most people interact with DDEV on Windows using Git Bash, part of the Windows Git suite . Although DDEV does work with cmd and PowerShell, it's more at home in Bash. You can install it with Chocolatey using choco install -y git . For performance, many users enable Mutagen, ddev config global --mutagen-enabled (global) or ddev config --mutagen-enabled just for one project. Windows Firefox Trusted CA The mkcert -install step on Windows isn\u2019t enough for Firefox. You need to add the created root certificate authority to the security configuration yourself: Run mkcert -install (you can use the shortcut from the Start Menu for that) Run mkcert -CAROOT to see the local folder used for the newly-created root certificate authority Open Firefox Preferences ( about:preferences#privacy ) Enter \u201ccertificates\u201d into the search box on the top Click View Certificates... Select Authorities tab Click to Import... Navigate to the folder where your root certificate authority was stored Select the rootCA.pem file Click to Open You should now see your CA under mkcert development CA .","title":"Traditional Windows"},{"location":"users/install/ddev-installation/#gitpod","text":"DDEV is fully supported in Gitpod , where you don\u2019t have to install anything at all. Choose any of the following methods to launch your project: Open any repository using Gitpod, run brew install drud/ddev/ddev , and use DDEV! You can install your web app there, or import a database. You may want to implement one of the ddev pull provider integrations to pull from a hosting provider or an upstream source. Use the ddev-gitpod-launcher form to launch a repository. You\u2019ll provide a source repository and click a button to open a newly-established environment. You can specify a companion artifacts repository and automatically load db.sql.gz and files.tgz from it. (More details in the repository\u2019s README .) Save the following link to your bookmark bar: Open in ddev-gitpod . It\u2019s easiest to drag the link into your bookmarks. When you\u2019re on a Git repository, click the bookmark to open it with DDEV in Gitpod. It does the same thing as the second option, but it works on non-Chrome browsers and you can use native browser keyboard shortcuts. It can be complicated to get private databases and files into Gitpod, so in addition to the launchers, the git provider example demonstrates pulling a database and files without complex setup or permissions. This was created explicitly for Gitpod integration, because in Gitpod you typically already have access to private Git repositories, which are a fine place to put a starter database and files. Although ddev-gitpod-launcher and the web extension provide the capability, you may want to integrate a Git provider\u2014or one of the other providers \u2014for each project.","title":"Gitpod"},{"location":"users/install/ddev-installation/#manual","text":"DDEV is a single executable, so installation on any OS is a matter of copying the a ddev binary for your architecture into the appropriate system path on your machine. Download and extract the latest DDEV release for your architecture. Move ddev to /usr/local/bin with mv ddev /usr/local/bin/ (may require sudo ), or another directory in your $PATH as preferred. Run ddev to test your installation. You should see DDEV\u2019s command usage output. As a one-time initialization, run mkcert -install , which may require your sudo password. If you don\u2019t have mkcert installed, download the latest release for your architecture and sudo mv <downloaded_file> /usr/local/bin/mkcert && sudo chmod +x /usr/local/bin/mkcert .","title":"Manual"},{"location":"users/install/docker-installation/","text":"Docker Installation \u00b6 You\u2019ll need a Docker provider on your system before you can install DDEV . macOS Windows Linux Gitpod macOS \u00b6 Install either Colima or Docker Desktop . Colima \u00b6 We recommend Colima , a project that bundles a container management tool called Lima with a Docker (Linux) backend. Wait ... Colima? Yes! See Why do you recommend Colima over Docker Desktop on macOS? in the FAQ . Run docker help to make sure you\u2019ve got the Docker client installed. If you get an error, install it with Homebrew by running brew install docker . Install Colima with brew install colima or one of the other installation options . Start Colima with 4 CPUs, 6GB memory, 100GB storage, and Cloudflare DNS, adjusting as needed: colima start --cpu 4 --memory 6 --disk 100 --dns=1.1.1.1 After installing DDEV , configure your system to use Mutagen\u2014essential for DDEV with Colima\u2014with ddev config global --mutagen-enabled . After the initial run above, you can use colima start or use colima start -e to edit the configuration file. Run colima status at any time to check Colima\u2019s status. When your computer restarts, you\u2019ll need to colima start again. This will eventually be automated in later versions of Colima. Colima disk allocation We recommend allocating lots of storage for Colima because there\u2019s no way to increase the size later. You can reduce usage with ddev clean , and kill off disk images with docker rm -f $(docker ps -aq) && docker rmi -f $(docker images -q) . If you have to rebuild your Colima instance, use the technique described below for migrating from Docker Desktop. Docker contexts let the Docker client point at the right Docker server Colima activates its own Docker context to prevent conflicts with Docker Desktop. If you run docker context ls , you\u2019ll see a list of available contexts where the currently-active one is indicated with a * \u2014which will be colima after you\u2019ve started it. You can change to the default (Docker Desktop) with docker context use default or change back with docker context use colima . This means you can run Docker Desktop and Colima at the same time, but be mindful of which context you\u2019re pointing at! Colima can only work in your home directory unless you do further configuration By default, Colima only mounts your home directory, so it\u2019s easiest to use it in a subdirectory there. See the ~/.colima/default/colima.yaml for more information, or notes in colima.yaml . Migrating Projects from Docker Desktop to Colima \u00b6 Move your project databases from Docker Desktop to Colima: Make sure all your projects are listed in ddev list . In Docker Desktop, ddev snapshot --all . After starting Colima, start each project and ddev snapshot restore --latest . Docker Desktop for Mac \u00b6 Docker Desktop for Mac can be installed via Homebrew ( brew install homebrew/cask/docker ) or can be downloaded from docker.com . It has long been supported by DDEV and has extensive automated testing. Windows \u00b6 If you\u2019re working inside WSL2, which we recommend, you can install Docker Engine (docker-ce) inside of it . Otherwise, you can install Docker Desktop , which works with both traditional Windows and WSL2. Docker CE Inside Windows WSL2 \u00b6 Many have moved away from using Docker Desktop in favor of the Docker-provided open-source docker-ce package inside WSL2. The instructions for DDEV Installation in WSL2 include Docker CE setup and a script that does almost all the work. Please use those. Docker Desktop for Windows \u00b6 Docker Desktop for Windows can be downloaded via Chocolatey with choco install docker-desktop or it can be downloaded from docker.com . It has extensive automated testing with DDEV, and works with DDEV both on traditional Windows and in WSL2. Full instructions for installing DDEV with Docker Desktop on WSL2 are provided in the WSL2 DDEV Installation section. Linux \u00b6 Avoid Docker Desktop for Linux The 2022 release of Docker Desktop for Linux doesn\u2019t seem stable enough for regular use, and exhibits some problems Docker Desktop has on other platforms. We recommend staying with the traditional docker-ce installation described here. Docker installation on Linux depends on what flavor you\u2019re using. It\u2019s best to use your native package repository ( apt , yum , etc.): Ubuntu CentOS Debian Fedora binaries Linux installation absolutely requires adding your Linux user to the docker group, and configuring the Docker daemon to start at boot. See Post-installation steps for Linux . Don\u2019t sudo with docker or ddev Don\u2019t use sudo with the docker command. If you find yourself needing it, you haven\u2019t finished the installation. You also shouldn\u2019t use sudo with ddev unless it\u2019s specifically for the ddev hostname command. On systems without systemd or its equivalent\u2014mostly if you\u2019re installing inside WSL2\u2014you\u2019ll need to manually start Docker with service docker start or the equivalent in your distro. You can add this to your shell profile. Gitpod \u00b6 With Gitpod you don\u2019t have to install anything at all. Docker is all set up for you. Testing and Troubleshooting Your Docker Installation \u00b6 Docker needs to be able to do a few things for DDEV to work: Mount the project code directory, typically a subdirectory of your home folder, from the host into the container. Access TCP ports on the host to serve HTTP and HTTPS. These are ports 80 and 443 by default, but they can be changed on a per-project basis. We can use a single Docker command to make sure Docker is set up to do what we want: In your project directory run the following (using Git Bash if you\u2019re on Windows!): docker run --rm -t -p 80:80 -p 443:443 -v \"//$PWD:/tmp/projdir\" busybox sh -c \"echo ---- Project Directory && ls /tmp/projdir\" The result should be a list of the files in your project directory. If you get an error or don\u2019t see the contents of your project directory, you\u2019ll need to troubleshoot further: For a \u201cport is already allocated\u201d error, see the Troubleshooting page. \u201cinvalid mount config for type \"bind\": bind mount source path does not exist: [some path]\u201d means the filesystem isn\u2019t successfully shared into the Docker container. If you\u2019re seeing \u201cThe path (...) is not shared and is not known to Docker\u201d, find File sharing in your Docker settings make sure the appropriate path or drive is included. \u201cError response from daemon: Get registry-1.docker.io/v2/\u201d may mean Docker isn\u2019t running or you don\u2019t have internet access. Try starting or restarting Docker, and confirm you have a working internet connection. If you\u2019re seeing \u201c403 authentication required\u201d trying to ddev start , run docker logout and try again. Docker authentication is not required for any normal DDEV action.","title":"Docker Installation"},{"location":"users/install/docker-installation/#docker-installation","text":"You\u2019ll need a Docker provider on your system before you can install DDEV . macOS Windows Linux Gitpod","title":"Docker Installation"},{"location":"users/install/docker-installation/#macos","text":"Install either Colima or Docker Desktop .","title":"macOS"},{"location":"users/install/docker-installation/#windows","text":"If you\u2019re working inside WSL2, which we recommend, you can install Docker Engine (docker-ce) inside of it . Otherwise, you can install Docker Desktop , which works with both traditional Windows and WSL2.","title":"Windows"},{"location":"users/install/docker-installation/#linux","text":"Avoid Docker Desktop for Linux The 2022 release of Docker Desktop for Linux doesn\u2019t seem stable enough for regular use, and exhibits some problems Docker Desktop has on other platforms. We recommend staying with the traditional docker-ce installation described here. Docker installation on Linux depends on what flavor you\u2019re using. It\u2019s best to use your native package repository ( apt , yum , etc.): Ubuntu CentOS Debian Fedora binaries Linux installation absolutely requires adding your Linux user to the docker group, and configuring the Docker daemon to start at boot. See Post-installation steps for Linux . Don\u2019t sudo with docker or ddev Don\u2019t use sudo with the docker command. If you find yourself needing it, you haven\u2019t finished the installation. You also shouldn\u2019t use sudo with ddev unless it\u2019s specifically for the ddev hostname command. On systems without systemd or its equivalent\u2014mostly if you\u2019re installing inside WSL2\u2014you\u2019ll need to manually start Docker with service docker start or the equivalent in your distro. You can add this to your shell profile.","title":"Linux"},{"location":"users/install/docker-installation/#gitpod","text":"With Gitpod you don\u2019t have to install anything at all. Docker is all set up for you.","title":"Gitpod"},{"location":"users/install/docker-installation/#testing-and-troubleshooting-your-docker-installation","text":"Docker needs to be able to do a few things for DDEV to work: Mount the project code directory, typically a subdirectory of your home folder, from the host into the container. Access TCP ports on the host to serve HTTP and HTTPS. These are ports 80 and 443 by default, but they can be changed on a per-project basis. We can use a single Docker command to make sure Docker is set up to do what we want: In your project directory run the following (using Git Bash if you\u2019re on Windows!): docker run --rm -t -p 80:80 -p 443:443 -v \"//$PWD:/tmp/projdir\" busybox sh -c \"echo ---- Project Directory && ls /tmp/projdir\" The result should be a list of the files in your project directory. If you get an error or don\u2019t see the contents of your project directory, you\u2019ll need to troubleshoot further: For a \u201cport is already allocated\u201d error, see the Troubleshooting page. \u201cinvalid mount config for type \"bind\": bind mount source path does not exist: [some path]\u201d means the filesystem isn\u2019t successfully shared into the Docker container. If you\u2019re seeing \u201cThe path (...) is not shared and is not known to Docker\u201d, find File sharing in your Docker settings make sure the appropriate path or drive is included. \u201cError response from daemon: Get registry-1.docker.io/v2/\u201d may mean Docker isn\u2019t running or you don\u2019t have internet access. Try starting or restarting Docker, and confirm you have a working internet connection. If you\u2019re seeing \u201c403 authentication required\u201d trying to ddev start , run docker logout and try again. Docker authentication is not required for any normal DDEV action.","title":"Testing and Troubleshooting Your Docker Installation"},{"location":"users/install/performance/","text":"Performance \u00b6 DDEV is continually focused on quick project startup and fast responses to its web requests. DDEV\u2019s performance is mostly an issue of how Docker runs on your workstation. On Linux, including Windows WSL2 and Gitpod, Docker is fast. Most people are happy with Linux performance and don\u2019t need to change anything. On macOS and Windows with Docker Desktop, allocated resources and mounted filesystem performance can be significant bottlenecks. Taking a bit of time to optimize your setup can yield massive performance gains. Filesystem Performance \u00b6 Mutagen can offer a big performance boost on macOS and Windows. It\u2019s fast and doesn\u2019t need any setup; you only need to enable it. Before Mutagen, Mac and Windows users configured NFS for speed improvements\u2014though it requires setup and isn\u2019t as fast. Mutagen NFS Mutagen \u00b6 If you\u2019re on macOS or Windows, you can skip everything else here and enable Mutagen: ddev config global --mutagen-enabled What Mutagen Does \u00b6 The Mutagen asynchronous caching feature is the best way to improve DDEV\u2019s web-serving performance on macOS and Windows, and we recommend it for most projects. It can be significantly faster than NFS, massively faster than plain Docker or Colima, and it makes filesystem watchers ( fsnotify / inotify ) work correctly. Mutagen decouples in-container reads and writes from reads and writes on the host machine, so each can enjoy near-native speed. A change on the host gets changed \u201cpretty soon\u201d in the container, and a change in the container gets updated \u201cpretty soon\u201d on the host; neither filesystem is stuck waiting on the other one. This \u201cpretty soon\u201d means, however, that there\u2019s a brief window where files on the host may not exactly match the files inside the container\u2014so files that manage to change in both places can lead to conflicts. Docker bind-mounts, the traditional approach to getting your code into DDEV\u2019s web container, check every file access against the file on the host. Docker\u2019s way of doing these checks macOS and Windows is not very performant, even with NFS. Linux and Linux-like systems are faster because Docker provides native file-access performance. While Mutagen works fine and has automated tests for Linux and Windows WSL2, it may not be worth enabling on those systems since it won\u2019t make the dramatic difference it does on macOS and Windows. Another major advantage of Mutagen over NFS is that it supports filesystem notifications, so file-watchers on both the host and inside the container will be notified when changes occur. This is a great advantage for many development tools, which otherwise have to poll for changes at greater expense. Instead, they can be notified via normal inotify / fsnotify techniques. Enabling and Disabling Mutagen \u00b6 Don\u2019t Install Mutagen Don\u2019t install the mutagen binary separately. If it\u2019s not available, DDEV will install and upgrade it for you. We recommend enabling Mutagen globally with ddev config global --mutagen-enabled . You can disable it again with ddev mutagen reset && ddev config global --mutagen-enabled=false . If you\u2019d rather use Mutagen on a specific project, run ddev stop , enable it with ddev config --mutagen-enabled , and ddev start again. You can\u2019t disable Mutagen on individual projects if it\u2019s enabled globally. To stop using Mutagen on a project, run ddev mutagen reset && ddev config --mutagen-enabled=false . The nfs-mount-enabled feature is automatically turned off if you\u2019re using Mutagen. Mutagen and User-Generated Uploads \u00b6 When Mutagen is enabled, DDEV attempts to exclude user-generated files in upload_dir \u2014when it exists\u2014from syncing. It does this by using a bind-mount in the generated docker-compose configuration, and excluding the directory from syncing in .ddev/mutagen/mutagen.yml . This behavior is automatic and you shouldn\u2019t have to take any action in most cases. If you have a non-standard location for user-generated files, like private/fileadmin with the deprecated typo3-secure-web approach, you should override the project defaults by setting upload_dir in .ddev/config.yaml and pointing it at the correct directory. This will allow Mutagen to sync correctly. Mutagen Integration Caveats \u00b6 If you run into an issue with Mutagen, please try to recreate and report it via a support channel ! Mutagen has generally been great for those using it, but it\u2019s good to be aware of its trade-offs: It\u2019s not the right choice for every project. Filesystem consistency has been excellent with Mutagen, but performance is its specialty. If consistency is your highest priority, then there are reasons to be cautious. Two-way sync is a very difficult computational problem, and problems may surface. Avoid file changes when DDEV is stopped. If you change files\u2014checking out a different branch, removing a file\u2014while DDEV is stopped, Mutagen has no way to know about it. When you start again, it will get the files that are stored and bring them back to the host. If you do change files while DDEV is stopped, run ddev mutagen reset before restarting the project so Mutagen only starts with awareness of the host\u2019s file contents. It modestly increases disk usage. Mutagen integration increases the size of your project code\u2019s disk usage, because the code exists both on your computer and inside a Docker volume. (As of DDEV v1.19+, this does not include your file upload directory, so normally it\u2019s not too intrusive.) Take care that you have enough overall disk space, and that on macOS you\u2019ve allocated enough file space in Docker Desktop. For projects before DDEV v1.19, if you have a large amount of data like user-generated content that doesn\u2019t need syncing (i.e. fileadmin for TYPO3 or sites/default/files for Drupal), you can exclude specific directories from getting synced and use a regular Docker mount for them instead. As of v1.19, this is handled automatically and these files are not Mutagen-synced. Beware simultaneous changes to the same file in both filesystems. As we pointed out above, any project likely to change the same file on the host and inside the container may encounter conflicts. Massive changes can cause problems. Massive file changes on the host or in the container are the most likely to introduce issues. This integration has been tested extensively with major changes introduced by ddev composer and ddev composer create , but be aware of this issue. Changing Git branches, npm install , yarn install , or a script that deletes huge sections of the synced data are related behaviors that should raise caution. Again, use ddev mutagen reset before restarting the project if you want to be sure Mutagen starts out looking at the host machine\u2019s files. Mutagen is asynchronous. A massive change in either filesystem can result in lag as all changed files are handled. You can use ddev mutagen monitor to get a better look at what\u2019s happening. You can manually trigger a sync. ddev start and ddev stop automatically force a Mutagen sync. You can cause an explicit sync with ddev mutagen sync and see syncing status with ddev mutagen status . Be mindful of in-container Composer actions. If you run Composer actions inside the container with ddev ssh , it\u2019s a good idea to run ddev mutagen sync and make sure they\u2019re synced as soon as possible. Most people won\u2019t notice the difference and Mutagen will get it synced soon enough. Perform big Git operations on the host side. Git actions that change lots of files, like switching branches, are best done on the host side and not inside the container. You may want to do an explicit ddev mutagen sync command after doing something like that to be sure all changes are picked up quickly. Share projects carefully with non-Mutagen users. If you share a project with some users that want Mutagen, perhaps on macOS, and other users that don\u2019t want or need it, perhaps on WSL2, don\u2019t check in .ddev/config.yaml \u2019s mutagen_enabled: true . Instead, either use global Mutagen configuration or add a not-checked-in, project-level .ddev/config.mutagen.yaml just to include mutagen_enabled: true in it. That way, only users with that file will have Mutagen enabled. Windows symlinks have some Mutagen restrictions . On macOS and Linux (including WSL2) the default .ddev/mutagen/mutagen.yml chooses the posix-raw type of symlink handling. (See mutagen docs ). This basically means any symlink created will try to sync, regardless of whether it\u2019s valid in the other environment. Mutagen, however, does not support posix-raw on traditional Windows, so DDEV uses the portable symlink mode. The result is that on Windows, using Mutagen, symlinks must be strictly limited to relative links that are inside the Mutagen section of the project. It\u2019s a filesystem feature. Make backups! If we\u2019ve learned anything from computer file-storage adventures, it\u2019s that backups are always a good idea! Syncing After git checkout \u00b6 In general, it\u2019s best practice on most projects to do significant Git operations on the host, but they can be disruptive to the sync. It\u2019s easy to add a Git post-checkout hook to do a ddev mutagen sync operation though. Add a .git/hooks/post-checkout file to your project and make it executable with chmod +x .git/hooks/post-checkout : #!/bin/bash ddev mutagen sync || true Syncing After yarn , npm , and pnpm Actions \u00b6 Actions by those programs can also set off massive filesystem changes. You should run ddev mutagen sync in order to get things into sync, or simply wait. Advanced Mutagen Configuration Options \u00b6 The Mutagen project provides extensive configuration options . Each DDEV project includes a .ddev/mutagen/mutagen.yml file by default, with basic defaults you can override if you remove the #ddev-generated line at the beginning of the file. If you edit the .ddev/mutagen/mutagen.yml file: Remove the #ddev-generated line Execute a ddev mutagen reset to avoid the situation where the Docker volume and Mutagen session still have files from an older configuration. The most likely thing you'll want to do is to exclude a path from mutagen syncing, which you can do in the paths: section of the ignore: stanza in the .ddev/mutagen/mutagen.yml . You can exclude a path from Mutagen syncing and bind-mount something from the host or a different volume on that path with a docker-compose.*.yaml file. So if you have a heavy project subdirectory (lots of fonts or user-generated content, for example), you could exclude that subdirectory in .ddev/mutagen/mutagen.yml and add a docker-compose.exclude.yaml . For example, if you want the stored-binaries subdirectory of the project to be available inside the container, but don\u2019t need Mutagen to be syncing it, you can use normal Docker bind-mounting for that subdirectory: Take over the .ddev/mutagen/mutagen.yml by removing the #ddev-generated line. Add /stored-binaries to the excluded paths: ignore : paths : - \"/stored-binaries\" Add a .ddev/docker-compose.bindmount.yaml : services : web : volumes : - \"./stored-binaries:/var/www/html/stored-binaries\" Troubleshooting Mutagen Sync Issues \u00b6 Please make sure that DDEV projects work without Mutagen before troubleshooting it. Run ddev config --mutagen-enabled=false && ddev restart . Rename your project\u2019s .ddev/mutagen/mutagen.yml file to .ddev/mutagen/mutagen.yml.bak and run ddev restart . This ensures you\u2019ll have a fresh version in case the file has been changed and #ddev-generated removed. export DDEV_DEBUG=true will provide more information about what\u2019s going on with Mutagen. As of DDEV v1.21.2, DDEV\u2019s Mutagen daemon keeps its data in a DDEV-only MUTAGEN_DATA_DIRECTORY , ~/.ddev_mutagen_data_directory . DDEV\u2019s private Mutagen binary is installed in ~/.ddev/bin/mutagen . You can use all the features of Mutagen with export MUTAGEN_DATA_DIRECTORY=~/.ddev_mutagen_data_directory and running the Mutagen binary in ~/.ddev/bin/mutagen , for example:and ~/.ddev/bin/mutagen daemon stop . export DDEV_DEBUG = true export MUTAGEN_DATA_DIRECTORY = ~/.ddev_mutagen_data_directory export PATH = ~/.ddev/bin: $PATH mutagen sync list -l mutagen sync monitor You can run the diagnose_mutagen.sh script to gather information about Mutagen\u2019s setup. Please share output from it when creating an issue or seeking support. Try ddev poweroff or ~/.ddev/bin/mutagen daemon stop && ~/.ddev/bin/mutagen daemon start to restart the Mutagen daemon if you suspect it\u2019s hanging. Use ddev mutagen reset if you suspect trouble, and always after changing .ddev/mutagen/mutagen.yml . This restarts the project\u2019s Mutagen data (Docker volume + Mutagen session) from scratch. ddev mutagen monitor can help watch Mutagen behavior. It\u2019s the same as ~/.ddev/bin/mutagen sync monitor <syncname> . ddev debug mutagen will let you run any Mutagen command using the binary in ~/.ddev/bin/mutagen . If you\u2019re working on the host and expecting things to show up immediately inside the container, you can learn a lot by running ddev mutagen monitor in a separate window as you work. You\u2019ll see when Mutagen responds to your changes and get an idea about how much delay there is. Consider ddev stop before massive file change operations, like moving a directory. If you get in real trouble, run ddev stop , reset your files with Git, and run ddev mutagen reset to throw away the Docker volume which may already have incorrect files on it. Advanced Mutagen Troubleshooting \u00b6 Most people get all the information they need about mutagen by running ddev mutagen monitor to see the results. However, Mutagen has full logging. You can run it with ddev mutagen logs . Mutagen Strategies and Design Considerations \u00b6 Mutagen provides enormous speed boosts in everyday usage, but it\u2019s trying desperately under the hood to keep container changes reflected on the host and vice versa. DDEV mounts a fast Docker volume onto /var/www/html inside the web container, then delegates to the Mutagen daemon (on the host). That daemon has the job of keeping all host project contents in sync with the contents of the Docker volume. Consistency is a high priority for DDEV\u2019s integration, which tries at key points to make sure everything is completely consistent and in sync. The Mutagen daemon\u2019s life cycle and sync sessions are something like this: On ddev start , the Mutagen agent will be started if it\u2019s not already running. If there\u2019s already a sync session for the project, it\u2019s resumed. On ddev stop and ddev pause , the sync session is flushed to ensure consistency, then paused. A synchronous flush happens after any ddev composer command, since Composer may cause massive changes to the filesystem inside the container that need to be synced before operation continues. If you need to reset everything for a project, you can do it with ddev mutagen reset , which starts the Mutagen session from scratch and removes the Docker volume so it can be recreated from scratch. Safe to Use with Other Mutagen Installations \u00b6 DDEV requires and provides a specific version of Mutagen, which you can see running ddev version . If another mutagen instance or daemon is installed on your workstation it doesn't matter, because DDEV's version runs separately and uses a different data directory. NFS \u00b6 macOS Ventura may not work with NFS A bug in macOS Ventura means that NFS mounting doesn't work for many projects, so Mutagen is recommended instead. Follow issue for details. Using NFS to Mount the Project into the Web Container \u00b6 NFS (Network File System) is a classic, mature Unix technique to mount a filesystem from one device to another. It provides significantly improved web server performance on macOS and Windows. It doesn\u2019t really impact performance on Linux, so we don\u2019t recommend it there. DDEV supports this technique and requires pre-configuration on your host computer, facilitated by a setup script that asks for your sudo password when it\u2019s necessary: Make sure DDEV is already working and you can use it. Use the script below for your OS to configure the NFS server and exports files. Test that NFS is working correctly by using ddev debug nfsmount in a project directory. The first line should report something like \u201cSuccessfully accessed NFS mount of /path/to/project\u201d. Enable NFS mounting globally with ddev config global --nfs-mount-enabled . You can also configure NFS mounting on a per-project basis with ddev config --nfs-mount-enabled in the project directory, but this is unusual. If NFS mounting is turned on globally, it overrides any local project settings for NFS. ddev start your project and make sure it works normally. Use ddev describe to verify that NFS mounting is being used. The NFS status is near the top of the output of ddev describe . Skip step 2 if you\u2019re already using NFS! If you\u2019re already using NFS with Vagrant on macOS, for example, and you already have a number of exports, the default home directory export here won\u2019t work\u2014you\u2019ll have overlaps in your /etc/exports . Or on Windows, you may want to use an NFS server other than Winnfsd like the Allegro NFS Server . The recommendations and scripts below are for getting started if, like most people, you don\u2019t already use NFS. macOS NFS Setup Windows NFS Setup Download, inspect, make executable, and run macos_ddev_nfs_setup.sh : curl -O https://raw.githubusercontent.com/drud/ddev/master/scripts/macos_ddev_nfs_setup.sh && chmod +x macos_ddev_nfs_setup.sh && ./macos_ddev_nfs_setup.sh This one-time setup stops running DDEV projects, adds your home directory to the /etc/exports config file that nfsd uses, and enables nfsd to run on your computer. This shares your home directory via NFS to any NFS client on your computer, so it\u2019s critical to consider security issues. You can make the shares in /etc/exports more limited, as long as they don\u2019t overlap. NFS doesn\u2019t allow overlapping exports. If your DDEV projects are set up outside your home directory, you\u2019ll need to add a line to /etc/exports for that share as well: Run sudo vi /etc/exports . Copy the line the script just created ( /System/Volumes/Data/Users/username -alldirs -mapall=<your_user_id>:20 localhost ). Edit to add the additional path, e.g: /Volumes/SomeExternalDrive -alldirs -mapall=<your_uid>:20 localhost . macOS Full Disk Access for Special Directories \u00b6 If your projects are in a subdirectory of the ~/Documents or ~/Desktop directories, or on an external drive, you must grant \u201cFull Disk Access\u201d privilege to /sbin/nfsd in System Preferences \u2192 Security & Privacy \u2192 Privacy . In the Full Disk Access section, click the \u201c+\u201d and add /sbin/nfsd : You should then see nfsd in the list: Run sudo nfsd restart . From a project directory, run ddev debug nfsmount to confirm successful output. macOS NFS Debugging \u00b6 Temporarily disable any firewall or VPN. Use showmount -e to find out what\u2019s exported via NFS. If you don\u2019t see a parent of your project directory, NFS can\u2019t work. If nothing is showing, use nfsd checkexports and look carefully for errors. Use ps -ef | grep nfsd to make sure nfsd is running. Restart nfsd with sudo nfsd restart . Add the following to your /etc/nfs.conf : nfs.server.mount.require_resv_port = 0 nfs.server.verbose = 3 Run Console.app and search for \u201cnfsd\u201d at the top. Run sudo nfsd restart and read the messages carefully. Try running ddev debug nfsmount in the problematic project directory: $ ddev debug nfsmount Successfully accessed NFS mount of /Users/rfay/workspace/d8composer TARGET SOURCE FSTYPE OPTIONS /nfsmount :/System/Volumes/Data/Users/rfay/workspace/d8composer nfs rw,relatime,vers = 3 ,rsize = 65536 ,wsize = 65536 ,namlen = 255 ,hard, nolock,proto = tcp,timeo = 600 ,retrans = 2 ,sec = sys,mountaddr = 192 .168.65.2,mountvers = 3 ,mountproto = tcp,local_lock = all,addr = 192 .168.65.2 /nfsmount/.ddev The executable components required for Windows NFS, winnfsd and nssm , are packaged with the DDEV Windows Installer in each release. If you\u2019ve used the Windows installer, they\u2019re ready to go. To enable winnfsd as a service, please download, inspect and run windows_ddev_nfs_setup.sh created by the installer at C:\\Program Files\\ddev\\windows_ddev_nfs_setup.sh . You can also download this directly from the GitHub repository ) in a Git Bash session on Windows. If your DDEV projects are set up outside your home directory, you\u2019ll need to edit ~/.ddev/nfs_exports.txt (created by the script) and restart the service with sudo nssm restart nfsd . Firewall Issues On Windows 10/11 you\u2019ll likely have to allow winnfsd to bypass the Windows Defender Firewall. If you\u2019re getting a timeout with no information after ddev start , try going to Windows Defender Firewall \u2192 Allow an app or feature through Windows Defender Firewall , Change Settings , Allow another app . Then choose C:\\Program Files\\ddev\\winnfsd.exe , assuming that\u2019s where winnfsd is installed. Debugging ddev start Failures with NFS Mount Enabled \u00b6 There are a number of reasons the NFS mount can fail on ddev start : Firewall issues. NFS Server not running. Trying to start more than one NFS server. Overlapping NFS exports, typically an issue if you\u2019ve established another NFS client like Vagrant. You\u2019ll need to reconfigure your exports paths so they don\u2019t overlap. Path of project not shared in ~/.ddev/nfs_exports.txt . To debug and solve permission problems: Try ddev debug nfsmount in a project directory to see if basic NFS mounting is working. If that works, everything else probably will too. When debugging, run ddev restart in between each change. Otherwise, you can have stale mounts inside the container and you\u2019ll miss any benefit you may find in the debugging process. Inspect ~/.ddev/nfs_exports.txt . Restart the server with sudo nssm restart nfsd . Windows-specific NFS debugging \u00b6 Temporarily disable any firewall, VPN, or virus checker. You can only have one NFS daemon running, so if another application has installed one, you\u2019ll want to use that NFS daemon and reconfigure it to allow NFS mounts of your projects. Stop the running winnfsd service with sudo nssm stop nfsd . Run winnfsd manually in the foreground with winnfsd \"C:\\\\\" . If it immediately returns to the shell prompt, there\u2019s likely another nfsd service running. In another window, in a DDEV project directory, run ddev debug nfsmount to see if it can mount successfully. (The project doesn\u2019t need to be started.) If ddev debug nfsmount is successful, then everything is probably going to work. Confirm ~/.ddev/nfs_exports.txt has a line that includes your project directories, then run sudo nssm start nfsd and nssm status nfsd . The status command should show SERVICE_RUNNING . These nssm commands may be useful: nssm help , sudo nssm start nfsd , sudo nssm stop nfsd , nssm status nfsd , sudo nssm edit nfsd (pops up a window that may be hidden), and sudo nssm remove nfsd (also pops up a window, doesn\u2019t work predictably if you haven\u2019t already stopped the service). nssm logs failures and what it\u2019s doing to the system event log. Run Event Viewer and filter events: Please make sure you\u2019ve excluded winnfsd from the Windows Defender Firewall per the installation instructions above. On Windows 10/11 Pro you can visit Turn Windows features on or off and enable Services for NFS \u2192 Client for NFS . The showmount -e command will then show available exports on the current machine. This can help find out if a conflicting server is running or identifying a problem with exports. Freeing Up System Resources \u00b6 Every project you run uses system resources, and may compete for those resources. A reasonable practice is to individually stop projects you\u2019re not using. You could also stop all projects with ddev poweroff and only start the one you\u2019re working on. ddev list will display all your projects along with each one\u2019s status. Docker Desktop for Mac Settings \u00b6 Open Docker Desktop\u2019s Preferences , and visit Resources \u2192 Advanced . Here you can adjust the CPUs, memory, and disk allocated to Docker. The defaults work well for a small project or two, but you may want to adjust these upward based on your experience. Most people raise the memory allocation to 6GB or higher. The disk allocation almost always needs to be raised to accommodate increased downloaded images. Your experience will determine what to do with CPUs.","title":"Performance"},{"location":"users/install/performance/#performance","text":"DDEV is continually focused on quick project startup and fast responses to its web requests. DDEV\u2019s performance is mostly an issue of how Docker runs on your workstation. On Linux, including Windows WSL2 and Gitpod, Docker is fast. Most people are happy with Linux performance and don\u2019t need to change anything. On macOS and Windows with Docker Desktop, allocated resources and mounted filesystem performance can be significant bottlenecks. Taking a bit of time to optimize your setup can yield massive performance gains.","title":"Performance"},{"location":"users/install/performance/#filesystem-performance","text":"Mutagen can offer a big performance boost on macOS and Windows. It\u2019s fast and doesn\u2019t need any setup; you only need to enable it. Before Mutagen, Mac and Windows users configured NFS for speed improvements\u2014though it requires setup and isn\u2019t as fast. Mutagen NFS","title":"Filesystem Performance"},{"location":"users/install/performance/#mutagen","text":"If you\u2019re on macOS or Windows, you can skip everything else here and enable Mutagen: ddev config global --mutagen-enabled","title":"Mutagen"},{"location":"users/install/performance/#nfs","text":"macOS Ventura may not work with NFS A bug in macOS Ventura means that NFS mounting doesn't work for many projects, so Mutagen is recommended instead. Follow issue for details.","title":"NFS"},{"location":"users/install/performance/#freeing-up-system-resources","text":"Every project you run uses system resources, and may compete for those resources. A reasonable practice is to individually stop projects you\u2019re not using. You could also stop all projects with ddev poweroff and only start the one you\u2019re working on. ddev list will display all your projects along with each one\u2019s status.","title":"Freeing Up System Resources"},{"location":"users/install/performance/#docker-desktop-for-mac-settings","text":"Open Docker Desktop\u2019s Preferences , and visit Resources \u2192 Advanced . Here you can adjust the CPUs, memory, and disk allocated to Docker. The defaults work well for a small project or two, but you may want to adjust these upward based on your experience. Most people raise the memory allocation to 6GB or higher. The disk allocation almost always needs to be raised to accommodate increased downloaded images. Your experience will determine what to do with CPUs.","title":"Docker Desktop for Mac Settings"},{"location":"users/install/shell-completion/","text":"Shell Completion & Autocomplete \u00b6 Most people like to have shell completion on the command line. In other words, when you're typing a command, you can hit <TAB> and the shell will show you what the options are. For example, if you type ddev <TAB> , you'll see all the possible commands. ddev debug <TAB> will show you the options for the command. And ddev list -<TAB> will show you all the flags available for ddev list . Shells like bash and zsh need help to do this though, they have to know what the options are. DDEV provides the necessary hint scripts, and if you use Homebrew, they get installed automatically. But if you use oh-my-zsh, for example, you may have to manually install the hint script. macOS Bash + Homebrew Bash/Zsh/Fish on Linux Oh-My-Zsh Fish Git Bash PowerShell macOS Bash + Homebrew \u00b6 The easiest way to use bash completion on macOS is install it with Homebrew. brew install bash-completion . When you install it though, it will warn you with something like this, which may vary on your system. Add the following line to your ~/.bash_profile : [[ -r \"/usr/local/etc/profile.d/bash_completion.sh\" ]] && . \"/usr/local/etc/profile.d/bash_completion.sh\" Bash profile You do have to add the include to your .bash_profile or .profile or nothing will work. Use source ~/.bash_profile or source ~/.profile to make it take effect immediately. Link completions with brew completions link . When you install DDEV via Homebrew, each new release will automatically get a refreshed completions script. Bash/Zsh/Fish on Linux \u00b6 On Debian and Yum based systems, using apt install ddev you should find that bash , zsh , and fish completions are automatically installed. Manual installation is easy though, the completion script is exactly the same, it\u2019s just that you have to download and install it yourself. Each system may have a slightly different technique, and you\u2019ll need to figure it out. On Debian/Ubuntu, manually install like this: Download the completion files and extract them with VERSION = v1.21.1 curl -sSLf https://github.com/drud/ddev/releases/download/ ${ VERSION } /ddev_shell_completion_scripts. ${ VERSION } .tar.gz tar -zxf ddev_shell_completion_scripts. ${ VERSION } .tar.gz Then sudo mkdir -p /usr/share/bash-completion/completions && sudo cp ddev_bash_completion.sh /usr/share/bash-completion/completions/ddev . This deploys the ddev_bash_completion.sh script where it needs to be. Again, every Linux distro has a different technique, and you may have to figure yours out. If you installed DDEV using apt install then the ddev_bash_completion.sh file is already available in /usr/bin/ddev_bash_completion.sh . Starting with DDEV v1.21.2 this will be automatically installed into /usr/share/bash-completion/completions . Oh-My-Zsh \u00b6 If you installed zsh with Homebrew, DDEV\u2019s completions will be automatically installed when you brew install drud/ddev/ddev . Otherwise, Oh-My-Zsh may be set up very differently in different places, so as a power zsh user you\u2019ll need to put ddev_bash_completion.sh (see tar archive download above) where it belongs. echo $fpath will show you the places that it\u2019s most likely to belong. An obvious choice is ~/.oh-my-zsh/completions ; if that exists, so you can run mkdir -p ~/.oh-my-zsh/completions && cp ddev_zsh_completion.sh ~/.oh-my-zsh/completions/_ddev , then autoload -Uz compinit && compinit . Fish \u00b6 The fish shell\u2019s completions are also supported and are automatically installed into /usr/local/share/fish/vendor_completions.d/ when you install ddev via Homebrew. If you have installed fish without Homebrew, you can extract the fish completions from the ddev_shell_completion_scripts tarball that is included with each release. Git Bash \u00b6 Completions in Git Bash are sourced from at least ~/bash_completion.d so you can use mkdir -p ~/bash_completion.d && tar -C ~/.bash_completion.d -zxf /z/Downloads/ddev_shell_completion_scripts.v1.15.0-rc3.tar.gz ddev_bash_completion.sh && mv ~/bash_completion.d/ddev_bash_completion.sh ~/bash_completion.d/ddev.bash to extract the Bash completions and put them where they belong. PowerShell \u00b6 PowerShell completions are also provided in the ddev_shell_completions tarball included with each release. You can run the ddev_powershell_completion.ps1 script manually or install it so it will be run whenever PS is opened using the technique at Run PowerShell Script When You Open PowerShell . tar Archive of Completion Scripts for Manual Deployment \u00b6 Although most people will use techniques like Homebrew for installation, a tar archive of the shell completion scripts is available in each release, called ddev_shell_completion_scripts.<version>.tar.gz . If you need to manually install, you can download and untar the scripts, then copy them as needed to where they have to go. For example, sudo cp ddev_bash_completion.sh /etc/bash_completion.d/ddev . Note that scripts for the fish shell and Windows PowerShell are also provided, but no instructions are given here for deploying them.","title":"Shell Completion & Autocomplete"},{"location":"users/install/shell-completion/#shell-completion-autocomplete","text":"Most people like to have shell completion on the command line. In other words, when you're typing a command, you can hit <TAB> and the shell will show you what the options are. For example, if you type ddev <TAB> , you'll see all the possible commands. ddev debug <TAB> will show you the options for the command. And ddev list -<TAB> will show you all the flags available for ddev list . Shells like bash and zsh need help to do this though, they have to know what the options are. DDEV provides the necessary hint scripts, and if you use Homebrew, they get installed automatically. But if you use oh-my-zsh, for example, you may have to manually install the hint script. macOS Bash + Homebrew Bash/Zsh/Fish on Linux Oh-My-Zsh Fish Git Bash PowerShell","title":"Shell Completion &amp; Autocomplete"},{"location":"users/install/shell-completion/#macos-bash-homebrew","text":"The easiest way to use bash completion on macOS is install it with Homebrew. brew install bash-completion . When you install it though, it will warn you with something like this, which may vary on your system. Add the following line to your ~/.bash_profile : [[ -r \"/usr/local/etc/profile.d/bash_completion.sh\" ]] && . \"/usr/local/etc/profile.d/bash_completion.sh\" Bash profile You do have to add the include to your .bash_profile or .profile or nothing will work. Use source ~/.bash_profile or source ~/.profile to make it take effect immediately. Link completions with brew completions link . When you install DDEV via Homebrew, each new release will automatically get a refreshed completions script.","title":"macOS Bash + Homebrew"},{"location":"users/install/shell-completion/#bashzshfish-on-linux","text":"On Debian and Yum based systems, using apt install ddev you should find that bash , zsh , and fish completions are automatically installed. Manual installation is easy though, the completion script is exactly the same, it\u2019s just that you have to download and install it yourself. Each system may have a slightly different technique, and you\u2019ll need to figure it out. On Debian/Ubuntu, manually install like this: Download the completion files and extract them with VERSION = v1.21.1 curl -sSLf https://github.com/drud/ddev/releases/download/ ${ VERSION } /ddev_shell_completion_scripts. ${ VERSION } .tar.gz tar -zxf ddev_shell_completion_scripts. ${ VERSION } .tar.gz Then sudo mkdir -p /usr/share/bash-completion/completions && sudo cp ddev_bash_completion.sh /usr/share/bash-completion/completions/ddev . This deploys the ddev_bash_completion.sh script where it needs to be. Again, every Linux distro has a different technique, and you may have to figure yours out. If you installed DDEV using apt install then the ddev_bash_completion.sh file is already available in /usr/bin/ddev_bash_completion.sh . Starting with DDEV v1.21.2 this will be automatically installed into /usr/share/bash-completion/completions .","title":"Bash/Zsh/Fish on Linux"},{"location":"users/install/shell-completion/#oh-my-zsh","text":"If you installed zsh with Homebrew, DDEV\u2019s completions will be automatically installed when you brew install drud/ddev/ddev . Otherwise, Oh-My-Zsh may be set up very differently in different places, so as a power zsh user you\u2019ll need to put ddev_bash_completion.sh (see tar archive download above) where it belongs. echo $fpath will show you the places that it\u2019s most likely to belong. An obvious choice is ~/.oh-my-zsh/completions ; if that exists, so you can run mkdir -p ~/.oh-my-zsh/completions && cp ddev_zsh_completion.sh ~/.oh-my-zsh/completions/_ddev , then autoload -Uz compinit && compinit .","title":"Oh-My-Zsh"},{"location":"users/install/shell-completion/#fish","text":"The fish shell\u2019s completions are also supported and are automatically installed into /usr/local/share/fish/vendor_completions.d/ when you install ddev via Homebrew. If you have installed fish without Homebrew, you can extract the fish completions from the ddev_shell_completion_scripts tarball that is included with each release.","title":"Fish"},{"location":"users/install/shell-completion/#git-bash","text":"Completions in Git Bash are sourced from at least ~/bash_completion.d so you can use mkdir -p ~/bash_completion.d && tar -C ~/.bash_completion.d -zxf /z/Downloads/ddev_shell_completion_scripts.v1.15.0-rc3.tar.gz ddev_bash_completion.sh && mv ~/bash_completion.d/ddev_bash_completion.sh ~/bash_completion.d/ddev.bash to extract the Bash completions and put them where they belong.","title":"Git Bash"},{"location":"users/install/shell-completion/#powershell","text":"PowerShell completions are also provided in the ddev_shell_completions tarball included with each release. You can run the ddev_powershell_completion.ps1 script manually or install it so it will be run whenever PS is opened using the technique at Run PowerShell Script When You Open PowerShell .","title":"PowerShell"},{"location":"users/install/shell-completion/#tar-archive-of-completion-scripts-for-manual-deployment","text":"Although most people will use techniques like Homebrew for installation, a tar archive of the shell completion scripts is available in each release, called ddev_shell_completion_scripts.<version>.tar.gz . If you need to manually install, you can download and untar the scripts, then copy them as needed to where they have to go. For example, sudo cp ddev_bash_completion.sh /etc/bash_completion.d/ddev . Note that scripts for the fish shell and Windows PowerShell are also provided, but no instructions are given here for deploying them.","title":"tar Archive of Completion Scripts for Manual Deployment"},{"location":"users/providers/","text":"Hosting Provider Integration \u00b6 DDEV offers hosting provider integration and sample integrations for Pantheon , Platform.sh and Acquia hosting, along with other examples. Each DDEV project includes example recipes in its .ddev/providers directory, which you can use and adapt however you\u2019d like. DDEV provides the pull command with whatever recipes you have configured. For example, ddev pull acquia if you have created .ddev/providers/acquia.yaml . DDEV also provides the push command to push database and files to upstream. This is very dangerous to your upstream site and should only be used when appropriate. We don\u2019t even recommended implementing the push stanzas in your YAML file, but it\u2019s there if it suits your workflow. Each provider recipe is a YAML file that can have whatever name you want. The examples are mostly named after the hosting providers, but they could be named upstream.yaml or live.yaml , so you could ddev pull upstream or ddev pull live . If you wanted different upstream environments to pull from, you could name one \u201cprod\u201d and one \u201cdev\u201d and ddev pull prod and ddev pull dev . Example recipes are provided for Acquia , Local files (like Dropbox, for example), Pantheon , Platform.sh , and rsync . We know you\u2019ll find improvements to these examples and will have lots to contribute for other hosting providers, and we look forward to your contributions as pull requests here or in ddev-contrib . Each provider recipe is a file named <provider>.yaml and consists of several mostly-optional stanzas: environment_variables : Environment variables will be created in the web container for each of these during pull or push operations. They\u2019re used to provide context (project ID, environment name, etc.) for each of the other stanzas. db_pull_command : A script that determines how DDEV should obtain a database. Its job is to create a gzipped database dump in /var/www/html/.ddev/.downloads/db.sql.gz . This is optional; if nothing has to be done to obtain the database dump, this step can be omitted. db_import_command : (optional) A script that imports the downloaded database. This is for advanced usages like multiple databases. The default behavior only imports a single database into the db database. The localfile example uses this technique. files_pull_command : A script that determines how DDEV can get user-generated files from upstream. Its job is to copy the files from upstream to /var/www/html/.ddev/.downloads/files . If nothing has to be done to obtain the files, this step can simply run true . files_import_command : (optional) A script that imports the downloaded files. There are a number of situations where it\u2019s messy to push a directory of files around, and one can just put it directly where it\u2019s needed. The localfile example uses this technique. db_push_command : A script that determines how DDEV should push a database. Its job is to take a gzipped database dump from /var/www/html/.ddev/.downloads/db.sql.gz and load it on the hosting provider. files_push_command : A script that determines how DDEV push user-generated files to upstream. Its job is to copy the files from the project\u2019s user-files directory ( $DDEV_FILES_DIR ) to the correct place on the upstream provider. The environment variables provided to custom commands are also available for use in these recipes. There are hooks available to execute commands before and after each pull or push: pre-pull , post-pull , pre-push , post-push . These could be for example a ddev snapshot to backup the database before a pull or a specific task to clear/warm-up caches of your application. Example Integrations and Hints \u00b6 All of the supplied integrations are just examples of what you can do. You can name a provider anything you want. For example, an Acquia integration doesn\u2019t have to be named \u201cacquia\u201d, it can be named \u201cupstream\u201d. This is a great technique for downloading a particular multisite . Provider Debugging \u00b6 You can uncomment the set -x in each stanza to see more of what\u2019s going on. It really helps. Watch it as you do a ddev pull <whatever> . Although the various commands could be executed on the host or in other containers if configured that way, most commands are executed in the web container. So the best thing to do is to ddev ssh and manually execute each command you want to use. When you have it right, use it in the YAML file.","title":"Hosting Provider Integration"},{"location":"users/providers/#hosting-provider-integration","text":"DDEV offers hosting provider integration and sample integrations for Pantheon , Platform.sh and Acquia hosting, along with other examples. Each DDEV project includes example recipes in its .ddev/providers directory, which you can use and adapt however you\u2019d like. DDEV provides the pull command with whatever recipes you have configured. For example, ddev pull acquia if you have created .ddev/providers/acquia.yaml . DDEV also provides the push command to push database and files to upstream. This is very dangerous to your upstream site and should only be used when appropriate. We don\u2019t even recommended implementing the push stanzas in your YAML file, but it\u2019s there if it suits your workflow. Each provider recipe is a YAML file that can have whatever name you want. The examples are mostly named after the hosting providers, but they could be named upstream.yaml or live.yaml , so you could ddev pull upstream or ddev pull live . If you wanted different upstream environments to pull from, you could name one \u201cprod\u201d and one \u201cdev\u201d and ddev pull prod and ddev pull dev . Example recipes are provided for Acquia , Local files (like Dropbox, for example), Pantheon , Platform.sh , and rsync . We know you\u2019ll find improvements to these examples and will have lots to contribute for other hosting providers, and we look forward to your contributions as pull requests here or in ddev-contrib . Each provider recipe is a file named <provider>.yaml and consists of several mostly-optional stanzas: environment_variables : Environment variables will be created in the web container for each of these during pull or push operations. They\u2019re used to provide context (project ID, environment name, etc.) for each of the other stanzas. db_pull_command : A script that determines how DDEV should obtain a database. Its job is to create a gzipped database dump in /var/www/html/.ddev/.downloads/db.sql.gz . This is optional; if nothing has to be done to obtain the database dump, this step can be omitted. db_import_command : (optional) A script that imports the downloaded database. This is for advanced usages like multiple databases. The default behavior only imports a single database into the db database. The localfile example uses this technique. files_pull_command : A script that determines how DDEV can get user-generated files from upstream. Its job is to copy the files from upstream to /var/www/html/.ddev/.downloads/files . If nothing has to be done to obtain the files, this step can simply run true . files_import_command : (optional) A script that imports the downloaded files. There are a number of situations where it\u2019s messy to push a directory of files around, and one can just put it directly where it\u2019s needed. The localfile example uses this technique. db_push_command : A script that determines how DDEV should push a database. Its job is to take a gzipped database dump from /var/www/html/.ddev/.downloads/db.sql.gz and load it on the hosting provider. files_push_command : A script that determines how DDEV push user-generated files to upstream. Its job is to copy the files from the project\u2019s user-files directory ( $DDEV_FILES_DIR ) to the correct place on the upstream provider. The environment variables provided to custom commands are also available for use in these recipes. There are hooks available to execute commands before and after each pull or push: pre-pull , post-pull , pre-push , post-push . These could be for example a ddev snapshot to backup the database before a pull or a specific task to clear/warm-up caches of your application.","title":"Hosting Provider Integration"},{"location":"users/providers/#example-integrations-and-hints","text":"All of the supplied integrations are just examples of what you can do. You can name a provider anything you want. For example, an Acquia integration doesn\u2019t have to be named \u201cacquia\u201d, it can be named \u201cupstream\u201d. This is a great technique for downloading a particular multisite .","title":"Example Integrations and Hints"},{"location":"users/providers/#provider-debugging","text":"You can uncomment the set -x in each stanza to see more of what\u2019s going on. It really helps. Watch it as you do a ddev pull <whatever> . Although the various commands could be executed on the host or in other containers if configured that way, most commands are executed in the web container. So the best thing to do is to ddev ssh and manually execute each command you want to use. When you have it right, use it in the YAML file.","title":"Provider Debugging"},{"location":"users/providers/acquia/","text":"Acquia Integration \u00b6 DDEV provides integration with the Acquia Cloud Platform , which allows Acquia users to quickly download and provision a project from Acquia in a local DDEV-managed environment. DDEV\u2019s Acquia integration pulls database and files from an existing project into your local system so you can develop locally. Acquia Quickstart \u00b6 Get your Acquia API token from Account Settings \u2192 API Tokens . Make sure you\u2019ve added your SSH key to your Acquia account in Account Settings \u2192 SSH Keys . Run ddev auth ssh . (Typically once per DDEV session, not every pull.) In ~/.ddev/global_config.yaml , add or update the web_environment section with the API keys: web_environment : - ACQUIA_API_KEY=xxxxxxxx - ACQUIA_API_SECRET=xxxxx Copy .ddev/providers/acquia.yaml.example to .ddev/providers/acquia.yaml . Update the project_id and database corresponding to the environment you want to work with. If you have acli installed, you can run: acli remote:aliases:list . Or, on the Acquia Cloud Platform navigate to the Environments page, click on the header, and look for the SSH URL line. For example, project1.dev@cool-projects.acquia-sites.com uses project ID project1.dev . Your project must include Drush. Run ddev composer require drush/drush if it isn\u2019t there already. Run ddev restart . Use ddev pull acquia to pull the project database and files. Optionally use ddev push acquia to push local files and database to Acquia. Be aware that ddev push is a command that can potentially damage your production site, so we don\u2019t recommend using it. Usage \u00b6 ddev pull acquia will connect to the Acquia Cloud Platform to download database and files. To skip downloading and importing either file or database assets, use the --skip-files and --skip-db flags.","title":"Acquia Integration"},{"location":"users/providers/acquia/#acquia-integration","text":"DDEV provides integration with the Acquia Cloud Platform , which allows Acquia users to quickly download and provision a project from Acquia in a local DDEV-managed environment. DDEV\u2019s Acquia integration pulls database and files from an existing project into your local system so you can develop locally.","title":"Acquia Integration"},{"location":"users/providers/acquia/#acquia-quickstart","text":"Get your Acquia API token from Account Settings \u2192 API Tokens . Make sure you\u2019ve added your SSH key to your Acquia account in Account Settings \u2192 SSH Keys . Run ddev auth ssh . (Typically once per DDEV session, not every pull.) In ~/.ddev/global_config.yaml , add or update the web_environment section with the API keys: web_environment : - ACQUIA_API_KEY=xxxxxxxx - ACQUIA_API_SECRET=xxxxx Copy .ddev/providers/acquia.yaml.example to .ddev/providers/acquia.yaml . Update the project_id and database corresponding to the environment you want to work with. If you have acli installed, you can run: acli remote:aliases:list . Or, on the Acquia Cloud Platform navigate to the Environments page, click on the header, and look for the SSH URL line. For example, project1.dev@cool-projects.acquia-sites.com uses project ID project1.dev . Your project must include Drush. Run ddev composer require drush/drush if it isn\u2019t there already. Run ddev restart . Use ddev pull acquia to pull the project database and files. Optionally use ddev push acquia to push local files and database to Acquia. Be aware that ddev push is a command that can potentially damage your production site, so we don\u2019t recommend using it.","title":"Acquia Quickstart"},{"location":"users/providers/acquia/#usage","text":"ddev pull acquia will connect to the Acquia Cloud Platform to download database and files. To skip downloading and importing either file or database assets, use the --skip-files and --skip-db flags.","title":"Usage"},{"location":"users/providers/pantheon/","text":"Pantheon Integration \u00b6 DDEV provides configurable integration with the Pantheon Website Management Platform , which allows Pantheon users to quickly download and provision a project from Pantheon in a local DDEV-managed environment. DDEV\u2019s Pantheon integration pulls an existing backup from an existing Pantheon site/environment into your local system. That means you must already have a Pantheon site with a backup in order to use it. Pantheon Quickstart \u00b6 If you have DDEV installed, and have an active Pantheon account with an active site, you can follow this guide to spin up a Pantheon project locally. Get your Pantheon machine token: a. Log in to your Pantheon Dashboard and Generate a Machine Token for DDEV to use. b. Add the API token to the web_environment section in your global DDEV configuration at ~/.ddev/global_config.yaml . web_environment: - TERMINUS_MACHINE_TOKEN=abcdeyourtoken Choose a Pantheon site and environment you want to use with DDEV. You can usually use the site name, but in some environments you may need the site ID, which is the long third component of your site dashboard URL. So if the site dashboard is at https://dashboard.pantheon.io/sites/009a2cda-2c22-4eee-8f9d-96f017321555#dev/ , the site ID is 009a2cda-2c22-4eee-8f9d-96f017321555 . On the Pantheon dashboard for the site, make sure that at least one backup has been created. (When you need to refresh what you pull, create a new backup.) Make sure your public SSH key is configured in Pantheon under Account \u2192 SSH Keys . Check out the project codebase from Pantheon. Enable the \u201cGit Connection Mode\u201d and use git clone to check out the code locally. Configure the local checkout for DDEV using ddev config . If using Drupal 8+, verify that Drush is installed in your project with ddev composer require drush/drush . If using Drupal 6 or 7, Drush 8 is already provided in the web container\u2019s /usr/local/bin/drush , so you can skip this step. In your project\u2019s .ddev/providers directory, copy pantheon.yaml.example to pantheon.yaml ( This refers to your project .ddev folder and not the global .ddev folder ). Edit the project environment variable under environment_variables . It will be in the format <projectname>.<environment> , for example yourprojectname.dev or (in cases of ambiguity) <project_uuid>.<environment> , for example 009a2cda-2c22-4eee-8f9d-96f017321555.dev . If using Colima, may need to set an explicit nameserver in ~/.colima/default/colima.yaml like 1.1.1.1 . If this configuration is changed, may also need to restart Colima. Run ddev restart . Run ddev pull pantheon . DDEV will download the Pantheon database and files and bring them into the local DDEV environment. You should now be able to access the project locally. Optionally use ddev push pantheon to push local files and database to Pantheon. The ddev push command can potentially damage your production site, so we don\u2019t recommend using it.","title":"Pantheon Integration"},{"location":"users/providers/pantheon/#pantheon-integration","text":"DDEV provides configurable integration with the Pantheon Website Management Platform , which allows Pantheon users to quickly download and provision a project from Pantheon in a local DDEV-managed environment. DDEV\u2019s Pantheon integration pulls an existing backup from an existing Pantheon site/environment into your local system. That means you must already have a Pantheon site with a backup in order to use it.","title":"Pantheon Integration"},{"location":"users/providers/pantheon/#pantheon-quickstart","text":"If you have DDEV installed, and have an active Pantheon account with an active site, you can follow this guide to spin up a Pantheon project locally. Get your Pantheon machine token: a. Log in to your Pantheon Dashboard and Generate a Machine Token for DDEV to use. b. Add the API token to the web_environment section in your global DDEV configuration at ~/.ddev/global_config.yaml . web_environment: - TERMINUS_MACHINE_TOKEN=abcdeyourtoken Choose a Pantheon site and environment you want to use with DDEV. You can usually use the site name, but in some environments you may need the site ID, which is the long third component of your site dashboard URL. So if the site dashboard is at https://dashboard.pantheon.io/sites/009a2cda-2c22-4eee-8f9d-96f017321555#dev/ , the site ID is 009a2cda-2c22-4eee-8f9d-96f017321555 . On the Pantheon dashboard for the site, make sure that at least one backup has been created. (When you need to refresh what you pull, create a new backup.) Make sure your public SSH key is configured in Pantheon under Account \u2192 SSH Keys . Check out the project codebase from Pantheon. Enable the \u201cGit Connection Mode\u201d and use git clone to check out the code locally. Configure the local checkout for DDEV using ddev config . If using Drupal 8+, verify that Drush is installed in your project with ddev composer require drush/drush . If using Drupal 6 or 7, Drush 8 is already provided in the web container\u2019s /usr/local/bin/drush , so you can skip this step. In your project\u2019s .ddev/providers directory, copy pantheon.yaml.example to pantheon.yaml ( This refers to your project .ddev folder and not the global .ddev folder ). Edit the project environment variable under environment_variables . It will be in the format <projectname>.<environment> , for example yourprojectname.dev or (in cases of ambiguity) <project_uuid>.<environment> , for example 009a2cda-2c22-4eee-8f9d-96f017321555.dev . If using Colima, may need to set an explicit nameserver in ~/.colima/default/colima.yaml like 1.1.1.1 . If this configuration is changed, may also need to restart Colima. Run ddev restart . Run ddev pull pantheon . DDEV will download the Pantheon database and files and bring them into the local DDEV environment. You should now be able to access the project locally. Optionally use ddev push pantheon to push local files and database to Pantheon. The ddev push command can potentially damage your production site, so we don\u2019t recommend using it.","title":"Pantheon Quickstart"},{"location":"users/providers/platform/","text":"Platform.sh Integration \u00b6 DDEV provides integration with the Platform.sh Website Management Platform , which allows Platform.sh users to quickly download and provision a project from Platform.sh in a local DDEV-managed environment. Tip Consider using ddev get platformsh/ddev-platformsh ( platformsh/ddev-platformsh ) for more complete Platform.sh integration. DDEV\u2019s Platform.sh integration pulls databases and files from an existing Platform.sh site/environment into your local system so you can develop locally. Platform.sh Global Configuration \u00b6 You need to obtain and configure an API token first. This is only needed once. Login to the Platform.sh Dashboard and go to Account \u2192 API Tokens . Create an API token DDEV can use. Add the API token to the web_environment section in your global DDEV configuration at ~/.ddev/global_config.yaml : web_environment : - PLATFORMSH_CLI_TOKEN=abcdeyourtoken Platform.sh Per-Project Configuration \u00b6 Check out the site from Platform.sh and configure it with ddev config . You\u2019ll want to use ddev start and make sure the basic functionality is working. Add PLATFORM_PROJECT and PLATFORM_ENVIRONMENT variables to your project. Either in .ddev/config.yaml or a .ddev/config.*.yaml file: web_environment : - PLATFORM_PROJECT=nf4amudfn23biyourproject - PLATFORM_ENVIRONMENT=main Or with a command from your terminal: ddev config --web-environment-add = \"PLATFORM_PROJECT=nf4amudfn23bi,PLATFORM_ENVIRONMENT=main\" Run ddev restart . Run ddev pull platform . After you agree to the prompt, the current upstream databases and files will be downloaded. Optionally use ddev push platform to push local files and database to Platform.sh. The ddev push command can potentially damage your production site, so we don\u2019t recommend using it. If you have more than one database on your Platform.sh project, you'll need to choose which one you want to use as the 'db' primary database on DDEV, and that one will be pulled to the database named db . Do this by setting PLATFORM_PRIMARY_RELATIONSHIP, for example, ddev config --web-environment-add=\"PLATFORM_PRIMARY_RELATIONSHIP=main\" or run ddev pull platform with the --environment flag, for example, ddev pull platform --environment=\"PLATFORM_PRIMARY_RELATIONSHIP=main\" Usage \u00b6 ddev pull platform will connect to Platform.sh to download database and files. To skip downloading and importing either file or database assets, use the --skip-files and --skip-db flags. If you need to change the platform.yaml recipe, you can change it to suit your needs, but remember to remove the #ddev-generated line from the top of the file.","title":"Platform.sh Integration"},{"location":"users/providers/platform/#platformsh-integration","text":"DDEV provides integration with the Platform.sh Website Management Platform , which allows Platform.sh users to quickly download and provision a project from Platform.sh in a local DDEV-managed environment. Tip Consider using ddev get platformsh/ddev-platformsh ( platformsh/ddev-platformsh ) for more complete Platform.sh integration. DDEV\u2019s Platform.sh integration pulls databases and files from an existing Platform.sh site/environment into your local system so you can develop locally.","title":"Platform.sh Integration"},{"location":"users/providers/platform/#platformsh-global-configuration","text":"You need to obtain and configure an API token first. This is only needed once. Login to the Platform.sh Dashboard and go to Account \u2192 API Tokens . Create an API token DDEV can use. Add the API token to the web_environment section in your global DDEV configuration at ~/.ddev/global_config.yaml : web_environment : - PLATFORMSH_CLI_TOKEN=abcdeyourtoken","title":"Platform.sh Global Configuration"},{"location":"users/providers/platform/#platformsh-per-project-configuration","text":"Check out the site from Platform.sh and configure it with ddev config . You\u2019ll want to use ddev start and make sure the basic functionality is working. Add PLATFORM_PROJECT and PLATFORM_ENVIRONMENT variables to your project. Either in .ddev/config.yaml or a .ddev/config.*.yaml file: web_environment : - PLATFORM_PROJECT=nf4amudfn23biyourproject - PLATFORM_ENVIRONMENT=main Or with a command from your terminal: ddev config --web-environment-add = \"PLATFORM_PROJECT=nf4amudfn23bi,PLATFORM_ENVIRONMENT=main\" Run ddev restart . Run ddev pull platform . After you agree to the prompt, the current upstream databases and files will be downloaded. Optionally use ddev push platform to push local files and database to Platform.sh. The ddev push command can potentially damage your production site, so we don\u2019t recommend using it. If you have more than one database on your Platform.sh project, you'll need to choose which one you want to use as the 'db' primary database on DDEV, and that one will be pulled to the database named db . Do this by setting PLATFORM_PRIMARY_RELATIONSHIP, for example, ddev config --web-environment-add=\"PLATFORM_PRIMARY_RELATIONSHIP=main\" or run ddev pull platform with the --environment flag, for example, ddev pull platform --environment=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"","title":"Platform.sh Per-Project Configuration"},{"location":"users/providers/platform/#usage","text":"ddev pull platform will connect to Platform.sh to download database and files. To skip downloading and importing either file or database assets, use the --skip-files and --skip-db flags. If you need to change the platform.yaml recipe, you can change it to suit your needs, but remember to remove the #ddev-generated line from the top of the file.","title":"Usage"},{"location":"users/topics/cms-specific-help/","text":"Controlling CMS Settings Files in DDEV \u00b6 One DDEV feature that lots of people love is its creation and management of CMS-specific settings files. This makes starting and installing a new project a breeze, and is a fantastic time-saver for many users. People can follow one of the many DDEV Quickstart Guides and have a project up and installed in no time. To make this happen, DDEV does a quite a bit of settings management for explicitly-supported CMSes. DDEV will: Create a main settings file if none exists, like Drupal\u2019s settings.php . Create a specialty config file with DDEV-specific settings, like AdditionalSettings.php for TYPO3 or settings.ddev.php for Drupal. Add an include of the specialty file if needed, like adding settings.ddev.php include to the bottom of Drupal\u2019s settings.php . This helps new users and people who are kicking the tires on a CMS. Plus it\u2019s helpful for many developers in their regular workflow. However, there are plenty of you who have sophisticated team and project workflows and don\u2019t want DDEV to manage settings files, or prefer to manage your own. DDEV has always tried to give you control as needed: If you don\u2019t want DDEV to touch a file, remove the #ddev-generated line from that file, empty it or put your own contents in it, and check it into version control. DDEV will then ignore that file and not try to regenerate it. If you later want DDEV to take that file over again, just remove the one that you edited and ddev start and DDEV will create its own version. (You may have to remove it from your Git project if you added it). If you don\u2019t want DDEV to even know what kind of CMS (or other project) you have, use type: php in your .ddev/config.yaml (or run ddev config --project-type=php ). DDEV will no longer create or tweak any settings files, you\u2019re now on your own. (The one drawback of this approach is that you don\u2019t get the nginx configuration which has been tweaked for your CMS. But, as always, you can create your own nginx or Apache configurations.) ( docs ). If you want DDEV to know about the project type, but not create settings files, use disable_settings_management: true . If you want DDEV to use the CMS-specific nginx configuration, but don't want it to touch anything else, you can put disable_settings_management: true in your .ddev/config.yaml (or run ddev config --disable-settings-management ) and DDEV won\u2019t try to create any of the CMS-specific settings files. There is also an environment variable $IS_DDEV_PROJECT that can be used to fence off DDEV-specific behavior. For example, with $IS_DDEV_PROJECT empty, the important parts of settings.ddev.php and AdditionalSettings.php (for TYPO3) are not executed. This means that DDEV\u2019s settings.ddev.php won't be invoked if it somehow ends up in a production environment or in a non-DDEV local development environment. The .ddev/.gitignore is created by ddev start because it gitignores itself. So the intention is that you should not check in the .ddev/.gitignore and it will be created on start if disable_settings_management is false . This helps teams to share .ddev folder checked in by Git, even if the .ddev/.gitignore changes with different versions. CMS-Specific Help and Techniques \u00b6 Drupal Specifics \u00b6 Settings Files : By default, DDEV will create settings files for your project that make it \u201cjust work\u201d out of the box. It creates a sites/default/settings.ddev.php and adds an include in sites/default/settings.php to bring that in. There are guards to prevent the settings.ddev.php from being active when the project is not running under DDEV, but it still should not be checked in and is gitignored. Database requirements for Drupal 9.5+ + : Using MySQL or MariaDB, Drupal requires SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED and DDEV does this for you on ddev start . Using PostgreSQL, Drupal requires the pg_trm extension. DDEV creates this extension automatically for you on ddev start . Twig Debugging : With the default Drupal configuration, it\u2019s very difficult to debug Twig templates; you need to use development.services.yml instead of services.yml . Add this line in your settings.php or settings.local.php . See discussion at drupal.org and the Drupal documentation. $settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml'; TYPO3 Specifics \u00b6 Settings Files : On ddev start , DDEV creates a public/typo3conf/AdditionalConfiguration.php with database configuration in it. Setup a Base Variant (since TYPO3 9.5) \u00b6 Since TYPO3 9.5 you have to setup a Site Configuration for each site you like to serve. To be able to browse the site on your local environment, you have to set up a Base Variant in your Site Configuration depending on your local context. In this example we assume a Application Context Development/DDEV which can be set in the DDEV\u2019s config.yaml : web_environment : - TYPO3_CONTEXT=Development/DDEV This variable will be available after the project start or restart. Afterwards add a Base Variant to your Site Configuration : baseVariants : - base : 'https://example.com.ddev.site/' condition : 'applicationContext == \"Development/DDEV\"' See also TYPO3 Documentation . Running any PHP App with DDEV \u00b6 Nearly any PHP app will run fine with DDEV, and lots of others. If your project type is not one of the explicitly supported project types, that\u2019s fine. Just set the project type to php and go about setting up settings files or .env as you normally would.","title":"Controlling CMS Settings Files in DDEV"},{"location":"users/topics/cms-specific-help/#controlling-cms-settings-files-in-ddev","text":"One DDEV feature that lots of people love is its creation and management of CMS-specific settings files. This makes starting and installing a new project a breeze, and is a fantastic time-saver for many users. People can follow one of the many DDEV Quickstart Guides and have a project up and installed in no time. To make this happen, DDEV does a quite a bit of settings management for explicitly-supported CMSes. DDEV will: Create a main settings file if none exists, like Drupal\u2019s settings.php . Create a specialty config file with DDEV-specific settings, like AdditionalSettings.php for TYPO3 or settings.ddev.php for Drupal. Add an include of the specialty file if needed, like adding settings.ddev.php include to the bottom of Drupal\u2019s settings.php . This helps new users and people who are kicking the tires on a CMS. Plus it\u2019s helpful for many developers in their regular workflow. However, there are plenty of you who have sophisticated team and project workflows and don\u2019t want DDEV to manage settings files, or prefer to manage your own. DDEV has always tried to give you control as needed: If you don\u2019t want DDEV to touch a file, remove the #ddev-generated line from that file, empty it or put your own contents in it, and check it into version control. DDEV will then ignore that file and not try to regenerate it. If you later want DDEV to take that file over again, just remove the one that you edited and ddev start and DDEV will create its own version. (You may have to remove it from your Git project if you added it). If you don\u2019t want DDEV to even know what kind of CMS (or other project) you have, use type: php in your .ddev/config.yaml (or run ddev config --project-type=php ). DDEV will no longer create or tweak any settings files, you\u2019re now on your own. (The one drawback of this approach is that you don\u2019t get the nginx configuration which has been tweaked for your CMS. But, as always, you can create your own nginx or Apache configurations.) ( docs ). If you want DDEV to know about the project type, but not create settings files, use disable_settings_management: true . If you want DDEV to use the CMS-specific nginx configuration, but don't want it to touch anything else, you can put disable_settings_management: true in your .ddev/config.yaml (or run ddev config --disable-settings-management ) and DDEV won\u2019t try to create any of the CMS-specific settings files. There is also an environment variable $IS_DDEV_PROJECT that can be used to fence off DDEV-specific behavior. For example, with $IS_DDEV_PROJECT empty, the important parts of settings.ddev.php and AdditionalSettings.php (for TYPO3) are not executed. This means that DDEV\u2019s settings.ddev.php won't be invoked if it somehow ends up in a production environment or in a non-DDEV local development environment. The .ddev/.gitignore is created by ddev start because it gitignores itself. So the intention is that you should not check in the .ddev/.gitignore and it will be created on start if disable_settings_management is false . This helps teams to share .ddev folder checked in by Git, even if the .ddev/.gitignore changes with different versions.","title":"Controlling CMS Settings Files in DDEV"},{"location":"users/topics/cms-specific-help/#cms-specific-help-and-techniques","text":"","title":"CMS-Specific Help and Techniques"},{"location":"users/topics/phpstorm/","text":"PhpStorm Configuration and Integration \u00b6 Full Integration with Docker, DDEV, and PhpStorm \u00b6 For full integration of PhpStorm and DDEV, it\u2019s easiest to use the DDEV Integration Plugin or search the marketplace ( Preferences \u2192 Plugins \u2192 Marketplace ) for \u201cDDEV\u201d. The integration plugin handles nearly everything on this page automatically, and works on all platforms. The only thing it doesn\u2019t currently do is set up phpunit , and it doesn\u2019t point docker-compose correctly. For any setup, including the DDEV Integration Plugin : In Preferences \u2192 Build, Execution, Deployment \u2192 Docker \u2192 Tools , set the docker-compose executable to DDEV\u2019s private docker-compose using the full path to .ddev/bin/docker-compose in your home directory. If you\u2019re using WSL2 and running PhpStorm on the Windows side, PhpStorm can\u2019t use docker-compose from WSL2, so at least configure Docker Desktop in Settings \u2192 General to \u201cUse Docker Compose V2\u201d and use a recent version of Docker Desktop. Requirements \u00b6 PhpStorm 2022.2 or higher. DDEV v1.21.1 or higher. Setup Technique Without DDEV Integration Plugin \u00b6 Start your project by running ddev start . Open the DDEV project. In this example, the project name is \u201cd9\u201d and the site is \u201cd9.ddev.site\u201d. If you\u2019re on Windows, running PhpStorm on the Windows side but using WSL2 for your DDEV project, open the project as a WSL2 project. In other words, in the Open dialog, browse to \\\\wsl$\\Ubuntu\\home\\rfay\\workspace\\d9 (in this example). (If you\u2019re running PhpStorm inside WSL2, there are no special instructions.) Under Build, Execution, Deployment \u2192 Docker , set the correct Docker provider, for example \u201cColima\u201d or \u201cDocker for Mac\u201d. Set up your project to do normal Xdebug, as described in the Step Debugging section . This will result in a PhpStorm \u201cServer\u201d with the proper name, normally the same as the FQDN of the project. In this example, \u201cd9.ddev.site\u201d. (All you have to do here is click the little telephone to \u201cStart listening for PHP Debug Connections\u201d, run ddev xdebug on , and visit a web page and choose the correct mapping from host to server.) Under File \u2192 Settings \u2192 PHP (Windows) or Preferences \u2192 PHP (macOS), click \u201c...\u201d to the right of \u201cCLI Interpreter\u201d. Use the \u201c+\u201d to select \u201cFrom Docker, Vagrant, VM...\u201d. Choose \u201cDocker Compose\u201d. Create a \u201cserver\u201d; Choose the appropriate Docker provider configured above under Build, Execution, Deployment \u2192 Docker . In the \u201cPath mappings\u201d of the \u201cServer\u201d you may have to map the local paths (which on WSL2 means /home/... ) to the in-container paths, especially if you have Mutagen enabled. So \u201cVirtual Machine Path\u201d would be /var/www/html and \u201cLocal path\u201d would be something like /Users/rfay/workspace/d9 (on macOS) or \\\\wsl$\\Ubuntu\\home\\rfay\\workspace\\d9 on Windows using WSL2. Now back in the \u201cConfigure Remote PHP Interpreter\u201d for \u201cConfiguration files\u201d use .ddev/.ddev-docker-compose-full.yaml . On macOS, you may need to use \u2318 + SHIFT + . , to show hidden dotfiles. Service: web . In the CLI interpreter \u201cLifecycle\u201d select \u201cConnect to existing container\u201d. Here\u2019s an example filled out: In the main PHP setup dialog, add an entry to the path mappings, as it doesn\u2019t correctly derive the full path mapping. Add an entry that maps your project location to /var/www/html . So in this example, the \u201cLocal Path\u201d is /Users/rfay/workspace/d9 and the \u201cRemote Path\u201d is /var/www/html : Configure composer under PHP \u2192 Composer . Use \u201cremote interpreter\u201d CLI Interpreter will be \u201cweb\u201d Enabling PHPUnit \u00b6 This part is not done for you by the integration plugin. Under \u201cTest Frameworks\u201d click \u201c+\u201d to add PHPUnit, assuming PHPUnit is already installed. PHPUnit by remote interpreter Interpreter \u201cDDEV\u201d Choose \u201cPath to phpunit.phar\u201d and use /var/www/html/vendor/bin/phpunit , or wherever your PHPUnit is inside the container. You need PHPUnit properly Composer-installed for your CMS. For example, for Drupal 9, ddev composer require --dev --with-all-dependencies drupal/core-dev:^9 and ddev composer require --dev phpspec/prophecy-phpunit:^2 . Default configuration file: /var/www/html/web/core/phpunit.xml or wherever yours is inside the container. Open Run/Debug configurations and use \u201c+\u201d to add a PHPUnit configuration. Give it a name. Test scope (as you wish, by directory or class or whatever). Interpreter: \u201cweb\u201d (the one we set up). Enable Xdebug if you want to debug tests with ddev xdebug on . Run the runner you created: PhpStorm Basic Setup on Windows WSL2 \u00b6 It\u2019s possible to use PhpStorm with DDEV on WSL2 in at least three different ways: Run PhpStorm in Windows as usual, opening the project on the WSL2 filesystem at \\\\wsl$\\<distro> (e.g. \\\\wsl$\\Ubuntu ). PhpStorm is slow to index files but can be slow to respond to file changes in this mode, although it's adequate for many people. \"Remote Development\" in PhpStorm 2022.3+, which has explicit support for WSL2 and actually runs a PhpStorm instance on WSL2. Enabling X11 on Windows and running PhpStorm inside WSL2 as a Linux app. PhpStorm works fine this way; it does require WSL2 graphics support, which is now available on all Windows 10 and Windows 11 systems. We\u2019ll walk through each of these approaches. Basics \u00b6 Start with a working DDEV/WSL2 setup as described in the docs . Until that\u2019s all working it doesn\u2019t help to go farther. If you haven\u2019t used Xdebug with DDEV and PhpStorm before, you\u2019ll want to read the step debugging instructions . Your project absolutely must be in /home inside WSL2, which is on the Linux filesystem. Although you could keep your project on the Windows filesystem and access it in WSL2 via /mnt/c , the performance is even worse than native Windows. It does work though, but don\u2019t do it. You\u2019ll be miserable. PhpStorm Running On Windows Side and Using Docker Desktop \u00b6 With the DDEV Integration Plugin almost everything is already done for you, so use it. Create your project inside WSL2 (on the /home partition) and get it started first. Your working project will be on the /home partition, so you\u2019ll open it using Windows PhpStorm as \\\\wsl$\\Ubuntu\\home\\<username>\\...\\<projectdir> . On some systems and some projects it may take a very long time for PhpStorm to index the files. File changes are noticed only by polling, and PhpStorm will complain about this in the lower right, \u201cExternal file changes sync may be slow\u201d. Temporarily disable your Windows firewall. When you have everything working, you can turn it back on again. Use ddev start and ddev xdebug on . Click the Xdebug listen button on PhpStorm (the little phone icon) to make it start listening. Set a breakpoint on or near the first line of your index.php . Visit the project with a web browser or cURL. You should get a popup asking for mapping of the host-side files to the in-container files. Make sure /home/<you>/.../<yourproject> is mapped to /var/www/html . Debugging should be working. You can step through your code, set breakpoints, view variables, etc. Set the PhpStorm terminal path ( Settings \u2192 Tools \u2192 Terminal \u2192 Shell Path ) to C:\\Windows\\System32\\wsl.exe . That way when you use the terminal Window in WSL2 it\u2019s using the Bash shell in WSL2. PhpStorm with \"Remote Development\" option \u00b6 Open your WSL2 project using File \u2192 Remote Development \u2192 WSL : Choose the distro and then the project. For xdebug you'll want to use ddev config global --xdebug-ide-location=wsl2 because essentially the IDE is running inside WSL2 (and listening there). Use ddev xdebug on as normal; test with a simple breakpoint in your index.php . PhpStorm Inside WSL2 in Linux \u00b6 On Windows 10 or 11 get \"Windows Subsystem for Linux\" from the Microsoft Store, which now includes graphical support. Edit /etc/wsl.conf to systemd support, which allows for installing PhpStorm with snap, see details about WSL2 and systemd : [boot] systemd=true wsl --shutdown on the Windows side and wait 10 seconds, then restart your distro. In WSL2, sudo snap install --classic phpstorm . DDEV should already be installed as described in DDEV installation . ddev config global --xdebug-ide-location=wsl2 to tell DDEV that the IDE is listening in WSL2 as opposed to listening on the Windows side. Start PhpStorm, phpstorm & . Use ddev start and ddev xdebug on . Click the Xdebug listen button in PhpStorm (the little phone icon) to make it start listening. Set a breakpoint on or near the first line of your index.php . Visit the project with a web browser or cURL. You should get a popup asking for mapping of the host-side files to the in-container files. Make sure /home/<you>/.../<yourproject> is mapped to /var/www/html . Debugging should be working! You can step through your code, set breakpoints, view variables, etc.","title":"PhpStorm Configuration and Integration"},{"location":"users/topics/phpstorm/#phpstorm-configuration-and-integration","text":"","title":"PhpStorm Configuration and Integration"},{"location":"users/topics/phpstorm/#full-integration-with-docker-ddev-and-phpstorm","text":"For full integration of PhpStorm and DDEV, it\u2019s easiest to use the DDEV Integration Plugin or search the marketplace ( Preferences \u2192 Plugins \u2192 Marketplace ) for \u201cDDEV\u201d. The integration plugin handles nearly everything on this page automatically, and works on all platforms. The only thing it doesn\u2019t currently do is set up phpunit , and it doesn\u2019t point docker-compose correctly. For any setup, including the DDEV Integration Plugin : In Preferences \u2192 Build, Execution, Deployment \u2192 Docker \u2192 Tools , set the docker-compose executable to DDEV\u2019s private docker-compose using the full path to .ddev/bin/docker-compose in your home directory. If you\u2019re using WSL2 and running PhpStorm on the Windows side, PhpStorm can\u2019t use docker-compose from WSL2, so at least configure Docker Desktop in Settings \u2192 General to \u201cUse Docker Compose V2\u201d and use a recent version of Docker Desktop.","title":"Full Integration with Docker, DDEV, and PhpStorm"},{"location":"users/topics/phpstorm/#phpstorm-basic-setup-on-windows-wsl2","text":"It\u2019s possible to use PhpStorm with DDEV on WSL2 in at least three different ways: Run PhpStorm in Windows as usual, opening the project on the WSL2 filesystem at \\\\wsl$\\<distro> (e.g. \\\\wsl$\\Ubuntu ). PhpStorm is slow to index files but can be slow to respond to file changes in this mode, although it's adequate for many people. \"Remote Development\" in PhpStorm 2022.3+, which has explicit support for WSL2 and actually runs a PhpStorm instance on WSL2. Enabling X11 on Windows and running PhpStorm inside WSL2 as a Linux app. PhpStorm works fine this way; it does require WSL2 graphics support, which is now available on all Windows 10 and Windows 11 systems. We\u2019ll walk through each of these approaches.","title":"PhpStorm Basic Setup on Windows WSL2"},{"location":"users/topics/sharing/","text":"Sharing Your Project \u00b6 Even though DDEV is intended for local development on a single machine, not as a public server, there are a number of reasons you might want to expose your work in progress more broadly: Testing with a mobile device Sharing on a local network so that everybody on the local network can see your project Some CI applications There are at least three different ways to share a running DDEV project outside the local developer machine: ddev share (using ngrok to share over the internet) Local name resolution and sharing the project on the local network Sharing just the HTTP port of the local machine on the local network Using ddev share (Easiest) \u00b6 ddev share proxies the project via ngrok , and it\u2019s by far the easiest way to solve the problem of sharing your project with others on your team or around the world. It\u2019s built into DDEV and \u201cjust works\u201d for most people, and requires a free or paid ngrok.com account. All you do is run ddev share and then give the resultant URL to your collaborator or use it on your mobile device. Read the basic how-to from DrupalEasy or run ddev share -h for more. There are CMSes that make this a little harder, especially WordPress and Magento 2. Both of those only respond to a single base URL, and that URL is coded into the database, so it makes this a little harder. For both of these I recommend paying ngrok the $5/month for a basic plan so you can use a stable subdomain with ngrok. Setting up a Stable ngrok Subdomain \u00b6 Get a paid token with at least the basic plan, and configure it. It will be in ~/.ngrok2/ngrok.yml as authtoken . Configure ngrok_args to use a stable subdomain. In .ddev/config.yaml , ngrok_args: --subdomain wp23 will result in ngrok always using wp23.ngrok.io as the URL, so it\u2019s not changing on you all the time. WordPress: Change the URL with wp search-replace \u00b6 WordPress only has the one base URL, but the wp command is built into DDEV\u2019s web container. This set of steps assumes an ngrok subdomain of wp23 and a starting URL of https://wordpress.ddev.site . Configure .ddev/config.yaml to use a custom subdomain: ngrok_args: --subdomain wp23 . Make a backup of your database with ddev export-db or ddev shapshot . Edit wp-config-ddev.php (or whatever your config is) to change WP_HOME , for example, define('WP_HOME', 'https://wp23.ngrok.io'); ddev wp search-replace https://wordpress.ddev.site https://wp23.ngrok.io , assuming your project is configured for https://wordpress.ddev.site and your ngrok_args are configured for the wp23 subdomain. Now run ddev share . Magento2: Change the URL with Magento Tool \u00b6 This set of steps assumes an ngrok subdomain mg2 : Configure .ddev/config.yaml to use a custom subdomain with ngrok_args: --subdomain mg2 . Make a backup of your database. Edit your .ddev/config.yaml . Run ddev ssh . Run bin/magento setup:store-config:set --base-url=\"https://mg2.ngrok.io/ . Run ddev share and you\u2019ll see your project at mg2.ngrok.io . Using nip.io or Custom Name Resolution on Your Local Network \u00b6 Another solution is to not use *.ddev.site as your project URLs, but to use DNS that you control and that points to the host machine where your project lives. In general, you\u2019ll want to use HTTP URLs with this approach, because it requires manual configuration of the client machine to get it to trust the development certificate that DDEV uses and configures with mkcert on the local machine. Use nip.io to point a domain name to your host. If your computer\u2019s IP address is 192.168.5.101, you can use a domain name like mysite.192.168.5.101.nip.io and that domain name will point to your computer. Add that to your project\u2019s additional_fqdns with ddev config --additional-fqdns=mysite.192.168.5.101.nip.io and ddev start . Now people in your internal network should be able to ping mysite.192.168.5.101.nip.io if your firewall allows it. (If you have other convenient ways to create a DNS entry for this, you can use those instead of nip.io.) Configure ~/.ddev/global_config.yaml to bind to all ports: ddev config global --router-bind-all-interfaces && ddev poweroff && ddev start . Now mobile apps or other computers which are on your local network should be able to access your project. Use the HTTP URL rather than the HTTPS URL because computers outside yours don\u2019t know how to trust the developer TLS certificate you\u2019re using. (You can run ddev describe to see the HTTP URL, but it\u2019s typically the same as the HTTPS URL, but with \u201chttp\u201d instead of \u201chttps\u201d.) Make sure your firewall allows access from your local network to the main interface you\u2019re using. In the example here, you should be able to ping 192.168.5.101 and curl http://192.168.5.101 and get an answer in each case. If you\u2019re using WordPress or Magento 2, you\u2019ll need to change the base URL as described in the ddev share instructions above. Exposing a Host Port and Providing a Direct URL \u00b6 DDEV\u2019s web container also exposes an HTTP port directly, in addition to the normal routing by name and via ddev_router . You can expose this port and it may be a useful approach in some situations. Configure the project host_webserver_port to a known port (that does not conflict with already configured ports). For example, using port 8080, ddev config --host-webserver-port=8080 --bind-all-interfaces . This will configure the host-bound port to 8080 and allow it to bind to all network interfaces so colleagues (or hackers) on your local network can access this project\u2019s ports. Make sure your firewall allows access to the port on your host machine. If you\u2019re using WordPress or Magento 2 you\u2019ll need to change the base URL as described in the ddev share instructions above. Each project on your computer must use different ports or you\u2019ll have port conflicts, and you can\u2019t typically use ports 80 or 443 because ddev-router is already using those for normal routing. If you don\u2019t want to run ddev-router at all, you can omit it globally with ddev config global --omit-containers=ddev-router . This is a specialty thing to do when you don\u2019t need the reverse proxy, as for DrupalPod or other Gitpod applications. Computers and mobile devices on your local network should now be able to access port 8080, on the (example) host address 192.168.5.23, so http://192.168.5.23:8080 You\u2019ll probably want to use the HTTP URL; your coworker\u2019s browser will not trust the developer TLS certificate you\u2019re using.","title":"Sharing Your Project"},{"location":"users/topics/sharing/#sharing-your-project","text":"Even though DDEV is intended for local development on a single machine, not as a public server, there are a number of reasons you might want to expose your work in progress more broadly: Testing with a mobile device Sharing on a local network so that everybody on the local network can see your project Some CI applications There are at least three different ways to share a running DDEV project outside the local developer machine: ddev share (using ngrok to share over the internet) Local name resolution and sharing the project on the local network Sharing just the HTTP port of the local machine on the local network","title":"Sharing Your Project"},{"location":"users/topics/sharing/#using-ddev-share-easiest","text":"ddev share proxies the project via ngrok , and it\u2019s by far the easiest way to solve the problem of sharing your project with others on your team or around the world. It\u2019s built into DDEV and \u201cjust works\u201d for most people, and requires a free or paid ngrok.com account. All you do is run ddev share and then give the resultant URL to your collaborator or use it on your mobile device. Read the basic how-to from DrupalEasy or run ddev share -h for more. There are CMSes that make this a little harder, especially WordPress and Magento 2. Both of those only respond to a single base URL, and that URL is coded into the database, so it makes this a little harder. For both of these I recommend paying ngrok the $5/month for a basic plan so you can use a stable subdomain with ngrok.","title":"Using ddev share (Easiest)"},{"location":"users/topics/sharing/#exposing-a-host-port-and-providing-a-direct-url","text":"DDEV\u2019s web container also exposes an HTTP port directly, in addition to the normal routing by name and via ddev_router . You can expose this port and it may be a useful approach in some situations. Configure the project host_webserver_port to a known port (that does not conflict with already configured ports). For example, using port 8080, ddev config --host-webserver-port=8080 --bind-all-interfaces . This will configure the host-bound port to 8080 and allow it to bind to all network interfaces so colleagues (or hackers) on your local network can access this project\u2019s ports. Make sure your firewall allows access to the port on your host machine. If you\u2019re using WordPress or Magento 2 you\u2019ll need to change the base URL as described in the ddev share instructions above. Each project on your computer must use different ports or you\u2019ll have port conflicts, and you can\u2019t typically use ports 80 or 443 because ddev-router is already using those for normal routing. If you don\u2019t want to run ddev-router at all, you can omit it globally with ddev config global --omit-containers=ddev-router . This is a specialty thing to do when you don\u2019t need the reverse proxy, as for DrupalPod or other Gitpod applications. Computers and mobile devices on your local network should now be able to access port 8080, on the (example) host address 192.168.5.23, so http://192.168.5.23:8080 You\u2019ll probably want to use the HTTP URL; your coworker\u2019s browser will not trust the developer TLS certificate you\u2019re using.","title":"Exposing a Host Port and Providing a Direct URL"},{"location":"users/topics/webserver/","text":"Webserver-Specific Help and Techniques \u00b6 Apache \u00b6 TLS redirects \u00b6 It\u2019s common to set up HTTP-to-TLS redirects in an .htaccess file, which leads to issues with the DDEV proxy setup. The TLS endpoint of a DDEV project is always the ddev-router container and requests are forwarded through plain HTTP to the project\u2019s web server. This results in endless redirects, so you need to change the root .htaccess file for Apache correctly handles these requests for your local development environment with DDEV. The following snippet should work for most scenarios\u2014not just DDEV\u2014and could replace an existing redirect: # http:// -> https:// plain or behind proxy for Apache 2.2 and 2.4 # behind proxy RewriteCond %{HTTP:X-FORWARDED-PROTO} ^http$ RewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L] # plain RewriteCond %{HTTP:X-FORWARDED-PROTO} ^$ RewriteCond %{REQUEST_SCHEME} ^http$ [NC,OR] RewriteCond %{HTTPS} off RewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]","title":"Webserver-Specific Help and Techniques"},{"location":"users/topics/webserver/#webserver-specific-help-and-techniques","text":"","title":"Webserver-Specific Help and Techniques"},{"location":"users/topics/webserver/#apache","text":"","title":"Apache"}]}